<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SICP 学习笔记 (第一章)</title>
      <link href="/2023/07/02/1sicp/"/>
      <url>/2023/07/02/1sicp/</url>
      
        <content type="html"><![CDATA[<p>习题和书中代码使用 <code>python</code> 重写</p><hr><h1>Chapter 1: 构造函数抽象</h1><h2 id="1-1-程序设计的基本元素">1.1 程序设计的基本元素</h2><p>三种机制</p><ol><li>基本表达形式: 最简单的元素</li><li>组合的方法: 构造复合元素</li><li>抽象的方法: 命名并操作复合元素</li></ol><h3 id="1-1-1-表达式">1.1.1 表达式</h3><p>在 <code>scheme</code> 中:</p><p>一些十进制的数字是表达式, 可以用表示函数的基本元素(如 <code>+</code>, <code>*</code>) 来组合这些数字表达式 <br>表示把有关函数应用到这些数字上面, 形成类似 <code>(+ 3 4)</code> 的组合式 <br><code>(运算符 运算对象1 运算对象2 ....)</code> 这种运算符在最前的表达方式是前缀表达式</p><ol><li>可以适用任意个运算对象而不出现歧义</li><li>允许运算对象本身也是个组合式</li></ol><p>解释器通常按照 <strong>读入-求值-打印</strong> 循环求出表达式的值, 无论表达式多复杂</p><p>在 <code>python</code> 解释器中, 直接输入正常的中缀表达式就可以打印结果</p><h3 id="1-1-2-命名和环境">1.1.2 命名和环境</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>这是把值绑定到变量名的方式, 是最简单的抽象方法 <br>忽略计算值的一系列函数而直接使用名称从而简化程序</p><p>要实现这种绑定的功能, 解释器必须具备存储的能力 <br>这种存储称之为环境(全局环境)</p><h3 id="1-1-3-组合式的求值">1.1.3 组合式的求值</h3><ol><li>对每个运算对象求值, 这一求值函数是递归的</li><li>对每个运算对象求值的结果应用运算符</li></ol><p>可以采用树的形式来表示组合式的求值函数, 组合式的值为父节点, 子节点为运算符和运算对象 <br>自底向上计算, 在越来越高的层次中组合起来, 这种计算函数称为 <strong>树形积累</strong></p><p>叶子节点可以分为以下几类:</p><ol><li>数字, 代表它本身</li><li>运算符, 代表操作方式</li><li>其他: 在环境中寻找绑定的值</li><li>特殊形式</li></ol><h3 id="1-1-4-复合函数">1.1.4 复合函数</h3><p><strong>函数定义</strong> 可以为复合操作提供名字, 从而在之后的运算中作为一个单元来使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名称</span>(<span class="params">形参列表</span>):</span><br><span class="line">    函数主体</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><p>函数名称和形参列表写在一起, 和调用这个函数的时候一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">square(<span class="number">4</span>) <span class="comment">#16</span></span><br></pre></td></tr></table></figure><p>此时实际参数 4 取代形式参数 <code>x</code> 进行运算, 结果为 16 <br><code>square(4)</code> 也称为一个表达式, 可以被嵌入其他表达式中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_square</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> square(x) + square(y)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> sum_square(x + <span class="number">1</span>, x * <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="1-1-5-函数应用的代换模型">1.1.5 函数应用的代换模型</h3><p><strong>代换模型</strong> 就是将函数体的形参用实参代替之后, 对函数体求值的计算函数</p><blockquote><p>替换只是一个最简单的模型, 之后会讨论其他更精细的模型</p></blockquote><ul><li>正则序求值: 先把所有函数都展开, 最后统一求值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="number">5</span>)</span><br><span class="line">sum_square(<span class="number">5</span> + <span class="number">1</span>, <span class="number">5</span> * <span class="number">2</span>)</span><br><span class="line">square(<span class="number">5</span> + <span class="number">1</span>) + square(<span class="number">5</span> * <span class="number">2</span>)</span><br><span class="line">(<span class="number">5</span> + <span class="number">1</span>) * (<span class="number">5</span> + <span class="number">1</span>) + (<span class="number">5</span> * <span class="number">2</span>) * (<span class="number">5</span> * <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>应用序求值: 先求值所有参数, 之后再展开函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum_square(<span class="number">6</span>, <span class="number">10</span>)</span><br><span class="line">(<span class="number">6</span> * <span class="number">6</span>) + (<span class="number">10</span> * <span class="number">10</span>)</span><br><span class="line"><span class="number">36</span> + <span class="number">100</span></span><br><span class="line"><span class="number">136</span></span><br></pre></td></tr></table></figure><ol><li><code>Lisp</code>采用应用序求值, 这样可以避免一些重复计算</li><li>在无法使用简单的替换来模拟的函数中, 正则序更加复杂</li><li>但在某些方面, 正则序也可以成为重要工具, 如&quot;无限&quot;数据结构</li></ol><h3 id="1-1-6-条件表达式和谓词">1.1.6 条件表达式和谓词</h3><p><code>if</code> 关键字针对这种 <strong>分情况分析</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (p1):</span><br><span class="line">    e1</span><br><span class="line"><span class="keyword">elif</span> (p2):</span><br><span class="line">    e2</span><br><span class="line"><span class="keyword">elif</span> (p3):</span><br><span class="line">    e3</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    e4</span><br></pre></td></tr></table></figure><p>这些 <code>p1</code>, <code>p2</code> 等被称作<strong>谓词</strong>, 是一个结果为 <code>True</code>(真) 或 <code>False</code>(假) 的表达式<br>流程就是找到第一个结果为真的谓词, 之后执行其后的表达式 <br>基本谓词: <code>&gt;=</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>==</code> <br>复合谓词运算符: <code>and</code>, <code>or</code>, <code>not</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(e1) <span class="keyword">and</span> (e2) <span class="keyword">and</span> ... <span class="keyword">and</span> (en) <span class="comment"># 对所有表达式做 and 操作</span></span><br><span class="line">(e1) <span class="keyword">or</span> (e2) <span class="keyword">or</span> ... <span class="keyword">or</span> (en) <span class="comment"># 对所有表达式做 or 操作</span></span><br><span class="line"><span class="keyword">not</span> (expression) <span class="comment"># 对这个表达式取反</span></span><br></pre></td></tr></table></figure><p><code>and</code> 和 <code>or</code> 都有短路特性, 具体表现为:</p><ol><li>当 <code>and</code> 后某个表达式为 <code>False</code> 时, 后面的表达式不再求值</li><li>当 <code>or</code> 后某个表达式为 <code>True</code> 时, 后面的表达式不再求值</li></ol><h3 id="1-1-7-实例-牛顿法求平方根">1.1.7 实例: 牛顿法求平方根</h3><p>定义平方根函数 $\sqrt x = y, 使得y&gt;=0且 y^2 =x$ \</p><ol><li>说明性描述: 注重是什么</li><li>行动性描述: 注重怎么办</li></ol><p>牛顿法求平方根函数:<br>对 $\sqrt x$ 的值有一个猜测 $y$, 求出 $y$ 和 $\frac{x}{y}$的平均数作为新的猜测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">good_enough</span>(<span class="params">guess, x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(square(guess) - x) &lt; <span class="number">0.001</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">average</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> (a + b) / <span class="number">2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">improve</span>(<span class="params">guess, x</span>):</span><br><span class="line">    <span class="keyword">return</span> average(guess, (x / guess))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sqrt</span>(<span class="params">guess, x</span>):</span><br><span class="line">    <span class="keyword">if</span> (good_enough(guess, x)):</span><br><span class="line">        <span class="keyword">return</span> guess</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> sqrt(improve(guess, x), x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sqrt(<span class="number">1.0</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h3 id="1-1-8-函数作为黑箱抽象">1.1.8 函数作为黑箱抽象</h3><p><strong>函数抽象</strong> 封装一个函数, 调用这个函数的时候只需要知道它能返回什么而不需要知道它的实现细节</p><p>以平方根的计算函数举例:</p><ul><li>一个 <code>sqrt</code> 函数可以分解为 <code>good-enough</code>, <code>improve</code>, <code>average</code>, <code>abs</code> 等函数</li><li>也就是把 <code>sqrt</code> 分解成了可以清楚标明的工作</li><li>在实现 <code>sqrt</code> 的函数中, 不需要考虑这些辅助函数的细节, 只需要相信它们</li></ul><p><strong>局部名</strong>: 函数中形参的名字, 是函数使用者不需要关注的内容</p><ul><li><strong>约束变量</strong> 形参的名字所代表的变量</li><li><strong>自由变量</strong> 不是被约束的变量</li></ul><p>在抽象函数时, 如果对约束变量有任何改变, 这样就会影响外部的函数<br>因为这个变量可能在外部函数中还被用到, 这个内部的函数也就不是&quot;黑箱&quot;</p><p><strong>作用域</strong>: 一个约束变量所能生效的表达式 <br>比如函数主体就是形参的作用域</p><p>在 <code>good-enough</code> 中, <code>guess</code> 和 <code>x</code> 是约束变量, <code>&lt;</code>, <code>abs</code> 等则不是 <br>所以约束变量的名字要避开自由变量的名词, 从而避免发生冲突</p><hr><p>现在 <code>sqrt</code> 函数由一些相互分离的函数定义, 而用户只需要用到 <code>sqrt</code> <br>在构建大型程序时, 过多的辅助函数往往会扰乱视线, 还可能出现重名的情况 <br>所以可以把这些辅助函数局部化, 这就需要内部定义</p><p>注意到所有的辅助函数都在 <code>sqrt</code> 的形参 <code>x</code> 的作用域内, 所以不用来回传 <code>x</code>的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sqrt</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> x * x</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">good_enough</span>(<span class="params">guess</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(square(guess) - x) &lt; <span class="number">0.001</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">average</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">return</span> (a + b) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">improve</span>(<span class="params">guess</span>):</span><br><span class="line">        <span class="keyword">return</span> average(guess, (x / guess))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">guess</span>):</span><br><span class="line">        <span class="keyword">if</span> (good_enough(guess)):</span><br><span class="line">            <span class="keyword">return</span> guess</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(improve(guess))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sqrt(<span class="number">1.0</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>在辅助函数中 <code>x</code> 是自由变量, 由外部传给 <code>x</code> 的实际参数决定 <br>这种方法被称作<strong>词法作用域</strong>, 也叫<strong>静态作用域</strong><br>在定义本函数的环境中寻找 <code>x</code> 在哪里被定义</p><h2 id="1-2-函数及其产生的计算">1.2 函数及其产生的计算</h2><p>本节考察函数所产生计算的顺序和消耗时间空间资源的速率</p><h3 id="1-2-1-线性的递归和迭代">1.2.1 线性的递归和迭代</h3><ol><li><p><strong>递归计算函数</strong>:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>在展开阶段, 递归构造一个<strong>推迟进行</strong>的操作所构成的链条</li><li>在收缩阶段, 实际执行这些运算</li></ul><p>所以解释器要维护那些之后要执行的收缩阶段的轨迹 <br>轨迹的长度与 $n$ 成正比, 所以说这是一个 <strong>线性递归函数</strong></p> <figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">factorial</span> <span class="number">6</span>)</span><br><span class="line">(<span class="name"><span class="built_in">*</span></span> <span class="number">6</span> (<span class="name">factorial</span> <span class="number">5</span>))</span><br><span class="line">(<span class="name"><span class="built_in">*</span></span> <span class="number">6</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">5</span> (<span class="name">factorial</span> <span class="number">4</span>)))</span><br><span class="line">(<span class="name"><span class="built_in">*</span></span> <span class="number">6</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">5</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">4</span> (<span class="name">factorial</span> <span class="number">3</span>))))</span><br><span class="line">(<span class="name"><span class="built_in">*</span></span> <span class="number">6</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">5</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">4</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">3</span> (<span class="name">factorial</span> <span class="number">2</span>)))))</span><br><span class="line">(<span class="name"><span class="built_in">*</span></span> <span class="number">6</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">5</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">4</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">3</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">2</span> (<span class="name">factorial</span> <span class="number">1</span>))))))</span><br><span class="line">(<span class="name"><span class="built_in">*</span></span> <span class="number">6</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">5</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">4</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">3</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">2</span> <span class="number">1</span>)))))</span><br><span class="line">(<span class="name"><span class="built_in">*</span></span> <span class="number">6</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">5</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">4</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">3</span> <span class="number">2</span>))))</span><br><span class="line">(<span class="name"><span class="built_in">*</span></span> <span class="number">6</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">5</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">4</span> <span class="number">6</span>)))</span><br><span class="line">(<span class="name"><span class="built_in">*</span></span> <span class="number">6</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">5</span> <span class="number">24</span>))</span><br><span class="line">(<span class="name"><span class="built_in">*</span></span> <span class="number">6</span> <span class="number">120</span>)</span><br><span class="line"><span class="number">720</span></span><br></pre></td></tr></table></figure></li><li><p><strong>迭代计算函数</strong></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fact</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">count, res</span>):</span><br><span class="line">        <span class="keyword">if</span> (count &gt; n):</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(count + <span class="number">1</span>, res * count)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(<span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>(注意在 <code>python</code> 中不会由有这个迭代的优化, 据说是为了保存递归状态) <br>在这个计算函数中没有任何的展开和收缩, 需要保存的只有 <code>product</code> 和 <code>counter</code> <br>这种可以使用固定状态描述计算函数的就是迭代计算函数 <br>同样, 这也是 <strong>线性迭代函数</strong></p></li></ol><blockquote><p>注意递归函数和递归计算函数并不同, 递归函数是一个语法上的概念 <br>上述的迭代计算函数的具体实现也是采用递归函数</p></blockquote><p>在迭代计算函数中, 形参都提供了计算状态的完整描述, 如果因为某些不可抗力程序终止 <br>那么需要重新唤醒这个程序, 只需要提供两个形参即可 <br>而递归计算函数还有一些隐含的变量并没有显式地保存在程序变量中, 而是由解释器维护 <br>所以递归计算函数的链条越长, 解释器需要保存的信息也越多</p><p>在其他大多数语言中, 即使是迭代计算函数, 只要使用递归函数实现, 那么消耗的空间就是线性的 <br>所以需要借助一些语法糖比如 <code>for</code>, <code>while</code> 才能实现迭代计算函数</p><p>而<code>scheme</code>的解释器实现没有这个缺点, 只要是迭代计算函数, 消耗的空间就是常数级别<br>具有这一特性的实现是 <strong>尾递归</strong> 的</p><h3 id="1-2-2-树形递归">1.2.2 树形递归</h3><p>考虑斐波那契数列的计算, $f(n) = f(n-1)+f(n-2)$ <br>每次计算的时候都要调用两次自身, 画成结构图就是一棵树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>一般来说, 树形递归结构的深度代表空间占用, 节点数代表运算次数(时间占用)</p><p>这种树形递归求$f(n)$ 的节点数正好是$f(n+1)$, 而斐波那契数列的值是成指数增长 <br>所以这种计算的方式效率极低, 可以采用线性迭代计算函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">count, a, b</span>):</span><br><span class="line">        <span class="keyword">if</span> (count &gt; n):</span><br><span class="line">            <span class="keyword">return</span> b</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(count + <span class="number">1</span>, b, a + b)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>总体来说, 树形递归在这个问题上效率较低, 但非常直观 <br>然而在其他的一些问题上, 树形递归不仅直观而且效率很高, 比如前序遍历</p><hr><p>实例: 换零钱<br>将总数为 $a$ 的现金换成硬币可以由以下两种情况</p><ul><li>将总数为 $a$ 的现金换成第一种硬币之外的所有其他硬币的方式的数目</li><li>将总数为 $a-d$ 的现金换成所有种类的硬币的数目<br>两者相加即为答案</li></ul><p>其中分类的标准是有没有使用第一种硬币, 第一组都没有使用, 第二组一定使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to</span>(<span class="params">x</span>):</span><br><span class="line">        tmp = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">25</span>, <span class="number">50</span>]</span><br><span class="line">        <span class="keyword">return</span> tmp[x]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">cur, which</span>):</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (cur &lt; <span class="number">0</span>) <span class="keyword">or</span> (which == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>(cur, which - <span class="number">1</span>) + <span class="built_in">iter</span>(cur - to(which), which)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(a, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>其中冗余计算和斐波那契数列中的一样, 这可以通过记忆化来实现优化</p><h3 id="1-2-3-增长的阶">1.2.3 增长的阶</h3><p><strong>增长的阶</strong> 粗略度量某个函数所需资源的情况 <br>$R(n)$ 表示计算函数在处理 $n$ 规模的问题时所需要的资源量 <br>称 $R(n)$ 具有 $\Theta(f(n))$的增长阶, 其中 $R(n) = k \times f(n)$ 其中 $k$ 为常数</p><p>在线性递归计算函数中 时间需求的增长为 $\Theta(n)$, 空间需求的增长为 $\Theta(n)$ <br>在线性迭代计算函数中 时间需求的增长为 $\Theta(n)$, 空间需求的增长为 $\Theta(1)$ 即常数空间</p><p>由于是粗略的描述, 所以类似 $n^2+3n+1$这样的所需步数仍然是 $\Theta(n^2)$</p><h3 id="1-2-4-求幂">1.2.4 求幂</h3><p>线性求幂 <br>时间 $\Theta(n)$, 空间 $\Theta(n)$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_pow</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> a * my_pow(a, b - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>时间 $\Theta(n)$, 空间 $\Theta(1)$ (<code>scheme</code> 中空间复杂度)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_pow</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">count, res</span>):</span><br><span class="line">        <span class="keyword">if</span> (count == b):</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(count + <span class="number">1</span>, res * a)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(<span class="number">0</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>快速幂: <br>每个整数都可以进行二进制拆分, 基于这样的思想来进行快速幂, 假设底数为 $a$</p><ol><li>如果这个数 $b$ 是偶数, 那么计算它的 $a ^{\frac{b}{2}}$ 的平方</li><li>如果这个数 $b$ 是奇数, 那么计算它的 $a \times a^{b - 1}$</li></ol><p>总体来说问题规模每次缩减一半, 时间空间复杂度都是 $\Theta(logn)$ 的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fast_pow</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> (b % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> square(<span class="built_in">pow</span>(a, b // <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(a, b - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="1-2-5-最大公约数">1.2.5 最大公约数</h3><p>欧几里得算法 $GCD(a, b) = GCD(b, a % b)$ <br>当 $b$ 为 0的时候返回 $a$ 为最大公约数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">GCD</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> GCD(b, a % b)</span><br></pre></td></tr></table></figure><p>拉梅定理: $GCD$ 递归了 k 层, 这对数中较小的数一定大于第 k 个斐波那契数列 <br>据此估计 $GCD$ 时间复杂度 $\Theta(logn)$ 空间复杂度 $\Theta(1)$</p><h3 id="1-2-6-素数检测">1.2.6 素数检测</h3><p><strong>寻找因子</strong>: 法一 $\Theta(\sqrt n)$, 法二 $\Theta(logn)$</p><ol><li><p>结论: 只需要寻找 $\sqrt n$ 个因子就可以找出全部因子 <br>证明: 如果 $d$ 是 $n$ 的因子, $n / d$ 也必然是 $n$ 的因子, 而两者不可能同时大于 $\sqrt n$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">min_divisor</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">divide</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> n % x == <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">cur</span>):</span><br><span class="line">        <span class="keyword">if</span> (square(cur) &gt; n):</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        <span class="keyword">elif</span> (divide(cur)):</span><br><span class="line">            <span class="keyword">return</span> cur</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(cur + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> min_divisor(x) == x</span><br></pre></td></tr></table></figure></li><li><p>费马检查</p><blockquote><p>费马小定理: 如果 $n$ 是一个素数, $a$ 是小于 $n$ 的任意正整数, $a$ 的 $n$ 次方与 $a$ 模 $n$ 同余</p></blockquote><p>费马检查就是根据费马小定理而来的一个随机算法</p><ol><li>对于给定的整数 $n$, 随机任取一个 $a&lt;n$ 并计算出 $a^n$ 模 $n$ 的余数</li><li>如果得到的结果不等于 $a$, 那它就一定不是素数, 如果它是 $a$, 那么它由很大可能是素数</li><li>多取几个 $a$ 的值, 这样结果的可信度就越来越高</li></ol><blockquote><p>然则这种检测方式不一定准确, 满足这个性质的非素数称作 $Carmicheal$ 数 <br>但在很大的素数面前, 碰到$Carmicheal$ 数的概率极低极低</p></blockquote> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pow</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> % p</span><br><span class="line">        <span class="keyword">elif</span> (b % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> square(<span class="built_in">pow</span>(a, b // <span class="number">2</span>)) % p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> a * <span class="built_in">pow</span>(a, b - <span class="number">1</span>) % p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(x, p) == x</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">times</span>):</span><br><span class="line">        <span class="keyword">if</span> (times == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> (<span class="keyword">not</span> check(random.randint(<span class="number">1</span>, p - <span class="number">1</span>))):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> calc(times - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> calc(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li><li><p>$Miller-Robin$ 素数检测</p><ul><li>根据费马小定理变形: $a^{n-1}\equiv 1(mod ; n)$</li><li>根据二次探测定理: 对于素数 $p$, 如果 $x^2 \equiv 1 (mod ; p)$, 小于 $p$ 的解有两个, $1$ 和$p-1$<br>$x^2 - 1 \equiv 0 (mod ; p)$ 即 $(x+1)(x-1)\equiv 0 (mod ; p)$ <br>因为 $p$ 为素数, 所以要么 $(x+1)(x-1) =0$ 要么 $(x+1)(x-1)$ 是 $p$ 的倍数 <br>对于第一种情况 $x=1$, 对于第二种情况 $x = p-1$ , 注意要求解小于 $p$</li></ul><p>具体检测步骤如下:</p><ol><li>在计算快速幂的时候, 如果当前指数为偶数, 那么检测非平凡平方根</li><li>由二次探测定理, 设平方之前的数为 $x$, 平方之后的数为 $x^2$</li><li>如果 $x^2 \equiv 1 (mod ; p)$, 但是 $x \not \equiv (1或p-1) (mod ; p)$ 则 $p$ 一定不是素数</li><li>此时的 $x$ 就是书中所说的非平凡平方根</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">miller_robin</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">nontrivial_square_root</span>(<span class="params">x</span>):</span><br><span class="line">        tmp = square(x) % p</span><br><span class="line">        <span class="keyword">if</span> ((x != <span class="number">1</span>) <span class="keyword">and</span> (x != p - <span class="number">1</span>) <span class="keyword">and</span> (tmp == <span class="number">1</span>)):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pow</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> (b % <span class="number">2</span> == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> a * <span class="built_in">pow</span>(a, b - <span class="number">1</span>) % p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> nontrivial_square_root(<span class="built_in">pow</span>(a, b // <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(random.randint(<span class="number">1</span>, p - <span class="number">1</span>), p - <span class="number">1</span>) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">times</span>):</span><br><span class="line">        <span class="keyword">if</span> (times == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> (test()):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(times - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(<span class="number">7</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="1-3-用高阶函数做抽象">1.3 用高阶函数做抽象</h2><p>函数的参数可以是另一个函数, 这类操作函数的函数称作高阶函数</p><h3 id="1-3-1-函数作为参数">1.3.1 函数作为参数</h3><p>书中所说的范围内整数和, 范围内整数立方和, 计算 $\pi$ 序列三个函数都有相同的模式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (&lt;term&gt;(a) + <span class="built_in">sum</span>(&lt;<span class="built_in">next</span>&gt;(a), b))</span><br></pre></td></tr></table></figure><p>与数学中的 $\Sigma$ 类似, 这个高阶函数表达的是求和的概念</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">term, a, to, b</span>):</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (term(a) + <span class="built_in">sum</span>(term, to(a), to, b))</span><br></pre></td></tr></table></figure><p>这才是完整的高阶函数, 使用实例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">10000000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cube</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x * x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">identity</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inc</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pi_sum</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pi_term</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> / (x * (x + <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pi_to</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> x + <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">8</span> * <span class="built_in">sum</span>(pi_term, a, pi_to, b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(cube, <span class="number">1</span>, inc, <span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(identity, <span class="number">1</span>, inc, <span class="number">10</span>)) </span><br><span class="line"><span class="built_in">print</span>(pi_sum(<span class="number">1</span>, <span class="number">10000</span>))</span><br></pre></td></tr></table></figure><h3 id="1-3-2-用-Lambda-构造过程">1.3.2 用 $Lambda$ 构造过程</h3><p>$lambda$ 就是所谓匿名函数, 基本语法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> &lt;形参列表&gt;: &lt;函数体&gt;</span><br></pre></td></tr></table></figure><p>$lambda$ 的优势在于, 把函数当作参数传入的时候, 不需要给函数命名, 从而省去麻烦 <br>$lambda$ 也可以当作运算符使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>((<span class="keyword">lambda</span> x: x + <span class="number">1</span>)(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h3 id="1-3-3-过程作为一般性的方法">1.3.3 过程作为一般性的方法</h3><ol><li>区间这般寻找方程的根: 主要是根据零点存在定理的二分法 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sin</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">func, a, b</span>):</span><br><span class="line">    mid = (a + b) / <span class="number">2</span></span><br><span class="line">    tmp = func(mid)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(a - b) &lt; <span class="number">0.001</span>):</span><br><span class="line">        <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">elif</span> (tmp &lt; <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> search(func, mid, b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> search(func, a, mid)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_point</span>(<span class="params">func, a, b</span>):</span><br><span class="line">    x, y = func(a), func(b)</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span> <span class="keyword">and</span> y &gt; <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> search(func, a, b)</span><br><span class="line">    <span class="keyword">elif</span> (x &gt; <span class="number">0</span> <span class="keyword">and</span> y &lt; <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> search(func, b, a)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Error&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(get_point(sin, <span class="number">2.0</span>, <span class="number">4.0</span>))</span><br><span class="line"><span class="built_in">print</span>(get_point(<span class="keyword">lambda</span> x: x * x * x - <span class="number">2</span> * x - <span class="number">3</span>, <span class="number">1.0</span>, <span class="number">2.0</span>))</span><br></pre></td></tr></table></figure></li><li>寻找函数的不动点 <br>如果 $x$ 满足 $f(x) = x$ 则 $x$ 为函数 $f$ 的一个不动点 <br>可以对某一个随机猜测不断应用 $f$, 等到两次结果差距不大时, 就可以找到近似的不动点 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> cos, sin</span><br><span class="line"></span><br><span class="line">tolerance = <span class="number">1e-5</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fixed_point</span>(<span class="params">func, first_guess</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_enough</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">abs</span>(a - b) &lt; tolerance)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">val</span>):</span><br><span class="line">        next_val = func(val)</span><br><span class="line">        <span class="keyword">if</span> (close_enough(val, next_val)):</span><br><span class="line">            <span class="keyword">return</span> next_val</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> calc(next_val)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> calc(first_guess)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fixed_point(cos, <span class="number">1.0</span>))</span><br><span class="line"><span class="built_in">print</span>(fixed_point(<span class="keyword">lambda</span> y: sin(y) + cos(y), <span class="number">1.0</span>))</span><br></pre></td></tr></table></figure>类似找平方根的过程, 令 $f(y) = \frac x y$, $f(y)=y$ 即 $x = y^2$ <br>但是直接使用上述程序会陷入死循环, 因为<br>$y_2 = \frac{x}{y_1}$, $y_3 = \frac{x}{\frac{x}{y_1}} = y_1$<br>解决上述问题的一个方法叫做平均阻尼, 不让有关的猜测变化得过于剧烈 <br>因为实际答案总是在 $y$ 和 $\frac x y$ 之间, 所以取平均值, 求 $f(y) = \frac{1}{2}(y + \frac x y)$ 的不动点 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_sqrt</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> fixed_point(<span class="keyword">lambda</span> y: (y + x / y) / <span class="number">2</span>, <span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_sqrt(<span class="number">11</span>))</span><br></pre></td></tr></table></figure></li></ol><h3 id="1-3-4-函数作为返回值">1.3.4 函数作为返回值</h3><p>可以创建返回值为函数的函数</p><p>平均阻尼函数以及重做平方根过程:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">average_damp</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">lambda</span> x: (x + func(x)) / <span class="number">2</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mysqrt</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> fixed_point(average_damp(<span class="keyword">lambda</span> y: x / y), <span class="number">1.0</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cube_root</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> fixed_point(average_damp(<span class="keyword">lambda</span> y: x / (y * y)), <span class="number">1.0</span>)</span><br></pre></td></tr></table></figure><p><strong>牛顿法</strong>: <br>如果 $g(x)$ 是一个可微分函数, 那么 $g(x)=0$ 的一个解就是 $f(x)$ 的不动点 <br>其中 $f(x) = x - \frac{f(x)}{g’(x)}$,  $g’(x) = \frac{g(x+dx)-g(x)}{dx}$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dx = <span class="number">0.00001</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deriv</span>(<span class="params">g</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: (g(x + dx) - g(x)) / dx</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">newton_transform</span>(<span class="params">g</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x - g(x) / deriv(g)(x)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">newton_method</span>(<span class="params">g, guess</span>):</span><br><span class="line">    <span class="keyword">return</span> fixed_point(newton_transform(g), guess)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sqrt</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> newton_method(<span class="keyword">lambda</span> y: y * y - x, <span class="number">1.0</span>)</span><br></pre></td></tr></table></figure><p><strong>抽象和第一级过程</strong></p><p>抽象出平均阻尼和牛顿法的一般过程并重新定义 <code>sqrt</code> 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fixed_point_of_transform</span>(<span class="params">g, transform, guess</span>):</span><br><span class="line">    <span class="keyword">return</span> fixed_point(transform(g), guess)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sqrt1</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> fixed_point_of_transform(<span class="keyword">lambda</span> y: x / y, average_damp, <span class="number">1.0</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sqrt2</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> fixed_point_of_transform(<span class="keyword">lambda</span> y: y * y - x,</span><br><span class="line">                                    newton_transform, <span class="number">1.0</span>)</span><br></pre></td></tr></table></figure><p>在程序设计语言中带有最少限制的元素被称为具有第一级的状态, 特权包括</p><ol><li>可以绑定到变量上</li><li>可以提供给过程作为参数</li><li>可以由过程作为结果返回</li><li>可以包含在数据结构中</li></ol><h1>练习</h1><h2 id="1-1">1.1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="comment">#10</span></span><br><span class="line"><span class="number">3</span> + <span class="number">5</span> + <span class="number">4</span> <span class="comment"># 12</span></span><br><span class="line"><span class="number">9</span> - <span class="number">1</span> <span class="comment">#8</span></span><br><span class="line"><span class="number">6</span> / <span class="number">2</span> <span class="comment">#3</span></span><br><span class="line">(<span class="number">2</span> * <span class="number">4</span>) + (<span class="number">4</span> - <span class="number">6</span>) <span class="comment">#6</span></span><br><span class="line">a = <span class="number">3</span></span><br><span class="line">b = a + <span class="number">1</span></span><br><span class="line">a + b + (a * b) <span class="comment"># 19</span></span><br><span class="line">a == b <span class="comment"># False</span></span><br><span class="line"><span class="keyword">if</span> ((b &gt; a) <span class="keyword">and</span> (b &lt; (a * b))):</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> a <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">4</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">6</span></span><br><span class="line"><span class="keyword">elif</span> (b == <span class="number">4</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">6</span> + <span class="number">7</span> + a</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">25</span> <span class="comment">#16</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> + (b <span class="keyword">if</span> (b &gt; a) <span class="keyword">else</span> a) <span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> (a &gt; b):</span><br><span class="line">    x = a</span><br><span class="line"><span class="keyword">elif</span> (a &lt; b):</span><br><span class="line">    x = b</span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    x = -<span class="number">1</span></span><br><span class="line">x * (a + <span class="number">1</span>) <span class="comment">#16</span></span><br></pre></td></tr></table></figure><h2 id="1-2">1.2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">5</span> + <span class="number">4</span> + (<span class="number">2</span> - (<span class="number">3</span> - (<span class="number">6</span> + <span class="number">4</span> / <span class="number">5</span>)))) / (<span class="number">3</span> * (<span class="number">6</span> - <span class="number">2</span>) * (<span class="number">2</span> - <span class="number">7</span>))</span><br></pre></td></tr></table></figure><h2 id="1-3">1.3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">process</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="keyword">if</span> (a &lt;= b) <span class="keyword">and</span> (a &lt;= c):</span><br><span class="line">        <span class="keyword">return</span> b + c</span><br><span class="line">    <span class="keyword">elif</span> (b &lt;= a) <span class="keyword">and</span> (b &lt;= c):</span><br><span class="line">        <span class="keyword">return</span> a + c</span><br><span class="line">    <span class="keyword">elif</span> (c &lt;= a) <span class="keyword">and</span> (c &lt;= b):</span><br><span class="line">        <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><h2 id="1-4">1.4</h2><p>函数行为: <code>a</code> + (<code>b</code> 的绝对值) <br>如果 <code>b &gt; 0</code> 操作符为 <code>+</code> <br>如果 <code>b &lt; 0</code> 操作符为 <code>-</code></p><h2 id="1-5">1.5</h2><ol><li>正则序:</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 (p) 这里无限展开, 发生错误</span></span><br></pre></td></tr></table></figure><ol start="2"><li>应用序</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="comment"># 不计算 (p) 的结果, 因为谓词为真</span></span><br></pre></td></tr></table></figure><h2 id="1-6">1.6</h2><p>结果是死循环, <code>scheme</code> 以应用序求值, 对于 <code>new-if</code> 这个函数 <br>需要求出实参的每一个值, 所以就会陷入无限递归中, 失去了 <code>if</code> 的短路特性</p><h2 id="1-7">1.7</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">new_good_enough</span>(<span class="params">last, guess, x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(last / guess - <span class="number">1</span>) &lt; <span class="number">0.0001</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sqrt</span>(<span class="params">last, guess, x</span>):</span><br><span class="line">    <span class="keyword">if</span> (new_good_enough(last, guess, x)):</span><br><span class="line">        <span class="keyword">return</span> guess</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> sqrt(guess, improve(guess, x), x)</span><br></pre></td></tr></table></figure><h2 id="1-8">1.8</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">new_improve</span>(<span class="params">guess, x</span>):</span><br><span class="line">    <span class="keyword">return</span> (x / square(guess) + <span class="number">2</span> * guess) / <span class="number">3.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">last, guess, x</span>):</span><br><span class="line">    <span class="keyword">if</span> (new_good_enough(last, guess, x)):</span><br><span class="line">        <span class="keyword">return</span> guess</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> calc(guess, new_improve(guess, x), x)</span><br></pre></td></tr></table></figure><h2 id="1-9">1.9</h2><p>第一个: 递归计算函数</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">+</span></span> <span class="number">4</span> <span class="number">5</span>)</span><br><span class="line">(<span class="name">inc</span> (<span class="name"><span class="built_in">+</span></span> <span class="number">3</span> <span class="number">5</span>))</span><br><span class="line">(<span class="name">inc</span> (<span class="name">inc</span> (<span class="name"><span class="built_in">+</span></span> <span class="number">2</span> <span class="number">5</span>)))</span><br><span class="line">(<span class="name">inc</span> (<span class="name">inc</span> (<span class="name">inc</span> (<span class="name"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">5</span>))))</span><br><span class="line">(<span class="name">inc</span> (<span class="name">inc</span> (<span class="name">inc</span> (<span class="name">inc</span> (<span class="name"><span class="built_in">+</span></span> <span class="number">0</span> <span class="number">5</span>)))))</span><br><span class="line">(<span class="name">inc</span> (<span class="name">inc</span> (<span class="name">inc</span> (<span class="name">inc</span> <span class="number">5</span>))))</span><br><span class="line">(<span class="name">inc</span> (<span class="name">inc</span> (<span class="name">inc</span> <span class="number">6</span>)))</span><br><span class="line">(<span class="name">inc</span> (<span class="name">inc</span> <span class="number">7</span>))</span><br><span class="line">(<span class="name">inc</span> <span class="number">8</span>)</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p>第二个: 迭代计算函数</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">+</span></span> <span class="number">4</span> <span class="number">5</span>)</span><br><span class="line">(<span class="name"><span class="built_in">+</span></span> <span class="number">3</span> <span class="number">6</span>)</span><br><span class="line">(<span class="name"><span class="built_in">+</span></span> <span class="number">2</span> <span class="number">7</span>)</span><br><span class="line">(<span class="name"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">8</span>)</span><br><span class="line">(<span class="name"><span class="built_in">+</span></span> <span class="number">0</span> <span class="number">9</span>)</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h2 id="1-10">1.10</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A(<span class="number">1</span>, <span class="number">10</span>) <span class="comment"># 1024</span></span><br><span class="line">A(<span class="number">2</span>, <span class="number">4</span>) <span class="comment"># 65536</span></span><br><span class="line">A(<span class="number">3</span>, <span class="number">3</span>) <span class="comment"># 65536</span></span><br></pre></td></tr></table></figure><p>$f(x)=2x$ <br>$g(x)=2^n$ <br>$h(x)=2\uparrow\uparrow n$</p><h2 id="1-11">1.11</h2><p>递归</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">a, b, c</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> * a + <span class="number">2</span> * b + c</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> calc(f(n - <span class="number">3</span>), f(n - <span class="number">2</span>), f(n - <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>迭代</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">a, b, c, count</span>):</span><br><span class="line">        <span class="keyword">if</span> (count == n):</span><br><span class="line">            <span class="keyword">return</span> c</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>(b, c, calc(a, b, c), count + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> n <span class="keyword">if</span> (n &lt; <span class="number">3</span>) <span class="keyword">else</span> <span class="built_in">iter</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="1-12">1.12</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pascal</span>(<span class="params">row, col</span>):</span><br><span class="line">    <span class="keyword">if</span> ((row == col) <span class="keyword">or</span> (col == <span class="number">0</span>)):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> pascal(row - <span class="number">1</span>, col) + pascal(row - <span class="number">1</span>, col - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="1-13">1.13</h2><p>$$<br>\begin{align}<br>&amp; \gamma = \frac{1 - \sqrt 5}{2}, \phi =\frac{1 + \sqrt 5}{2} 为方程 x^2-x-1=0两根 \\<br>&amp; 所以 \phi^2 = \phi + 1, \gamma^2 = \gamma + 1 \\<br>&amp; \phi ^n = \phi^{n-2} \times\ \phi^2 =\phi^{n-2}(\phi+1)=\phi^{n-1}+\phi^{n-2}, \gamma 同理 \\<br>&amp; f(0) = \frac{\phi^0-\gamma^0}{\sqrt5}, f(1)=\frac{\phi^1-\gamma^1}{\sqrt5} \\<br>&amp; f(n)=f(n-1)+f(n-2) 和 \gamma, \phi 的递推公式相同, f(n) = \frac{\phi^n-\gamma^n}{\sqrt 5} \\<br>&amp; \because \lvert \frac{\gamma}{\sqrt5} \rvert &lt; \frac 1 2 ; \therefore \lvert \frac{\gamma^n}{\sqrt5} \rvert &lt;\frac 12 \\<br>&amp; f(n) = \frac{\phi^n}{\sqrt5} - \frac{\gamma^n}{\sqrt5},  得证f(n) 是距离\frac{\phi^n}{\sqrt5} 最近的整数<br>\end{align}<br>$$</p><h2 id="1-14">1.14</h2><p><img src="https://cdn.staticaly.com/gh/lzlcs/image-hosting@master/QQ%E6%88%AA%E5%9B%BE20230703174405.47ncpxb1kgc0.webp" alt="img"><br>空间 $\Theta(n)$ <br>时间 <a href="https://sicp-solutions.net/post/sicp-solution-exercise-1-14/">$\Theta(n^5$)</a></p><h2 id="1-15">1.15</h2><ol><li>5次, 因为 $0.1 \times 3^5$ 才能大于 $12.15$</li><li>每次问题规模缩小三分之一, 而且为递归计算函数, 空间时间都是 $\Theta(logn)$</li></ol><h2 id="1-16">1.16</h2><p>二进制分割, $2^11 = 2^1 \times 2^2 \times 2^8$  <br><code>cur</code> 保存 2 的几次幂, 如果 <code>count</code> 是奇数就乘到答案里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fast_pow</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">res, cur, count</span>):</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">elif</span> (count % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(res, cur * cur, count / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(res * cur, cur, count - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(<span class="number">1</span>, a, b)</span><br></pre></td></tr></table></figure><h2 id="1-17">1.17</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">double</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x + x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">halve</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x / <span class="number">2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> (b % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> mul(double(a), halve(b))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> a + mul(a, b - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="1-18">1.18</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">res, cur, count</span>):</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">elif</span> (count % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(res, double(cur), halve(count))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(res + cur, cur, count - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(<span class="number">0</span>, a, b)</span><br></pre></td></tr></table></figure><h2 id="1-19">1.19</h2><p>基于矩阵乘法的矩阵快速幂求斐波那契数列</p><p>$$<br>\begin{align}<br>&amp; a \rightarrow (bp + a(p + q)) \rightarrow b(2pq+p^2) + a(p^2+q^2+2pq+p^2) \\<br>&amp; b \rightarrow bp + aq \rightarrow b(p^2+q^2) + a(2pq+q^2)<br>\end{align}<br>$$<br>所以 $p’ = p^2+q^2$, $q’= 2pq+q^2$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">a, b, p, q, count</span>):</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> b</span><br><span class="line">        <span class="keyword">elif</span> (count % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(a, b, (p * p + q * q), (<span class="number">2</span> * p * q + q * q), count / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(b * q + a * q + a * p, </span><br><span class="line">                        b * p + a * q, p, q, count - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, n)</span><br></pre></td></tr></table></figure><h2 id="1-20">1.20</h2><p>正则序展开过长, 省略: 共18次 <code>remainder</code> <br>应用序展开: 共4次 <code>remainder</code></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">GCD</span> <span class="number">206</span> <span class="number">40</span>)</span><br><span class="line">(<span class="name">GCD</span> <span class="number">40</span> <span class="number">6</span>)</span><br><span class="line">(<span class="name">GDD</span> <span class="number">6</span> <span class="number">4</span>)</span><br><span class="line">(<span class="name">GCD</span> <span class="number">4</span> <span class="number">2</span>)</span><br><span class="line">(<span class="name">GCD</span> <span class="number">2</span> <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="1-21">1.21</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">199</span></span><br><span class="line"><span class="number">1999</span></span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><h2 id="1-22">1.22</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">x = <span class="number">13</span> </span><br><span class="line">l, r = fast_pow(<span class="number">10</span>, x), fast_pow(<span class="number">10</span>, x + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">starttime = time.time() </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l, r):</span><br><span class="line">    <span class="keyword">if</span> (is_prime_simple(i)):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">endtime = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;time: &quot;</span>, (endtime - starttime))</span><br></pre></td></tr></table></figure><p>在 $10^{11} 到 10^{12}$ 寻找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100000000003</span></span><br><span class="line">time:  <span class="number">0.1265561580657959</span></span><br></pre></td></tr></table></figure><p>在 $10^{12} 到 10^{13}$ 寻找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1000000000039</span></span><br><span class="line">time:  <span class="number">0.41858363151550293</span></span><br></pre></td></tr></table></figure><p>在 $10^{13} 到 10^{14}$ 寻找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10000000000037</span></span><br><span class="line">time:  <span class="number">1.2202045917510986</span></span><br></pre></td></tr></table></figure><p>总体上符合 $\sqrt 10$的规律</p><h2 id="1-23">1.23</h2><p>改 <code>next</code> 函数之后:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> n + <span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100000000003</span></span><br><span class="line">time:  <span class="number">0.07922077178955078</span></span><br><span class="line"><span class="number">1000000000039</span></span><br><span class="line">time:  <span class="number">0.26198792457580566</span></span><br><span class="line"><span class="number">10000000000037</span></span><br><span class="line">time:  <span class="number">0.6970314979553223</span></span><br></pre></td></tr></table></figure><h2 id="1-24">1.24</h2><p>使用新的素数检测之后, 检测 100 个素数的平均时间:</p><p>$10^{100}$<br>time:  0.00022767770169961331 <br>$10^{200}$<br>time:  0.0010467009110884233 <br>$10^{300}$<br>time:  0.002386471237799134 <br>$10^{400}$<br>time:  0.005082491672400272 <br>$10^{500}$<br>time:  0.00900224724201241 <br>$10^{600}$<br>time:  0.014897625855725221 <br>$10^{700}$<br>time:  0.023792396892200817</p><p>不符合预期的结果可能因为系统内部自身调度的原因</p><h2 id="1-25">1.25</h2><p>不能, 在最后一起取模的话, 函数内部计算数值过大, 时间复杂度过高</p><h2 id="1-26">1.26</h2><p>他使用这种是树形递归, 每层节点数是上一层的二倍</p><p>一共有 $logn$ 层, 节点数 1 2 4 …, 根据等比数列求和公式可得复杂度 $\Theta(n)$</p><h2 id="1-27">1.27</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(<span class="number">1e6</span>)):</span><br><span class="line">    <span class="keyword">if</span> (is_prime_simple(x) != is_prime(x)):</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p>10万之内的 $Carmicheal$ 数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">561</span><br><span class="line">1105</span><br><span class="line">1729</span><br><span class="line">2465</span><br><span class="line">2821</span><br><span class="line">6601</span><br><span class="line">8911</span><br><span class="line">10585</span><br><span class="line">15841</span><br><span class="line">29341</span><br><span class="line">41041</span><br><span class="line">46657</span><br><span class="line">52633</span><br><span class="line">62745</span><br><span class="line">63973</span><br><span class="line">75361</span><br></pre></td></tr></table></figure><h2 id="1-28">1.28</h2><p>$Miller-Robin$ 放在正文了</p><h2 id="1-29">1.29</h2><p>$Simpson$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">simpson</span>(<span class="params">f, a, b, n</span>):</span><br><span class="line">    h = (b - a) / n</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">k</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">or</span> (x == n):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> (x % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">y</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> f(a + x * h)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">term</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> k(x) * y(x)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inc</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h * <span class="built_in">sum</span>(term, <span class="number">0.0</span>, inc, n) / <span class="number">3.0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(simpson(cube, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">100</span>))</span><br><span class="line"><span class="built_in">print</span>(simpson(cube, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">1000</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0.24999999999999992</span><br><span class="line">0.2500000000000003</span><br></pre></td></tr></table></figure><p>普通积分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0.249999875000001</span><br><span class="line">0.24999999874993412</span><br></pre></td></tr></table></figure><h2 id="1-30">1.30</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">term, a, to, b</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">count, res</span>):</span><br><span class="line">        <span class="keyword">if</span> (count &gt; b):</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(to(count), res + term(count))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(a, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="1-31">1.31</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">product</span>(<span class="params">f, a, to, b</span>):</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> f(a) * product(f, to(a), to, b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">product_new</span>(<span class="params">f, a, to, b</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">count, res</span>):</span><br><span class="line">        <span class="keyword">if</span> (count &gt; b):</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(to(count), res * f(count))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(a, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">identity</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inc</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> product(identity, <span class="number">1</span>, inc, n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pi</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pi_term</span>(<span class="params">f, g, x</span>):</span><br><span class="line">        <span class="keyword">if</span> (x % <span class="number">2</span> == f):</span><br><span class="line">            <span class="keyword">return</span> x + <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> (x % <span class="number">2</span> == g):</span><br><span class="line">            <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">upper_term</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> pi_term(<span class="number">0</span>, <span class="number">1</span>, x)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lower_term</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> pi_term(<span class="number">1</span>, <span class="number">0</span>, x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span> * product_new(upper_term, <span class="number">1</span>, inc, n) / product_new(lower_term, <span class="number">1</span>, inc, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorial(<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(get_pi(<span class="number">10000</span>))</span><br></pre></td></tr></table></figure><h2 id="1-32">1.32</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">accumulate</span>(<span class="params">opt, init, term, a, to, b</span>):</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b):</span><br><span class="line">        <span class="keyword">return</span> init</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> opt(term(a), accumulate(opt, init, term, to(a), to, b))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">accumulate_new</span>(<span class="params">opt, init, term, a, to, b</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">count, res</span>):</span><br><span class="line">        <span class="keyword">if</span> (count &gt; b):</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(to(count), opt(res, term(count)))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(init)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(accumulate(add, <span class="number">0</span>, cube, <span class="number">1</span>, inc, <span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(accumulate(mul, <span class="number">1</span>, identity, <span class="number">1</span>, inc, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><h2 id="1-33">1.33</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">filter_accumulate</span>(<span class="params">opt, init, term, filt, a, to, b</span>):</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b):</span><br><span class="line">        <span class="keyword">return</span> init</span><br><span class="line">    tmp = filter_accumulate(opt, init, term, filt, to(a), to, b)</span><br><span class="line">    <span class="keyword">if</span> (filt(a)):</span><br><span class="line">        <span class="keyword">return</span> opt(a, tmp)</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">q_a</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> filter_accumulate(add, <span class="number">0</span>, identity, miller_robin, a, inc, b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GCD</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> GCD(b, a % b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">q_b</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">filt</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> GCD(x, n) == <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> filter_accumulate(mul, <span class="number">1</span>, identity, filt, <span class="number">1</span>, inc, n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="1-34">1.34</h2><p>发生错误 <br>展开之后是 <code>(2 2)</code></p><h2 id="1-35">1.35</h2><p>$\phi$ 是方程 $x^2 - x - 1 =0$ 的根, 变形一下可得 $f(x) = 1 + \frac 1 x$ 的不动点是 $\phi$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(fixed_point(<span class="keyword">lambda</span> x: <span class="number">1</span> + <span class="number">1</span> / x, <span class="number">1.0</span>))</span><br></pre></td></tr></table></figure><h2 id="1-36">1.36</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">damp</span>():</span><br><span class="line">    <span class="built_in">print</span>(fixed_point(<span class="keyword">lambda</span> x: (log(<span class="number">1000</span>) / log(x) + x) / <span class="number">2</span>, <span class="number">2.0</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fixed_point(<span class="keyword">lambda</span> x: log(<span class="number">1000</span>) / log(x), <span class="number">2.0</span>)) ;<span class="number">34</span> 步</span><br><span class="line"><span class="built_in">print</span>(damp())                                         ;<span class="number">9</span> 步</span><br></pre></td></tr></table></figure><h2 id="1-37">1.37</h2><p>至少要 11 次才能到 $0.618$ 的精度 <br>递归</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cont_frac</span>(<span class="params">n, d, k</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">count</span>):</span><br><span class="line">        <span class="keyword">if</span> (count == k):</span><br><span class="line">            <span class="keyword">return</span> n(k) / d(k)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> n(count) / (d(count) + calc(count + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> calc(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cont_frac(<span class="keyword">lambda</span> x: <span class="number">1.0</span>, <span class="keyword">lambda</span> x: <span class="number">1.0</span>, <span class="number">11</span>))</span><br></pre></td></tr></table></figure><p>迭代</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def cont_frac(n, d, k):</span><br><span class="line">    def calc(count, res):</span><br><span class="line">        if (count == 0):</span><br><span class="line">            return res</span><br><span class="line">        else:</span><br><span class="line">            return calc(count - 1, n(count) / (d(count) + res))</span><br><span class="line">    return calc(k, 0)</span><br></pre></td></tr></table></figure><h2 id="1-38">1.38</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">2</span> + cont_frac(<span class="keyword">lambda</span> x: <span class="number">1.0</span>, </span><br><span class="line">                    <span class="keyword">lambda</span> x: <span class="number">2</span> * (x + <span class="number">1</span>) / <span class="number">3</span> <span class="keyword">if</span> (x % <span class="number">3</span> == <span class="number">2</span>) <span class="keyword">else</span> <span class="number">1.0</span>, <span class="number">100</span>))</span><br></pre></td></tr></table></figure><h2 id="1-39">1.39</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">tan_cf</span> (x, k):</span><br><span class="line">    <span class="keyword">return</span> cont_frac(<span class="keyword">lambda</span> b: x <span class="keyword">if</span> (b == <span class="number">1</span>) <span class="keyword">else</span> -x * x,</span><br><span class="line">                     <span class="keyword">lambda</span> b: <span class="number">2</span> * b - <span class="number">1</span>, k)</span><br></pre></td></tr></table></figure><h2 id="1-40">1.40</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cubic</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x * x * x + a * x * x + b * x + c</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(newton_method(cubic(<span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>), <span class="number">1.0</span>))</span><br></pre></td></tr></table></figure><h2 id="1-41">1.41</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">double</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: func(func(x))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inc</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(double(double(double(inc)))(<span class="number">5</span>)) ;<span class="number">13</span></span><br></pre></td></tr></table></figure><h2 id="1-42">1.42</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">inc</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compose</span>(<span class="params">f, g</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: f(g(x))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(compose(square, inc)(<span class="number">6</span>))</span><br></pre></td></tr></table></figure><h2 id="1-43">1.43</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compose</span>(<span class="params">f, g</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: f(g(x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">repeat</span>(<span class="params">f, n</span>):</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> compose(f, repeat(f, n - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(repeat(square, <span class="number">2</span>)(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h2 id="1-44">1.44</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">smooth</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: (f(x) + f(x - dx) + f(x + dx)) / <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">smooth_n</span>(<span class="params">f, n</span>):</span><br><span class="line">    <span class="keyword">return</span> repeat(smooth, n)(f)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(smooth(square)(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(smooth_n(square, <span class="number">10</span>)(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h2 id="1-45">1.45</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">n_root</span>(<span class="params">x, n</span>):</span><br><span class="line">    <span class="keyword">return</span> fixed_point_of_transform(<span class="keyword">lambda</span> y: x / <span class="built_in">pow</span>(y, n - <span class="number">1</span>),</span><br><span class="line">                                    repeat(average_damp, <span class="built_in">int</span>(math.log2(n))), <span class="number">1.0</span>)</span><br></pre></td></tr></table></figure><p>由实验可知, 平均的阻尼次数是 $\lfloor log_2^n \rfloor$</p><h2 id="1-46">1.46</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">interative_improve</span>(<span class="params">good_enough, improve</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">guess</span>):</span><br><span class="line">        new_guess = improve(guess)</span><br><span class="line">        <span class="keyword">if</span> (good_enough(guess, new_guess)):</span><br><span class="line">            <span class="keyword">return</span> guess</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> calc(new_guess)</span><br><span class="line">    <span class="keyword">return</span> calc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sqrt</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> interative_improve(<span class="keyword">lambda</span> a, b: <span class="built_in">abs</span>(a - b) &lt; tolerance,</span><br><span class="line">                              average_damp(<span class="keyword">lambda</span> y: x / y))(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fixed_point</span>(<span class="params">func, first_guess</span>):</span><br><span class="line">    <span class="keyword">return</span> interative_improve(<span class="keyword">lambda</span> a, b: <span class="built_in">abs</span>(a - b) &lt; tolerance,</span><br><span class="line">                              func)(first_guess)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sqrt(<span class="number">120</span>))</span><br><span class="line"><span class="built_in">print</span>(fixed_point(cos, <span class="number">1.0</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scheme </tag>
            
            <tag> Python </tag>
            
            <tag> SICP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SICP 学习笔记 (第二章)</title>
      <link href="/2023/07/02/2sicp/"/>
      <url>/2023/07/02/2sicp/</url>
      
        <content type="html"><![CDATA[<p>本书代码使用 <code>python</code> 重构</p><h1>Chapter 2: 构造数据抽象</h1><p>第一章中关注计算过程, 以及函数, 高阶函数<br>本章讨论复合数据: 对象</p><ol><li>复合数据可以减少无用的细节纷扰</li><li>复合数据可以进一步提高程序的模块性</li><li>复合数据真正提高程序设计语言的表达能力</li></ol><p>数据抽象能让我们在程序的不同部分建立起抽象屏障</p><p>关键思想:</p><ol><li><strong>闭包</strong>: 用于组合数据对象的粘合剂不但能用于组合基本的数据对象, 也可以作用于复杂的数据对象</li><li>复合数据对象能成为以 <strong>混合和匹配</strong> 的方式组合程序模块的 <strong>方便界面</strong></li></ol><h2 id="2-1-抽象数据索引">2.1 抽象数据索引</h2><p>基本思想: 构造出一些使用复合数据对象的程序, 使他们就像是在&quot;抽象数据上操作一样</p><h3 id="2-1-1-实例-有理数的算术运算">2.1.1 实例: 有理数的算术运算</h3><p>如下是构造有理数类的一个实现方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">GCD</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a <span class="keyword">if</span> b == <span class="number">0</span> <span class="keyword">else</span> GCD(b, a % b)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span>:</span><br><span class="line">    numer = <span class="number">0</span></span><br><span class="line">    denom = <span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a = <span class="number">0</span>, b = <span class="number">1</span></span>):</span><br><span class="line">        self.numer, self.denom = a, b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_out</span>(<span class="params">self, b</span>):</span><br><span class="line">        <span class="keyword">return</span> self.numer, self.denom, b.numer, b.denom</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">easier</span>(<span class="params">self, a, b</span>):</span><br><span class="line">        factor = GCD(a, b)</span><br><span class="line">        <span class="keyword">return</span> Number(a // factor, b // factor)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate</span>(<span class="params">self, other, f, g</span>):</span><br><span class="line">        n1, d1, n2, d2 = self.get_out(other)</span><br><span class="line">        new_numer = f(n1, d1, n2, d2)</span><br><span class="line">        new_denom = g(n1, d1, n2, d2)</span><br><span class="line">        <span class="keyword">return</span> self.easier(new_numer, new_denom)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.calculate(other, <span class="keyword">lambda</span> n1, d1, n2, d2: n1 * d2 + n2 * d1,</span><br><span class="line">                                     <span class="keyword">lambda</span> n1, d1, n2, d2: d1 * d2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__sub__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.calculate(other, <span class="keyword">lambda</span> n1, d1, n2, d2: n1 * d2 - n2 * d1,</span><br><span class="line">                                     <span class="keyword">lambda</span> n1, d1, n2, d2: d1 * d2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.calculate(other, <span class="keyword">lambda</span> n1, d1, n2, d2: n1 * n2,</span><br><span class="line">                                     <span class="keyword">lambda</span> n1, d1, n2, d2: d1 * d2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__truediv__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.calculate(other, <span class="keyword">lambda</span> n1, d1, n2, d2: n1 * d2,</span><br><span class="line">                                     <span class="keyword">lambda</span> n1, d1, n2, d2: n2 * d1)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.numer&#125;</span>/<span class="subst">&#123;self.denom&#125;</span>&quot;</span></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">x = Number(<span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">y = Number(<span class="number">9</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(x + y)</span><br><span class="line"><span class="built_in">print</span>(x - y)</span><br><span class="line"><span class="built_in">print</span>(x * y)</span><br><span class="line"><span class="built_in">print</span>(x / y)</span><br><span class="line"><span class="built_in">print</span>(x == y)</span><br><span class="line"><span class="built_in">print</span>(x != y)</span><br></pre></td></tr></table></figure><h3 id="2-1-2-抽象屏障">2.1.2 抽象屏障</h3><p><code>python</code> 类内的 <code>calculate</code> 等函数一般不被外接调用, 所以这类函数和外界由抽象屏障 \</p><p><strong>抽象屏障</strong> 用于隔离不同层级之间的差异，通过屏障实现对上层程式与下层程式的沟通 \</p><p>这种方法可以将数据构建的依赖限制在小范围内<br>有利于对代码进行维护和修改后，整个系统的功能保持一致性。</p><blockquote><p>例如之前的练习 2.1, 只需要改变 <code>__init__</code> 函数即可</p></blockquote><h3 id="2-1-3-数据意味着什么">2.1.3 数据意味着什么</h3><p>数据是一组适当的选择函数和构造函数, 以及使这些函数成为一套合法表示, 它们必须满足的一组特定条件</p><p>对任何对象 $x$, $y$, 如果 $z$ 是 <code>Point(x, y)</code> <br>那么 <code>x_point</code> 就是 $x$, <code>y_point</code> 就是 $y$, 可以仅使用函数来实现点对</p><p>下面是点对的一种函数式表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">point</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">match</span>(<span class="params">m</span>):</span><br><span class="line">        <span class="keyword">return</span> x <span class="keyword">if</span> m == <span class="number">0</span> <span class="keyword">else</span> y</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">match</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">x_point</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">return</span> p(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">y_point</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">return</span> p(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">z = point(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(x_point(z), y_point(z))</span><br></pre></td></tr></table></figure><h3 id="2-1-4-拓展练习-区间算数">2.1.4 拓展练习: 区间算数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Interval</span>:</span><br><span class="line">    upper, lower = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b</span>):</span><br><span class="line">        self.lower, self. upper = a, b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lbound</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.lower</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ubound</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.upper</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.lbound(), self.ubound(), other.lbound(), other.ubound()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        a, b, c, d = self.get(other)</span><br><span class="line">        <span class="keyword">return</span> Interval(a + c, b + d)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__sub__</span>(<span class="params">self, other</span>):</span><br><span class="line">        a, b, c, d = self.get(other)</span><br><span class="line">        <span class="keyword">return</span> Interval(a - d, b - c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, other</span>):</span><br><span class="line">        a, b, c, d = self.get(other)</span><br><span class="line">        lst = [a * c, a * d, b * c, b * d]</span><br><span class="line">        <span class="keyword">return</span> Interval(<span class="built_in">min</span>(lst), <span class="built_in">max</span>(lst))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__truediv__</span>(<span class="params">self, other</span>):</span><br><span class="line">        _, _, c, d = self.get(other)</span><br><span class="line">        <span class="keyword">if</span> (c &lt;= <span class="number">0</span> <span class="keyword">and</span> d &gt;= <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">raise</span> AssertionError(<span class="string">&quot;除以跨零区间&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self * Interval(<span class="number">1</span> / d, <span class="number">1</span> / c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">width</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (self.ubound() - self.lbound()) / <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;(<span class="subst">&#123;self.lower&#125;</span>, <span class="subst">&#123;self.upper&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CenterWidthInterval</span>(<span class="title class_ inherited__">Interval</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, c, w</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(c - w, c + w)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PercentInterval</span>(<span class="title class_ inherited__">Interval</span>):</span><br><span class="line">    percent = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, p</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(x * (<span class="number">1</span> - p), x * (<span class="number">1</span> + p))</span><br><span class="line">        self.percent = p</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_percent</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.percent</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">part1</span>(<span class="params">r1, r2</span>):</span><br><span class="line">    <span class="keyword">return</span> r1 * r2 / (r1 + r2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">part2</span>(<span class="params">r1, r2</span>):</span><br><span class="line">    one = Interval(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> one / (one / r1 + one / r2)</span><br><span class="line"></span><br><span class="line">a = PercentInterval(<span class="number">100</span>, <span class="number">0.5</span>)</span><br><span class="line">b = PercentInterval(<span class="number">100</span>, <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">c = PercentInterval(<span class="number">100</span>, <span class="number">0.0</span>)</span><br><span class="line"><span class="built_in">print</span>(c / c)</span><br><span class="line"><span class="built_in">print</span>(part1(a, b))</span><br><span class="line"><span class="built_in">print</span>(part2(a, b))</span><br></pre></td></tr></table></figure><h2 id="2-2-层次性数据和闭包性质">2.2 层次性数据和闭包性质</h2><p>在 <strong>盒子和指针</strong> 表示方式中, 每个对象表示为一个指向盒子的 <strong>指针</strong>, 盒子里包含着对象的表示 \</p><p><strong>闭包性质</strong>: 通过它组合起数据对象的结果本身还可以通过同样的操作再进行组合</p><h3 id="2-2-1-序列-链表-的表示">2.2.1 序列(链表)的表示</h3><p>使用 <code>python</code> 中的 <code>list</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cons</span>(<span class="params">val, lst</span>):</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">not</span> <span class="built_in">isinstance</span>(lst, <span class="type">List</span>)):</span><br><span class="line">        <span class="keyword">return</span> <span class="type">List</span>([val] + [lst])</span><br><span class="line">    <span class="keyword">return</span> <span class="type">List</span>([val] + lst.val)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_list</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="type">List</span>(*args)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args</span>):</span><br><span class="line">        self.val = <span class="built_in">list</span>(args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">car</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.val[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cdr</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="type">List</span>(*self.val[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">list_ref</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="keyword">return</span> self.val[n]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">length</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="type">List</span>(*(self.val + other.val))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">last_pair</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.val[self.length() - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="type">List</span>(*<span class="built_in">reversed</span>(self.val))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        res = <span class="string">&quot;(&quot;</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> self.val:</span><br><span class="line">            res += <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(x)</span><br><span class="line">        <span class="keyword">return</span> res + <span class="string">&#x27;)&#x27;</span></span><br></pre></td></tr></table></figure><p>使用链表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a = <span class="literal">None</span>, b = <span class="literal">None</span></span>):</span><br><span class="line">        self.x, self.y = a, b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cons</span>(<span class="params">self, a, b</span>):</span><br><span class="line">        <span class="keyword">return</span> Pair(a, b)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">car</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.x</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cdr</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.y</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_null</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.y == self.x == <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creat_list</span>(<span class="params">self, *args</span>):</span><br><span class="line">        res = <span class="literal">None</span> </span><br><span class="line">        <span class="keyword">for</span> arg <span class="keyword">in</span> <span class="built_in">reversed</span>(args):</span><br><span class="line">            res = self.cons(arg, res)</span><br><span class="line">        <span class="keyword">return</span> res <span class="keyword">if</span> res != <span class="literal">None</span> <span class="keyword">else</span> Pair()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">len</span>(<span class="params">self</span>):</span><br><span class="line">        count, tmp = <span class="number">1</span>, self.y</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isinstance</span>(tmp, Pair)):</span><br><span class="line">            tmp, count = tmp.cdr(), count + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> self.x == <span class="literal">None</span> <span class="keyword">else</span> count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">list_ref</span>(<span class="params">self, n</span>):</span><br><span class="line">        count, tmp = <span class="number">1</span>, self.y</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isinstance</span>(tmp, Pair) <span class="keyword">and</span> count &lt; n):</span><br><span class="line">            tmp, count = tmp.cdr(), count + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> <span class="built_in">isinstance</span>(tmp, Pair)):</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;n 过大&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> tmp.car()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> (self.cdr() != <span class="literal">None</span>):</span><br><span class="line">            <span class="keyword">return</span> self.cons(self.car(), self.cdr().append(other)) <span class="comment"># type: ignore</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.cons(self.car(), other)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">self, prev = <span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> (self.is_null()):</span><br><span class="line">            <span class="keyword">return</span> prev</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (self.cdr() == <span class="literal">None</span>):</span><br><span class="line">            <span class="keyword">return</span> self.cons(self.car(), prev)</span><br><span class="line">        </span><br><span class="line">        rest = self.cdr()</span><br><span class="line">        self.y = prev</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rest.reverse(self) <span class="comment"># type: ignore</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">last_pair</span>(<span class="params">self</span>):</span><br><span class="line">        tmp = self</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isinstance</span>(tmp.y, Pair) <span class="keyword">and</span> (<span class="keyword">not</span> tmp.y.is_null())):</span><br><span class="line">            tmp = tmp.y</span><br><span class="line">        <span class="keyword">return</span> Pair(tmp.car())</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_string</span>(<span class="params">self, cur</span>):</span><br><span class="line">        res = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(cur.x, Pair):</span><br><span class="line">            res = <span class="string">&#x27;(&#x27;</span> + self.to_string(cur.x) + <span class="string">&#x27;)&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> cur.x != <span class="literal">None</span>:</span><br><span class="line">            res = <span class="built_in">str</span>(cur.x)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(cur.y, Pair):</span><br><span class="line">            res += <span class="string">&#x27; &#x27;</span> + self.to_string(cur.y)</span><br><span class="line">        <span class="keyword">elif</span> cur.y != <span class="literal">None</span>:</span><br><span class="line">            res += <span class="string">&quot; . &quot;</span> + <span class="built_in">str</span>(cur.y)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span> + self.to_string(self) + <span class="string">&#x27;)&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-2-层次性结构">2.2.2 层次性结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value = <span class="literal">None</span>, children = <span class="literal">None</span></span>):</span><br><span class="line">        self.value = value</span><br><span class="line">        self.children = children <span class="keyword">or</span> []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_child</span>(<span class="params">self, child_node</span>):</span><br><span class="line">        self.children.append(child_node)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._str_recursive(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_leaf</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.children) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">count_leaves</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">cur_node</span>):</span><br><span class="line">            <span class="keyword">if</span> (cur_node.is_leaf()):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">sum</span>([<span class="built_in">iter</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> cur_node.children])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deep_reverse</span>(<span class="params">self</span>):</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">cur_node</span>):</span><br><span class="line">            <span class="keyword">if</span> (cur_node.is_leaf()):</span><br><span class="line">                <span class="keyword">return</span> TreeNode(cur_node.value)</span><br><span class="line">            new_children = []</span><br><span class="line">            <span class="keyword">for</span> child <span class="keyword">in</span> cur_node.children:</span><br><span class="line">                new_children += [<span class="built_in">iter</span>(child)]</span><br><span class="line">            <span class="keyword">return</span> TreeNode(cur_node.value, <span class="built_in">reversed</span>(new_children))</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fringe</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">cur_node</span>):</span><br><span class="line">            <span class="keyword">if</span> (cur_node.is_leaf()):</span><br><span class="line">                <span class="keyword">return</span> [cur_node.value]</span><br><span class="line">            res = []</span><br><span class="line">            <span class="keyword">for</span> child <span class="keyword">in</span> cur_node.children:</span><br><span class="line">                res += <span class="built_in">iter</span>(child)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">map</span>(<span class="params">self, proc</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">cur_node</span>):</span><br><span class="line">            res = []</span><br><span class="line">            <span class="keyword">for</span> child <span class="keyword">in</span> cur_node.children:</span><br><span class="line">                res += [<span class="built_in">iter</span>(child)]</span><br><span class="line">            <span class="keyword">return</span> TreeNode(proc(cur_node.value), res)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>(self)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">return</span> x * x</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">map</span>(square)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_str_recursive</span>(<span class="params">self, node, level = <span class="number">0</span></span>):</span><br><span class="line">        indent = <span class="string">&quot; &quot;</span> * level</span><br><span class="line">        res = <span class="string">f&quot;<span class="subst">&#123;indent&#125;</span><span class="subst">&#123;node.value&#125;</span>\n&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> node.children:</span><br><span class="line">            res += self._str_recursive(child, level + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root = TreeNode(<span class="number">1</span>)</span><br><span class="line">node_b = TreeNode(<span class="number">2</span>)</span><br><span class="line">node_c = TreeNode(<span class="number">3</span>)</span><br><span class="line">node_d = TreeNode(<span class="number">4</span>)</span><br><span class="line">node_e = TreeNode(<span class="number">5</span>)</span><br><span class="line">node_f = TreeNode(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">root.add_child(node_b)</span><br><span class="line">root.add_child(node_c)</span><br><span class="line">node_b.add_child(node_d)</span><br><span class="line">node_b.add_child(node_e)</span><br><span class="line">node_c.add_child(node_f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印树</span></span><br><span class="line"><span class="built_in">print</span>(root)</span><br><span class="line"><span class="built_in">print</span>(root.count_leaves())</span><br><span class="line"><span class="built_in">print</span>(root.deep_reverse())</span><br><span class="line"><span class="built_in">print</span>(root.fringe())</span><br><span class="line"><span class="built_in">print</span>(root.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x * x))</span><br><span class="line"><span class="built_in">print</span>(root.square())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-3-序列作为一种约定的界面">2.2.3 序列作为一种约定的界面</h3><p>工作的过程可以抽象为一下几步: 枚举器, 过滤器, 转换器, 累计器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_odd_squares</span>(<span class="params">cur</span>):</span><br><span class="line">    <span class="keyword">if</span> (cur.is_leaf()):</span><br><span class="line">        <span class="keyword">if</span> (cur.value % <span class="number">2</span> == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> cur.value * cur.value</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    res = <span class="number">0</span> </span><br><span class="line">    <span class="keyword">for</span> child <span class="keyword">in</span> cur.children:</span><br><span class="line">        res += sum_odd_squares(child)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">even_fibs</span>(<span class="params">n</span>):</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        tmp = a + b</span><br><span class="line">        a, b = b, tmp</span><br><span class="line">        <span class="keyword">if</span> (tmp % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            res.append(tmp)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>以上这两个函数都混杂了各个步骤, 不利于程序的抽象表达</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">car</span>(<span class="params">lst</span>):</span><br><span class="line">    <span class="keyword">return</span> lst[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cdr</span>(<span class="params">lst</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(lst[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cons</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> [a] + b</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter</span>(<span class="params">predicate, lst</span>):</span><br><span class="line">    <span class="keyword">return</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> lst <span class="keyword">if</span> predicate(x)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">accumulate</span>(<span class="params">op, initial, lst</span>):</span><br><span class="line">    res = initial</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">reversed</span>(lst):</span><br><span class="line">        res = op(x, res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enumerate_interval</span>(<span class="params">low, high</span>):</span><br><span class="line">    <span class="keyword">return</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(low, high + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enumerate_tree</span>(<span class="params">cur_node</span>):</span><br><span class="line">    <span class="keyword">if</span> (cur_node.is_leaf()):</span><br><span class="line">        <span class="keyword">return</span> [cur_node.value]</span><br><span class="line"></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cur_node.children:</span><br><span class="line">        res += enumerate_tree(x)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_odd_squares_new</span>(<span class="params">cur_node</span>):</span><br><span class="line">    lst = enumerate_tree(cur_node)</span><br><span class="line">    lst = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">1</span>, lst)</span><br><span class="line">    lst = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x * x, lst)</span><br><span class="line">    <span class="keyword">return</span> accumulate(add, <span class="number">0</span>, lst)</span><br><span class="line"></span><br><span class="line"><span class="meta">@cache</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(x - <span class="number">1</span>) + fib(x - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">even_fibs_new</span>(<span class="params">n</span>):</span><br><span class="line">    lst = enumerate_interval(<span class="number">0</span>, n)</span><br><span class="line">    lst = <span class="built_in">map</span>(fib, lst)</span><br><span class="line">    lst = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, lst)</span><br><span class="line">    <span class="keyword">return</span> accumulate(cons, <span class="literal">None</span>, lst)</span><br></pre></td></tr></table></figure><p>抽象出 <code>enumerate</code>, <code>map</code>, <code>filter</code>, <code>accumulate</code> 进行模块化设计</p><p>范围广大的许多操作都可以表述为序列操作</p><p><strong>嵌套映射</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_pairs</span>(<span class="params">n</span>):</span><br><span class="line">    lst = accumulate(append, [], </span><br><span class="line">                     <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> i: <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> j: [i, j], </span><br><span class="line">                                                 enumerate_interval(<span class="number">1</span>, i - <span class="number">1</span>))),</span><br><span class="line">                              enumerate_interval(<span class="number">1</span>, n))))</span><br><span class="line">    lst = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: is_prime(<span class="built_in">sum</span>(x)), lst)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: [*x, <span class="built_in">sum</span>(x)], lst))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">permutations</span>(<span class="params">lst</span>):</span><br><span class="line">    <span class="keyword">if</span> (lst == []):</span><br><span class="line">        <span class="keyword">return</span> [[]]</span><br><span class="line">    </span><br><span class="line">    tmp = permutations(lst[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> tmp:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp[<span class="number">0</span>]) + <span class="number">1</span>):</span><br><span class="line">            res += [x[:i] + [lst[<span class="number">0</span>]] + x[i:]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flatmap</span>(<span class="params">proc, seq</span>):</span><br><span class="line">    <span class="keyword">return</span> accumulate(append, [], <span class="built_in">list</span>(<span class="built_in">map</span>(proc, seq)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">item, sequence</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: <span class="keyword">not</span> (x == item), sequence)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">permutations_new</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">if</span> (s == []):</span><br><span class="line">        <span class="keyword">return</span> [[]]</span><br><span class="line">    <span class="keyword">return</span> flatmap(<span class="keyword">lambda</span> x: <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> p: [x] + p,</span><br><span class="line">                                     permutations(remove(x, s)))), s)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(permutations([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line"><span class="built_in">print</span>(permutations_new([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></table></figure><h1>练习</h1><h2 id="2-1">2.1</h2><p>更改 <code>__init__</code> 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a = <span class="number">0</span>, b = <span class="number">1</span></span>):</span><br><span class="line">    tmpa, tmpb = <span class="built_in">abs</span>(a), <span class="built_in">abs</span>(b)</span><br><span class="line">    <span class="keyword">if</span> (a * b &lt; <span class="number">0</span>):</span><br><span class="line">        tmpa = -tmpa</span><br><span class="line">    self.numer, self.denom = tmpa, tmpb</span><br></pre></td></tr></table></figure><h2 id="2-2">2.2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    x, y = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a = <span class="number">0</span>, b = <span class="number">0</span></span>):</span><br><span class="line">        self.x, self.y = a, b</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">x_point</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">y_point</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;(<span class="subst">&#123;self.x&#125;</span>, <span class="subst">&#123;self.y&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Segment</span>:</span><br><span class="line">    x, y = Point(), Point()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a = Point(<span class="params"></span>), b = Point(<span class="params"></span>)</span>):</span><br><span class="line">        self.x, self.y = a, b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_segment</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.x</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">end_segment</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.y</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mid_segment</span>(<span class="params">self</span>):</span><br><span class="line">        p1, p2 = self.start_segment(), self.end_segment()</span><br><span class="line">        a, b, c, d = p1.x_point(), p1.y_point(), p2.x_point(), p2.y_point()</span><br><span class="line">        <span class="keyword">return</span> Point((a + b) / <span class="number">2</span>, (c + d) / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">x = Segment(Point(<span class="number">1</span>, <span class="number">1</span>), Point(<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(x.mid_segment())</span><br></pre></td></tr></table></figure><h2 id="2-3">2.3</h2><p>一个是用起始结束点表示, 一个是用对角线表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>:</span><br><span class="line">    start, end = Point(), Point()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b</span>):</span><br><span class="line">        self.start, self.end = a, b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_point</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.start</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">end_point</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle_2</span>:</span><br><span class="line">    diagonal = Segment()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seg = Segment(<span class="params"></span>)</span>):</span><br><span class="line">        self.diagonal = seg</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_point</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.diagonal.start_segment()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">end_point</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.diagonal.end_segment()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">length</span>(<span class="params">rec</span>):</span><br><span class="line">    p1, p2 = rec.start_point(), rec.end_point()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(p1.x_point() - p2.x_point())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">width</span>(<span class="params">rec</span>):</span><br><span class="line">    p1, p2 = rec.start_point(), rec.end_point()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(p1.y_point() - p2.y_point())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">perimeter</span>(<span class="params">rec</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * (length(rec) + width(rec))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">rec</span>):</span><br><span class="line">    <span class="keyword">return</span> length(rec) * width(rec)</span><br><span class="line">        </span><br><span class="line">a = Rectangle(Point(<span class="number">1</span>, <span class="number">1</span>), Point(<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">b = Rectangle_2(Segment(Point(<span class="number">1</span>, <span class="number">1</span>), Point(<span class="number">2</span>, <span class="number">3</span>)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(perimeter(a))</span><br><span class="line"><span class="built_in">print</span>(area(a))</span><br><span class="line"><span class="built_in">print</span>(perimeter(b))</span><br><span class="line"><span class="built_in">print</span>(area(b))</span><br></pre></td></tr></table></figure><h2 id="2-4">2.4</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cons</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> m: m(x, y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">car</span>(<span class="params">z</span>):</span><br><span class="line">    <span class="keyword">return</span> z(<span class="keyword">lambda</span> p, q: p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cdr</span>(<span class="params">z</span>):</span><br><span class="line">    <span class="keyword">return</span> z(<span class="keyword">lambda</span> p, q: q)</span><br><span class="line"></span><br><span class="line">t = cons(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(car(t), cdr(t))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cdr(t)</span><br><span class="line">cdr(lambda m: m(1, 2))</span><br><span class="line">(lambda m: m(1, 2))(lambda p, q: q)</span><br><span class="line">(lambda p, q: q)(1, 2)</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="2-5">2.5</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cons</span>(<span class="params">x, y</span>):</span><br><span class="line">    a, b = <span class="built_in">pow</span>(<span class="number">2</span>, x), <span class="built_in">pow</span>(<span class="number">3</span>, y)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> z: z(a, b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">car</span>(<span class="params">z</span>):</span><br><span class="line">    <span class="keyword">return</span> z(<span class="keyword">lambda</span> p, q: p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cdr</span>(<span class="params">z</span>):</span><br><span class="line">    <span class="keyword">return</span> z(<span class="keyword">lambda</span> p, q: q)</span><br><span class="line"></span><br><span class="line">t = cons(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(car(t), cdr(t))</span><br></pre></td></tr></table></figure><h2 id="2-6">2.6</h2><p>丘奇计数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">zero = <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: x</span><br><span class="line">one = <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f(x)</span><br><span class="line">two = <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f(f(x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add1</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f(n(f)(x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: a(f)(b(f)(x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">church_to_int</span>(<span class="params">n</span>):</span><br><span class="line">    x, y = <span class="number">0</span>, <span class="keyword">lambda</span> x: x + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n(y)(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">int_to_church</span>(<span class="params">n</span>):</span><br><span class="line">    res = zero</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        res = add1(res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(church_to_int(add(one, two)))</span><br><span class="line"><span class="built_in">print</span>(church_to_int(int_to_church(<span class="number">10</span>)))</span><br><span class="line"><span class="built_in">print</span>(church_to_int(two))</span><br></pre></td></tr></table></figure><h2 id="2-7">2.7</h2><p>见正文 2.1.4</p><h2 id="2-8">2.8</h2><p>$$<br>\begin{align}<br>&amp; 定义两个区间, Interval(al, au), Interval(bl, bu), 其中 al &lt; au, ; bl &lt; bu \\<br>&amp; p1, p2, p3, p4 = al - bl, al - bu, au - bl, au - bu \\<br>&amp; p1 - p2 = bu - bl &gt; 0, ; p1 &gt; p2 \\<br>&amp; p3 - p2 = au + bu - al - bl &gt; 0, ; p3 &gt; p2 \\<br>&amp; p4 - p2 = au - al &gt; 0, ; p4 &gt; p2 \\<br>&amp; p2 = min(p1, p2, p3, p4) \\<br>&amp; p1 - p3 = al - au &lt; 0, ; p1 &lt; p3 \\<br>&amp; p2 - p3 = -(p3 - p2) &lt; 0, ; p2 &lt; p3 \\<br>&amp; p4 - p3 = bu - bl &lt; 0, ; p4 &lt; p3 \\<br>&amp; p3 = max(p1, p2, p3, p4) \\<br>&amp; 综上, 新的区间应是 Interval(p2, p3)<br>\end{align}<br>$$</p><h2 id="2-9">2.9</h2><p>$$<br>\begin{align}<br>&amp; 定义两个区间, Interval(al, au), Interval(bl, bu), 其中 al &lt; au, ; bl &lt; bu \\<br>&amp; 加法结果 Interval(al + bl, au + bu), 减法结果 Interval(al - bu, au - bl) \\<br>&amp; 加法宽度: \frac{(au + bu - al + bl)} 2 = \frac{(au - al)}2 + \frac{(bu - bl)} 2 \\<br>&amp; 减法宽度: \frac{(au - bl - al + bu)} 2 = \frac{(au - al)}2 + \frac{(bu - bl)} 2 \\</p><p>\end{align}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = Interval(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">b = Interval(-<span class="number">4</span>, -<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a, b, (a * b), (a / b))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.width(), b.width(), (a * b).width(), (a / b).width())</span><br></pre></td></tr></table></figure><h2 id="2-10">2.10</h2><p>见 2.1.4 <code>__truediv__</code> 函数</p><h2 id="2-11">2.11</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">x, y</span>):</span><br><span class="line">    a, b, c, d = x.get(y)</span><br><span class="line">    resa, resb = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> (a &lt;= b &lt;= <span class="number">0</span> <span class="keyword">and</span> c &lt;= d &lt;= <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> Interval(b * d, a * c)</span><br><span class="line">    <span class="keyword">elif</span> (a &lt;= b &lt;= <span class="number">0</span> <span class="keyword">and</span> d &gt;= c &gt;= <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> Interval(a * d, b * c)</span><br><span class="line">    <span class="keyword">elif</span> (b &gt;= a &gt;= <span class="number">0</span> <span class="keyword">and</span> d &gt;= c &gt;= <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> Interval(a * c, b * d)</span><br><span class="line">    <span class="keyword">elif</span> (b &gt;= a &gt;= <span class="number">0</span> <span class="keyword">and</span> c &lt;= d &lt;= <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> Interval(b * c, a * d)</span><br><span class="line">    <span class="keyword">elif</span> (b &gt;= <span class="number">0</span> &gt;= a <span class="keyword">and</span> d &gt;= c &gt;= <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> Interval(a * d, b * d)</span><br><span class="line">    <span class="keyword">elif</span> (b &gt;= <span class="number">0</span> &gt;= a <span class="keyword">and</span> c &lt;= d &lt;= <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> Interval(b * c, a * c)</span><br><span class="line">    <span class="keyword">elif</span> (b &gt;= a &gt;= <span class="number">0</span> <span class="keyword">and</span> c &lt;= <span class="number">0</span> &lt;= d):</span><br><span class="line">        <span class="keyword">return</span> Interval(b * c, b * d)</span><br><span class="line">    <span class="keyword">elif</span> (a &lt;= b &lt;= <span class="number">0</span> <span class="keyword">and</span> c &lt;= <span class="number">0</span> &lt;= d):</span><br><span class="line">        <span class="keyword">return</span> Interval(a * d, a * c)</span><br><span class="line">    <span class="keyword">elif</span> (a &lt;= <span class="number">0</span> &lt;= b <span class="keyword">and</span> c &lt;= <span class="number">0</span> &lt;= d):</span><br><span class="line">        <span class="keyword">return</span> Interval(<span class="built_in">min</span>(a * d, b * c), <span class="built_in">max</span>(a * c, b * d))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确性测试</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_interval</span>():</span><br><span class="line">    a = random.randint(<span class="number">0</span>, <span class="number">10000</span>) - <span class="number">50</span></span><br><span class="line">    b = random.randint(<span class="number">0</span>, <span class="number">10000</span>) - <span class="number">50</span></span><br><span class="line">    <span class="keyword">if</span> (a &gt; b):</span><br><span class="line">        a, b = b, a</span><br><span class="line">    <span class="keyword">return</span> Interval(a, b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">equal</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a.lbound() == b.lbound() <span class="keyword">and</span> a.ubound() == b.ubound()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line">    x, y = random_interval(), random_interval()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">not</span> equal(mul(x, y), x * y)):</span><br><span class="line">        <span class="built_in">print</span>(mul(x, y), x * y)</span><br><span class="line">        <span class="keyword">raise</span> AssertionError</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;OK &quot;</span>, _)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间测试</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">    x, y = random_interval(), random_interval()</span><br><span class="line">    z = mul(x, y)</span><br><span class="line"></span><br><span class="line">end_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;time: &quot;</span>, end_time - start_time)</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">    x, y = random_interval(), random_interval()</span><br><span class="line">    z = x * y</span><br><span class="line"></span><br><span class="line">end_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;time: &quot;</span>, end_time - start_time)</span><br><span class="line"></span><br><span class="line"><span class="comment"># time:  2.0358922481536865</span></span><br><span class="line"><span class="comment"># time:  2.1305015087127686</span></span><br></pre></td></tr></table></figure><p>经过时间测试, 新的分类乘法函数比之前的函数快了一丁点</p><h2 id="2-12">2.12</h2><p>见 2.1.4 <code>PercentInterval</code> 类</p><h2 id="2-13">2.13</h2><p>令 $a, b = PercentInterval(x_1, p_1), PercentInterval(x_2, p_2)$ <br>两者相乘, $c = Interval(x_1 x_2(1-p_1)(1-p_2), (x_1 x_2(1+p_1)(1+p_2))$ <br>又因为 $p_1p_2$ 非常小, 所以 $c$ 可以近似为 $Interval(x_1x_2(1-p_1-p_2), x_1x_2(1+p_1+p_2))$ <br>所以可转换为 $c = PercentInterval(x_1x_2, p_1+p_2)$</p><h2 id="2-14">2.14</h2><p>浮点数误差导致误差甚至完全错误的结果</p><h2 id="2-15">2.15</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = PercentInterval(<span class="number">100</span>, <span class="number">0.5</span>)</span><br><span class="line">b = PercentInterval(<span class="number">100</span>, <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(part1(a, b))</span><br><span class="line"><span class="built_in">print</span>(part2(a, b))</span><br><span class="line"></span><br><span class="line"><span class="comment"># (8.333333333333334, 225.0)</span></span><br><span class="line"><span class="comment"># (25.0, 75.0)</span></span><br></pre></td></tr></table></figure><p>看似 <code>part2</code> 计算的结果更加准确</p><p><code>Eva</code> 的说法正确</p><h2 id="2-16">2.16</h2><p>这是区间的运算, 两种表达式并不等价</p><p>设计: …?</p><h2 id="2-17">2.17</h2><p>见正文</p><h2 id="2-18">2.18</h2><p>见正文</p><h2 id="2-19">2.19</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">car</span>(<span class="params">lst</span>):</span><br><span class="line">    <span class="keyword">return</span> lst[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cdr</span>(<span class="params">lst</span>):</span><br><span class="line">    <span class="keyword">return</span> lst[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">no_more</span>(<span class="params">coin_values</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(coin_values) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">first_denomination</span>(<span class="params">coin_values</span>):</span><br><span class="line">    <span class="keyword">return</span> car(coin_values)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">except_first_denomination</span>(<span class="params">coin_values</span>):</span><br><span class="line">    <span class="keyword">return</span> cdr(coin_values)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cc</span>(<span class="params">amount, coin_values</span>):</span><br><span class="line">    <span class="keyword">if</span> (amount == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (amount &lt; <span class="number">0</span> <span class="keyword">or</span> no_more(coin_values)):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    value = first_denomination(coin_values)</span><br><span class="line">    a = cc(amount, except_first_denomination(coin_values))</span><br><span class="line">    b = cc(amount - value, coin_values)</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">us_coins = [<span class="number">50</span>, <span class="number">25</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line">uk_coins = [<span class="number">100</span>, <span class="number">50</span>, <span class="number">25</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0.5</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cc(<span class="number">100</span>, uk_coins))</span><br></pre></td></tr></table></figure><p>不会, 因为组合方式是一定的</p><h2 id="2-20">2.20</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">same_parity</span>(<span class="params">*args</span>):</span><br><span class="line">    tmp, res = args[<span class="number">0</span>] % <span class="number">2</span>, []</span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">        <span class="keyword">if</span> (arg % <span class="number">2</span> == tmp):</span><br><span class="line">            res.append(arg)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(same_parity(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>))</span><br><span class="line"><span class="built_in">print</span>(same_parity(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>))</span><br></pre></td></tr></table></figure><h2 id="2-21">2.21</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square_list_items_1</span>(<span class="params">lst</span>):</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">        res.append(x * x)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">map</span>(<span class="params">lst, proc</span>):</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">        res.append(proc(x))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square_list_items_2</span>(<span class="params"><span class="built_in">list</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">map</span>(<span class="built_in">list</span>, <span class="keyword">lambda</span> x: x * x)</span><br><span class="line"></span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(square_list_items_1(lst))</span><br><span class="line"><span class="built_in">print</span>(square_list_items_2(lst))</span><br></pre></td></tr></table></figure><h2 id="2-22">2.22</h2><p>第一个程序是每次把结果放在开头<br>第二个程序是把一个 <code>list</code> <code>cons</code> 在一个 <code>atom</code> 上</p><h2 id="2-23">2.23</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">for_each</span>(<span class="params">lst, proc</span>):</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(lst) == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    proc(lst[<span class="number">0</span>])</span><br><span class="line">    for_each(lst[<span class="number">1</span>:], proc)</span><br></pre></td></tr></table></figure><h2 id="2-24">2.24</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">1</span> (<span class="name">2</span> (<span class="name">3</span> <span class="number">4</span>)))</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> </span><br><span class="line">  <span class="number">2</span></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">    <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="2-25">2.25</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">3</span>, [<span class="number">5</span>, <span class="number">7</span>], <span class="number">9</span>]</span><br><span class="line">y = [[<span class="number">7</span>]]</span><br><span class="line">z = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, [<span class="number">5</span>, [<span class="number">6</span>, <span class="number">7</span>]]]]]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">car</span>(<span class="params">lst</span>):</span><br><span class="line">    <span class="keyword">return</span> lst[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cdr</span>(<span class="params">lst</span>):</span><br><span class="line">    <span class="keyword">return</span> lst[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(car(cdr(car(cdr(cdr(x))))))</span><br><span class="line"><span class="built_in">print</span>(car(car(y)))</span><br><span class="line"><span class="built_in">print</span>(car(cdr(car(cdr(car(cdr(car(cdr((car(cdr((car(cdr(z)))))))))))))))</span><br></pre></td></tr></table></figure><h2 id="2-26">2.26</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>)</span><br><span class="line">((<span class="name">1</span> <span class="number">2</span> <span class="number">3</span>) <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>)</span><br><span class="line">((<span class="name">1</span> <span class="number">2</span> <span class="number">3</span>) (<span class="name">4</span> <span class="number">5</span> <span class="number">6</span>))</span><br></pre></td></tr></table></figure><h2 id="2-27">2.27</h2><p>见正文</p><h2 id="2-28">2.28</h2><p>见正文</p><h2 id="2-29">2.29</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mobile</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, l = <span class="literal">None</span>, r = <span class="literal">None</span></span>):</span><br><span class="line">        self.left, self.right = l, r</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">left_branch</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.left</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">right_branch</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">total_weight</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">cur_node</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(cur_node, Mobile):</span><br><span class="line">                a = <span class="built_in">iter</span>(cur_node.left_branch().branch_structure()) <span class="comment"># type: ignore</span></span><br><span class="line">                b = <span class="built_in">iter</span>(cur_node.right_branch().branch_structure()) <span class="comment"># type: ignore</span></span><br><span class="line">                <span class="keyword">return</span> a + b</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> cur_node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_balance</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">cur_node</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(cur_node, Mobile):</span><br><span class="line">                lb = cur_node.left_branch()</span><br><span class="line">                rb = cur_node.right_branch()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">assert</span>(lb != <span class="literal">None</span> <span class="keyword">and</span> rb != <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">                ls = lb.branch_structure()</span><br><span class="line">                rs = rb.branch_structure()</span><br><span class="line"></span><br><span class="line">                lw = ls <span class="keyword">if</span> <span class="built_in">type</span>(ls) == <span class="built_in">int</span> <span class="keyword">else</span> ls.total_weight()</span><br><span class="line">                rw = rs <span class="keyword">if</span> <span class="built_in">type</span>(rs) == <span class="built_in">int</span> <span class="keyword">else</span> rs.total_weight()</span><br><span class="line"></span><br><span class="line">                ll, rl = lb.branch_length(), rb.branch_length()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (lw * ll != rw * rl):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">                <span class="keyword">return</span> check(ls) <span class="keyword">and</span> check(rs)</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> check(self)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Branch</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, l, s</span>):</span><br><span class="line">        self.length, self.structure = l, s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">branch_length</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">branch_structure</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.structure</span><br><span class="line"></span><br><span class="line">lb = Branch(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">rb = Branch(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">m = Mobile(lb, rb)</span><br><span class="line"></span><br><span class="line">lb2 = Branch(<span class="number">2</span>, m)</span><br><span class="line">rb2 = Branch(<span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line">m2 = Mobile(lb2, rb2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(m2.total_weight())</span><br><span class="line"><span class="built_in">print</span>(m2.is_balance())</span><br></pre></td></tr></table></figure><p>只需要对选择函数做修改即可</p><h2 id="2-30">2.30</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> x * x</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">cur_node</span>):</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> cur_node.children:</span><br><span class="line">            res += [<span class="built_in">iter</span>(child)]</span><br><span class="line">        <span class="keyword">return</span> TreeNode(square(cur_node.value), res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(self)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(root.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x * x))</span><br><span class="line"><span class="built_in">print</span>(root.square())</span><br></pre></td></tr></table></figure><h2 id="2-31">2.31</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square_tree</span>(<span class="params">cur_node</span>):</span><br><span class="line">    <span class="keyword">return</span> cur_node.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x * x)</span><br></pre></td></tr></table></figure><h2 id="2-32">2.32</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">subsets</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">if</span> (s == []):</span><br><span class="line">        <span class="keyword">return</span> [[]]</span><br><span class="line">    rest = subsets(s[<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">return</span> rest + <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: [s[<span class="number">0</span>]] + x, rest))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先拿出第一个元素, 找出后面所有元素形成的子集 <br>然后把每个子集前面加上这第一个元素, 在算上原来的子集, 就是新子集</p><h2 id="2-33">2.33</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">map_new</span>(<span class="params">p, seq</span>):</span><br><span class="line">    <span class="keyword">return</span> accumulate(<span class="keyword">lambda</span> x, y: cons(p(x), y), [], seq)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">lst1, lst2</span>):</span><br><span class="line">    <span class="keyword">return</span> accumulate(cons, lst2, lst1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">length</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="keyword">return</span> accumulate(<span class="keyword">lambda</span> x, y: y + <span class="number">1</span>, <span class="number">0</span>, seq)</span><br></pre></td></tr></table></figure><p>def horner_eval(x, coefficient_sequence):<br>return accumulate(lambda this_coeff, higher_terms: this_coeff + higher_terms * x,<br>0, coefficient_sequence)</p><h2 id="2-34">2.34</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">horner_eval</span>(<span class="params">x, coefficient_sequence</span>):</span><br><span class="line">    <span class="keyword">return</span> accumulate(<span class="keyword">lambda</span> this_coeff, higher_terms: this_coeff + higher_terms * x, </span><br><span class="line">                      <span class="number">0</span>, coefficient_sequence)</span><br></pre></td></tr></table></figure><h2 id="2-35">2.35</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_leaves_new</span>(<span class="params">cur_node</span>):</span><br><span class="line">    <span class="keyword">return</span> accumulate(<span class="keyword">lambda</span> x, y: y + <span class="number">1</span>, <span class="number">0</span>, </span><br><span class="line">                      <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x, enumerate_tree(cur_node))))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-36">2.36</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">accumulate_n</span>(<span class="params">op, init, seqs</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">firsts</span>(<span class="params">seqs</span>):</span><br><span class="line">        <span class="keyword">return</span> [car(x) <span class="keyword">for</span> x <span class="keyword">in</span> seqs]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rests</span>(<span class="params">seqs</span>):</span><br><span class="line">        <span class="keyword">return</span> [cdr(x) <span class="keyword">for</span> x <span class="keyword">in</span> seqs]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(car(seqs)) == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">return</span> cons(accumulate(op, init, firsts(seqs)),</span><br><span class="line">                accumulate_n(op, init, rests(seqs)))</span><br></pre></td></tr></table></figure><h2 id="2-37">2.37</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix_vector</span>(<span class="params">m, v</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> mi: accumulate(add, <span class="number">0</span>, accumulate_n(mul, <span class="number">1</span>, [mi, v])), m))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transpose</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">return</span> accumulate_n(cons, [], m)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix_matrix</span>(<span class="params">m, n</span>):</span><br><span class="line">    cols = transpose(n)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> mi: matrix_vector(cols, mi), m))</span><br></pre></td></tr></table></figure><h2 id="2-38">2.38</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ford_left</span>(<span class="params">op, initial, lst</span>):</span><br><span class="line">    res = initial</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">        res = op(res, x)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">div</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a / b</span><br><span class="line"><span class="built_in">print</span>(accumulate(div, <span class="number">1</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line"><span class="built_in">print</span>(ford_left(div, <span class="number">1</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_list</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(args)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(accumulate(my_list, [], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line"><span class="built_in">print</span>(ford_left(my_list, [], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></table></figure><h2 id="2-39">2.39</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="keyword">return</span> accumulate(<span class="keyword">lambda</span> x, y: y + [x], [], seq)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_new</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="keyword">return</span> ford_left(<span class="keyword">lambda</span> x, y: [y] + x, [], seq)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(reverse([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line"><span class="built_in">print</span>(reverse_new([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></table></figure><h2 id="2-40">2.40</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">unique_pairs</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> flatmap(<span class="keyword">lambda</span> x: <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> y: [x, y], </span><br><span class="line">                                      enumerate_interval(<span class="number">1</span>, x - <span class="number">1</span>))),</span><br><span class="line">                   enumerate_interval(<span class="number">1</span>, n))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prime_sum_pairs</span>(<span class="params">n</span>):</span><br><span class="line">    tmp = unique_pairs(n)</span><br><span class="line">    tmp = <span class="built_in">filter</span>(<span class="keyword">lambda</span> pair: is_prime(<span class="built_in">sum</span>(pair)), tmp)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> pair: [*pair, <span class="built_in">sum</span>(pair)], tmp))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(prime_sum_pairs(<span class="number">6</span>))</span><br></pre></td></tr></table></figure><h2 id="2-41">2.41</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">unique_triple</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> flatmap(<span class="keyword">lambda</span> x: <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> y: [x] + y,</span><br><span class="line">                                     unique_pairs(x - <span class="number">1</span>))),</span><br><span class="line">                   enumerate_interval(<span class="number">1</span>, n))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question_2_41</span>(<span class="params">n, s</span>):</span><br><span class="line">    tmp = unique_triple(n)</span><br><span class="line">    tmp = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: <span class="built_in">sum</span>(x) == s, tmp)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(tmp)</span><br></pre></td></tr></table></figure><h2 id="2-42">2.42</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">queens</span>(<span class="params">board_size</span>):</span><br><span class="line"></span><br><span class="line">    empty_board = [[]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_safe</span>(<span class="params">k, positions</span>):</span><br><span class="line">        cur = positions[k - <span class="number">1</span>]</span><br><span class="line">        rest = positions[:k - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> (rest.count(cur) != <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, k - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> (k - i - <span class="number">1</span> == <span class="built_in">abs</span>(positions[i] - cur)):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">adjoin_position</span>(<span class="params">new_row, k, rest_of_queens</span>):</span><br><span class="line">        <span class="keyword">return</span> rest_of_queens + [new_row]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">queen_cols</span>(<span class="params">k</span>):</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> empty_board</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">filter</span>(<span class="keyword">lambda</span> positions: is_safe(k, positions),</span><br><span class="line">                      flatmap(<span class="keyword">lambda</span> rest_of_queens: </span><br><span class="line">                                <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> new_row: </span><br><span class="line">                                           adjoin_position(new_row, k, rest_of_queens),</span><br><span class="line">                                         enumerate_interval(<span class="number">1</span>, board_size))),</span><br><span class="line">                              queen_cols(k - <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> queen_cols(board_size)</span><br></pre></td></tr></table></figure><p>不抽象版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">new_queen</span>(<span class="params">n, cur, state</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_safe</span>(<span class="params">k, positions</span>):</span><br><span class="line">        cur = positions[k]</span><br><span class="line">        rest = positions[:k]</span><br><span class="line">        <span class="keyword">if</span> (rest.count(cur) != <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, k):</span><br><span class="line">            <span class="keyword">if</span> (k - i == <span class="built_in">abs</span>(positions[i] - cur)):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n == cur):</span><br><span class="line">        <span class="keyword">return</span> [state]</span><br><span class="line"></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> (is_safe(cur, state + [row])):</span><br><span class="line">            res += new_queen(n, cur + <span class="number">1</span>, state + [row])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="2-43">2.43</h2><p>原来是枚举 <code>queen_cols(k - 1)</code> 次 <code>enumerate_interval</code> <br>现在是枚举 <code>enumerate_interval</code> 次 <code>queen_cols(k - 1)</code></p><p>看似没有区别, 实际上原来往下递归之后结果就保存住了 <br>改代码之后往下递归被重复执行了 <code>board_size</code> 次 <br>所以大概时间是 $T * board_size$ 次</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scheme </tag>
            
            <tag> Python </tag>
            
            <tag> SICP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scheme 学习笔记</title>
      <link href="/2023/07/01/scheme/"/>
      <url>/2023/07/01/scheme/</url>
      
        <content type="html"><![CDATA[<h1>前期准备</h1><ol><li>安装 <code>MIT scheme</code>: <code>sudo apt-get install mit-scheme</code></li><li>在命令行输入 <code>scheme</code> 进入 <code>scheme</code> 解释器</li></ol><h1>基本表达式</h1><p><code>scheme</code> 中一对括号代表一次计算的步骤, 括号中的计算式采用前缀表达式 <br>形如这些由括号, 标记, 分隔符组成的式子, 被称为 <code>S-表达式</code></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">2</span>) <span class="comment">;3</span></span><br><span class="line">(<span class="name"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span>) <span class="comment">;7</span></span><br></pre></td></tr></table></figure><p>当然括号可以嵌套</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">*</span></span> (<span class="name"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">3</span>) (<span class="name"><span class="built_in">-</span></span> <span class="number">3</span> <span class="number">1</span>)) <span class="comment">;8</span></span><br></pre></td></tr></table></figure><p>像 <code>+</code>, <code>1</code>, <code>2</code> 这些基本表达式被称为原子(<code>atom</code>)<br>每个表达式用空格, 制表符或换行符来分割</p><h2 id="四则运算">四则运算</h2><ol><li><code>+</code>, <code>-</code>, <code>*</code></li><li><code>/</code> 注意<code>scheme</code>会处理分数, 比如 <figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">/</span></span> <span class="number">3</span> <span class="number">4</span>) <span class="comment">;3/4</span></span><br><span class="line">(<span class="name"><span class="built_in">/</span></span> <span class="number">29</span> <span class="number">3</span> <span class="number">7</span>) <span class="comment">;29/21</span></span><br></pre></td></tr></table></figure>函数 <code>exact-&gt;inexact</code> 用于把分数转换为小数</li></ol><h2 id="其他运算">其他运算</h2><ol><li><code>quotient</code> 整除, <code>modulo</code> 取模, <code>sqrt</code> 求平方根</li><li><code>sin</code>, <code>cos</code>, <code>tan</code>, <code>asin</code>, <code>acos</code>, <code>atan</code></li><li><code>(exp a b)</code> 求指数, <code>(log x)</code> 求以 <code>e</code> 为底的对数</li></ol><h1>生成表 (<code>list</code>)</h1><h2 id="Cons-单元">Cons 单元</h2><p>表的元素称为 <code>Cons单元</code>,是一个存放了两个地址的内存空间</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">cons</span></span> <span class="number">1</span> <span class="number">2</span>) <span class="comment">;(1 . 2)</span></span><br><span class="line">(<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">cons</span></span> <span class="number">1</span> <span class="number">3</span>) (<span class="name"><span class="built_in">cons</span></span> <span class="number">2</span> <span class="number">3</span>)) <span class="comment">;((1 . 3) 2 . 3)</span></span><br></pre></td></tr></table></figure><p><code>cons</code> 分配了两个地址空间, 一个指向 1, 一个指向 2 , <code>cons</code> 也是 <code>construction</code> 的简称 <br>指向 1 的部分被称作 <code>car</code> -&gt; <code>Contents of the Address part of the Register</code> <br>指向 2 的部分被称作 <code>cdr</code> -&gt; <code>Contents of the Department part of the Register</code></p><h2 id="表">表</h2><p>表是一个由 <code>Cons单元</code> 串起来的类似链表的结构, 末尾为空列表 <code>'()</code></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">cons</span></span> <span class="number">2</span> (<span class="name"><span class="built_in">cons</span></span> <span class="number">3</span> (<span class="name"><span class="built_in">cons</span></span> <span class="number">4</span> &#x27;()))) <span class="comment">;(2 3 4)</span></span><br><span class="line">(<span class="name">cosn</span> x y) <span class="comment">;如果 y 是个表, 那么就把 x 插到表头</span></span><br></pre></td></tr></table></figure><h2 id="原子">原子</h2><p>不使用 <code>cons</code> 来构建的元素都为原子 (<code>atom</code>)<br>如 数字, 字符, 字符串, 空表</p><h2 id="引用">引用</h2><p><code>quote</code> 阻止表达式被求值, 可以简写成 <code>'</code></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">quote</span></span> (<span class="name"><span class="built_in">+</span></span> <span class="number">3</span> <span class="number">5</span>)) <span class="comment">;(+ 3 5)</span></span><br><span class="line">&#x27;(+ <span class="number">3</span> <span class="number">5</span>) <span class="comment">;(+ 3 5)</span></span><br></pre></td></tr></table></figure><h2 id="特殊形式">特殊形式</h2><p>除了 <code>quote</code>, <code>define</code>, <code>lambda</code>, <code>if</code>, <code>set!</code> 等都是特殊形式</p><h2 id="car-和-cdr"><code>car</code> 和 <code>cdr</code></h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 这里使用引用就是不让表达式 (2 3 4) 被求值, 也无法求值</span></span><br><span class="line">(<span class="name"><span class="built_in">car</span></span> &#x27;(<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>)) <span class="comment">;2</span></span><br><span class="line">(<span class="name"><span class="built_in">cdr</span></span> &#x27;(<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>)) <span class="comment">;(3 4)</span></span><br></pre></td></tr></table></figure><h2 id="list"><code>list</code></h2><p><code>list</code> 函数可以有多个参数, 构建任意长度的表</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">list</span></span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> &#x27;(<span class="number">3</span> <span class="number">4</span>) &#x27;((<span class="number">3</span> <span class="number">4</span> <span class="number">5</span>) (<span class="number">4</span>))) <span class="comment">;(2 3 4 (3 4) ((3 4 5) (4)))</span></span><br></pre></td></tr></table></figure><h1>定义函数</h1><ol><li>定义变量(没有参数的函数) <figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> x <span class="number">5</span>) </span><br></pre></td></tr></table></figure></li><li>定义函数的两种方法<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> func </span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (arguments)</span><br><span class="line">    (<span class="name"><span class="built_in">+</span></span> arguments <span class="number">5</span>)))</span><br><span class="line"><span class="comment">;; 以下是短形式</span></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">func</span> arguments)</span><br><span class="line">  (<span class="name"><span class="built_in">+</span></span> arguments <span class="number">5</span>))</span><br></pre></td></tr></table></figure></li></ol><p>使用 <code>(load [filename])</code> 载入文件从而测试函数</p><h1>条件分支</h1><ol><li><p><code>if</code> 表达式: <code>(if condition process1 process2)</code> <br>如果 <code>condition</code> 为真, 则执行 <code>process1</code>, 否则 <code>process2</code>, 这两个都是 <code>S-表达式</code></p></li><li><p><code>and</code> 和 <code>or</code> 接受多个参数, 有短路特性</p></li><li><p><code>cond</code> 表达式: 字面意思, 很好懂</p> <figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">cond</span></span> </span><br><span class="line">  (<span class="name">condition1</span> process1)</span><br><span class="line">  (<span class="name">condition2</span> process2)</span><br><span class="line">  ....</span><br><span class="line">  (<span class="name"><span class="built_in">else</span></span> process_else))</span><br></pre></td></tr></table></figure></li></ol><p>其他做出判断的函数</p><ol><li>函数 <code>null?</code> 表示表是否为空</li><li><code>eq?</code> 比较两个参数的地址, <code>eqv?</code> 比较两个参数的值(不能为表或字符串) <br><code>equal?</code> 比较值(适用于字符串和表)</li><li><code>pair?</code>, <code>list?</code> 顾名思义, 注意空表是 <code>list</code> 不是 <code>pair</code></li><li><code>=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code> 接受任意数量的数字参数</li><li><code>char=?</code>, <code>char&lt;?</code>, <code>char&gt;?</code>, <code>char&lt;=</code>, <code>char&gt;=</code></li><li><code>string=?</code>, <code>string-ci=?</code></li></ol><h1>局部变量</h1><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">let</span></span> ((<span class="name">name1</span> value1)</span><br><span class="line">      (<span class="name">name2</span> value2)</span><br><span class="line">      ....</span><br><span class="line">      (<span class="name">namen</span> valuen))</span><br><span class="line">  (<span class="name">body</span>))</span><br></pre></td></tr></table></figure><p><code>letrec</code> 替代 <code>let</code> 之后可以允许变量递归调用自己</p><p>注意这些局部变量只能在 <code>body</code> 中使用</p><h2 id="递归和尾递归">递归和尾递归</h2><p>普通的线性递归转换为尾递归的方法就是把结果传到参数里, 这样可以直接返回, 避免空间占用</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fact</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">1</span>) </span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    (<span class="name"><span class="built_in">*</span></span> n fact (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>))))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fact</span> n res)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">1</span>) </span><br><span class="line">    res</span><br><span class="line">    (<span class="name">fact</span> (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>) (<span class="name"><span class="built_in">*</span></span> n res))))</span><br></pre></td></tr></table></figure><h1>高阶函数</h1><p>类似 <code>python</code>, 略</p><h1>副作用</h1><p><code>begin</code> 表达式后可跟多个参数, 依次执行这些参数之后返回最后一个参数结果</p><h1>宏</h1><h2 id="Common-Lisp-式">Common Lisp 式</h2><p>编写代码的代码, 在CS61A的 Project4 中实现的是这种形式</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">`() 括号里的东西都被引用</span><br><span class="line">,x 解除x的引用</span><br><span class="line">,@x 把作为列表的x展开</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scheme </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NewComputerConfig</title>
      <link href="/2023/06/04/NewComputerConfig/"/>
      <url>/2023/06/04/NewComputerConfig/</url>
      
        <content type="html"><![CDATA[<h1>验机</h1><p>检测屏幕, 硬盘, 配置单, 注意不要联网<br>联网激活Office, 安全下车</p><h1>卸载及安装</h1><ul><li><p>卸载内置联想套系, 除了 <code>Legion Zone</code>, 这是调节电脑性能的工具</p></li><li><p>安装 QQ, Wechat 分在 <code>D://Software/ChatTools</code> 中</p><ul><li>更改 QQ, Wechat 默认文件下载位置为 <code>D://Files/QQFiles</code> 和 <code>D://Files/WechatFiles</code></li></ul></li><li><p>安装网易云, 更改默认缓存目录 <code>D://Files/CloudMusicCache</code></p></li><li><p>安装 Steam, <code>D://Games/Steam</code></p></li><li><p>安装 Bandzip, <code>D://Software/CompressionTools</code></p></li><li><p>安装 Clash, <code>D://Software/Clash</code>, 然后改代理</p><ul><li>开启 Allow Lan, 开启 IPV6, 开启 Start with Windows, 开启 System Proxy</li><li>打开 UWP Loopback 全选后保存</li></ul></li><li><p>根据当前硬件安装各种驱动在 <code>D://Drivers</code> 中</p></li></ul><h1>安装 WSL</h1><p>管理员模式打开 cmd</p><p><code>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</code><br><code>dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</code><br><code>Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform -NoRestart</code><br>重启<br>在 Microsoft Store 中安装 Ubuntu, 打开后设置用户名和密码</p><p><code>wsl -l -v</code> 确认安装 Ubuntu 版本及 WSL 版本</p><h2 id="Windows-Terminal-配置">Windows Terminal 配置</h2><p>启动:</p><ol><li>默认配置文件 Ubuntu 22.04.2 LTS</li><li>默认终端应用程序: Windows 终端</li></ol><p>进入 Ubuntu 子页面中的外观<br><a href="https://link.zhihu.com/?target=https%3A//www.nerdfonts.com/font-downloads">下载</a> NerdFonts, 并在 Ubuntu 中选择该字体<br><a href="https://link.zhihu.com/?target=https%3A//www.nerdfonts.com/cheat-sheet">检测</a> 字体是否安装成功</p><h2 id="Ubuntu-配置">Ubuntu 配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf .config/</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:lzlcs/.config.git .config</span><br><span class="line">sudo apt update &amp;&amp; sudo apt upgrade -y</span><br></pre></td></tr></table></figure><h3 id="配置代理">配置代理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> hostip=$(<span class="built_in">cat</span> /etc/resolv.conf |grep -oP <span class="string">&#x27;(?&lt;=nameserver\ ).*&#x27;</span>)</span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&quot;http://<span class="variable">$&#123;hostip&#125;</span>:7890&quot;</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;http://<span class="variable">$&#123;hostip&#125;</span>:7890&quot;</span></span><br><span class="line"><span class="built_in">export</span> all_proxy=<span class="string">&quot;socks5://<span class="variable">$&#123;hostip&#125;</span>:7890&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Git-配置">Git 配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name lzl</span><br><span class="line">git config --global user.email 3012386836@qq.com</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;3012386836@qq.com&quot;</span></span><br></pre></td></tr></table></figure><p>复制 <code>~/.ssh/id_rsa.pub</code> 中内容, 到 github 上添加 ssh 密钥</p><h3 id="安装-Hexo">安装 Hexo</h3><ul><li>安装 nvm: <code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash</code>, 重启终端</li><li>安装 node, npm: <code>nvm install node</code></li><li>安装 hexo: <code>npm install -g hexo-cli</code><br>*  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b <span class="built_in">source</span> git@github.com:lzlcs/lzlcs.github.io.git</span><br><span class="line"><span class="built_in">mv</span> lzlcs.github.io Blog</span><br><span class="line"><span class="built_in">cd</span> Blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li></ul><h3 id="安装-nvim-lvim">安装 nvim lvim</h3><p>下载 nvim 安装包，解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;~/Apps/nvim/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>安装 pip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-is-python3 -y</span><br><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">python get-pip.py</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;~/.local/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="built_in">rm</span> get-pip.py</span><br></pre></td></tr></table></figure><p>安装 cargo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install cargo -y</span><br></pre></td></tr></table></figure><p>安装 lazygit</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Apps/</span><br><span class="line">LAZYGIT_VERSION=$(curl -s <span class="string">&quot;https://api.github.com/repos/jesseduffield/lazygit/releases/latest&quot;</span> | grep -Po <span class="string">&#x27;&quot;tag_name&quot;: &quot;v\K[^&quot;]*&#x27;</span>)</span><br><span class="line">curl -Lo lazygit.tar.gz <span class="string">&quot;https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_<span class="variable">$&#123;LAZYGIT_VERSION&#125;</span>_Linux_x86_64.tar.gz&quot;</span></span><br><span class="line">tar xf lazygit.tar.gz lazygit</span><br><span class="line">sudo install lazygit /usr/local/bin</span><br><span class="line"><span class="built_in">rm</span> lazygit.tar.gz</span><br></pre></td></tr></table></figure><p>安装 lvim</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LV_BRANCH=<span class="string">&#x27;release-1.3/neovim-0.9&#x27;</span> bash &lt;(curl -s https://raw.githubusercontent.com/LunarVim/LunarVim/release-1.3/neovim-0.9/utils/installer/install.sh)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;~/.cargo/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="Clone-各种项目">Clone 各种项目</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>编程入门:CS61A (Fall2022)</title>
      <link href="/2023/05/08/CS61A/"/>
      <url>/2023/05/08/CS61A/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/lzlcs/Courses">Lab 和 hw 的 Github 地址</a></p><h1>完成 lab 的基础</h1><h3 id="安装">安装</h3><ul><li>安装: WSL2 &amp; WindowsTerminal</li><li>安装 <code>pyhton3</code>: <code>sudo apt install python3</code></li><li>安装编辑器: <code>neovim</code></li></ul><h3 id="使用终端">使用终端</h3><ul><li><code>~</code> 表示 <code>home</code> 目录</li><li><code>echo $HOME$</code> 显示 <code>home</code> 目录的路径</li><li><code>pwd</code> 显示当前目录路径</li></ul><blockquote><p>注意分辨你在终端中还是 <code>python</code> 解释器中</p></blockquote><h3 id="组织文件">组织文件</h3><ul><li><code>ls</code> 列出当前目录下所有文件</li><li><code>cd directoryname</code> 进入子目录<ul><li><code>cd ..</code> 进入父目录</li></ul></li><li><code>mkdir directoryname</code> 创建一个文件夹</li><li><code>unzip lab00.zip</code> 解压文件</li><li><code>mv PATH1 PATH2</code> 移动文件</li></ul><h3 id="Python-基础"><code>Python</code> 基础</h3><ul><li><code>python3</code> 进入 <code>python</code> 解释器</li><li>算数表达式 <code>+</code>, <code>-</code>, <code>*</code>, <code>%</code>.<br><code>**</code> (幂), <code>/</code>(浮点除法), <code>//</code>(整除).</li><li>一些被 <code>'</code> 或者  <code>&quot;</code> 包含的字符序列</li><li>赋值语句: <code>=</code>.</li></ul><h3 id="完成作业">完成作业</h3><ul><li><code>python3 ok -q python-basics -u --local</code> 在 <code>lab00</code> 目录下<ul><li><code>--local</code> 跳过邮箱验证</li></ul></li><li>在 <code>lab00.py</code> 补全代码, <code>python3 ok --local</code>.</li></ul><h3 id="有用的-python-命令行中命令">有用的 <code>python</code> 命令行中命令</h3><ul><li><code>-i</code> 逐行运行 <code>python</code></li></ul><h1>Textbook</h1><h2 id="Chapter-1">Chapter 1</h2><h3 id="1-1-Getting-Started">1.1 Getting Started</h3><ul><li>安装 Python: <code>sudo apt-get install python3</code></li><li>使用命令 <code>python</code> 进入 Python 解释器, <code>&gt;&gt;&gt;</code> 是提示符</li><li><code>&lt;C-p&gt;</code>, <code>&lt;C-n&gt;</code> 获得历史记录中下一条 / 上一条命令</li><li><code>&lt;C-d&gt;</code> 退出 <code>python</code> 解释器</li></ul><p><strong>永远不用担心错误, 直面它</strong></p><h3 id="1-2-Elements-of-Programming">1.2 Elements of Programming</h3><p>每一个强大的编程语言都有这样三种机制</p><ul><li><p>基元表达式和语句</p></li><li><p>组合的方法</p></li><li><p>抽象的方法</p></li><li><p>所有表达式都可以使用函数调用表示法</p></li><li><p><code>Python</code> 使用表达式树来计算表达式</p></li><li><p><code>&lt;C-l&gt;</code> 清空屏幕</p></li></ul><h3 id="1-3-Defining-New-Funtions">1.3 Defining New Funtions</h3><ul><li>定义函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def &lt;函数名&gt;(&lt;形式参数&gt;):</span><br><span class="line">    return &lt;表达式&gt;</span><br></pre></td></tr></table></figure><ul><li>引入函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from &lt;库名称&gt; import &lt;函数名称&gt; </span><br></pre></td></tr></table></figure><p><code>def</code> 语句和赋值语句就是把一个值和一个名称绑定, 且任何这个名字之前的绑定都会丢失<br>连续赋值 <code>A, B, C = 1, 2, 3</code></p><p>程序用来维护这些内容的内存即环境, 程序用来维护这些内容的内存即环境<br>当调用一个函数的时候, 就进入了以这个函数的环境中<br>在这里寻找名称绑定的时候优先使用函数内部的变量名(包括形参列表)<br>如果没有找到才会使用函数外的变量名</p><ul><li>纯函数: 函数执行功能并产生一个返回值, 所以更容易形成嵌套的表达式</li><li>非纯函数: 函数在执行过程中执行一些其他的动作比如打印</li></ul><p>形参的名称并不影响函数功能</p><p>命名时的共同约定:</p><ol><li>函数名, 变量名使用小写字母, 单词之间以下划线分隔</li><li>函数名, 变量名使用描述性的语言, 便于了解功能</li><li>避免使用单个字符, 除了它的作用显而易见</li><li>尽量不使用 l 或 o 等单个字符变量以免与数字混淆</li></ol><p>函数作为一层抽象, 用户并不需要了解它的内部实现</p><h3 id="1-4-Designing-Funtions">1.4 Designing Funtions</h3><p>好的函数应该具备以下几个特点:</p><ol><li>每个函数都应该只有一个具体的工作</li><li>不要重复自己的代码, 如果有, 请抽象成一个函数</li><li>对函数进行一般定义, 如 pow(x, 2) 可以取代 square(x), 所以只有 pow 在 Python 标准库中</li></ol><hr><p>给函数写注释:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    返回 a 的平方</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a * a</span><br></pre></td></tr></table></figure><p>此时使用 <code>help(square)</code> 可以看到三个双引号包裹的内容, 按 q 退出</p><p>在写 Python 程序的时候, 除了最简单的函数其他都要写注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi = <span class="number">3.14</span> <span class="comment"># 圆周率近似为 3.14</span></span><br></pre></td></tr></table></figure><p>使用 # 号开头的作为单行注释, 解释器忽略其后的内容</p><hr><p>函数的默认参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>(<span class="params">a, b = <span class="number">10</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br></pre></td></tr></table></figure><p>如果调用 <code>fun1(10)</code> 则会打印 20, 此时 b 的值默认为 10<br>如果用 <code>fun1(10, 20)</code> 则会打印 30, b 重新被定为 20</p><p>注意具有默认参数的形参只能统一放在函数列表后方</p><h3 id="1-5-Control">1.5 Control</h3><p>注意缩进时每个套件内都要使用相同的缩进方式, 否则会报错</p><p>条件表达式</p><ol><li>False, True 两个布尔值, 注意仅 0, None, False 的值为 False</li><li>&gt;, &lt;, &lt;=, &gt;=, ==, != 顾名思义</li><li>or, and, not 与或非<ol><li>or 的短路特性: A or B 当 A 为 True 时, 返回 A, 不再计算 B, 否则返回 B</li><li>and 的短路特性: A and B 当 A 为 False 时, 返回 A, 不再计算 B, 否则返回 B</li></ol></li></ol><p>条件语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;表达式&gt;:</span><br><span class="line">    &lt;套件&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;表达式&gt;:</span><br><span class="line">    &lt;套件&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;套件&gt;</span><br></pre></td></tr></table></figure><p>环语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while &lt;表达式&gt;:</span><br><span class="line">    &lt;循环主体&gt;</span><br></pre></td></tr></table></figure><p>注意使用 <code>&lt;C-c&gt;</code> 来结束无限循环</p><p>测试语句</p><ol><li>assert</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert &lt;表达式&gt;</span><br></pre></td></tr></table></figure><p>表达式为真时, assert 不会有任何效果, 当表达式为假时会报错<br>2. doctest</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">a</span>)</span><br><span class="line">    <span class="string">&quot;&quot;&quot; print(a)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fun(1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fun(2)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fun(3)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"><span class="keyword">from</span> doctest <span class="keyword">import</span> testmod</span><br><span class="line">testmod()</span><br></pre></td></tr></table></figure><p>testmod 函数把定义过的函数并且有如此形式的函数全部做测试, 如果函数运行结果不符则报错<br>当然可以单独测试某个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> doctest <span class="keyword">import</span> run_docstring_examples</span><br><span class="line">run_docstring_examples(fun, <span class="built_in">globals</span>(), <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>第一个参数是函数名字, 第二个参数为 globals() 的返回值, 第三个 True 表示你想看到测试过程</p><h3 id="1-6-Higher-Order-Functions">1.6 Higher-Order Functions</h3><p>操纵函数的函数称为高阶函数, 把函数作为参数传入可以实现更高度的抽象<br>在本地定义的函数称为闭包<br>把有两个参数 x, y 的函数 转化为 使用一个参数 x 的高阶函数返回一个参数为 y 的函数, 这种转换称为柯里化</p><p>lambda 表达式动态创建函数值, 返回值是一个未命名的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">combine</span>(<span class="params">f, g</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: f(g(x))</span><br><span class="line">combine(<span class="keyword">lambda</span> x: x * x, <span class="keyword">lambda</span> x: x + <span class="number">1</span>)</span><br><span class="line">s = <span class="keyword">lambda</span> x: x * x * x</span><br><span class="line">s(<span class="number">12</span>)</span><br></pre></td></tr></table></figure><p>在 Python 中, 函数是一等公民, 它可以被传递, 分配给其他变量, 并作为参数传递给其他函数<br>Python 装饰器本身是一个函数, 它可以修改被装饰函数的行为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="comment"># 在调用被装饰函数之前的额外逻辑</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在调用被装饰函数之前的额外逻辑&quot;</span>)</span><br><span class="line">        result = func(x)</span><br><span class="line">        <span class="comment"># 在调用被装饰函数之后的额外逻辑</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在调用被装饰函数之后的额外逻辑&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><h3 id="1-7-Recusive-Functions">1.7 Recusive Functions</h3><p>一个在内部调用自身的函数称作递归函数</p><p>递归基本结构</p><ol><li>一个条件判断语句, 是判断当递归进入最简单的情况时的边界情况</li><li>相信你下一层递归的结果, 然后借此来计算本层的递归结果<br>类似一种归纳证明的模式<br>递归函数可以避免一些本地名称分配的问题, 不需要很多变量即可实现所需功能</li></ol><ul><li>两个互相调用的函数称作互递归, 有些互递归的函数可以转换为普通递归</li><li>一个函数多次调用自己就是树递归</li></ul><h2 id="Chapter-2">Chapter 2</h2><h3 id="2-1-Introduction">2.1 Introduction</h3><p><code>type</code> 函数可以检测任何值的类型</p><ul><li>数字类型: <code>int</code>, <code>float</code>, <code>complex</code><ul><li>注意 float 类型是个近似表示, 有系统误差</li></ul></li></ul><h3 id="2-2-Data-Abstraction">2.2 Data Abstraction</h3><p>将程序中处理数据表示的部分和处理数据操作的部分分离开来的设计方法称为数据抽象</p><p>列表: 通过方括号中的一系列用逗号隔开的表达式构建而成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pair = [<span class="number">10</span>, <span class="number">20</span>]</span><br></pre></td></tr></table></figure><p>访问方式:</p><ol><li>使用变量 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x, y = pair</span><br></pre></td></tr></table></figure></li><li>使用下标访问 <code>pair[0]</code>, <code>pair[1]</code></li><li><code>getitem(pair, 0)</code></li></ol><p>使用数据抽象的时候, 最好让函数不依赖于特定表述, 从而方便维护</p><h3 id="2-3-Sequences">2.3 Sequences</h3><p><code>list</code> 是一个可以有任意长度的序列, 有很多的内置行为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">seq = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">len</span>(seq) <span class="comment"># 输出 seq 长度</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>] + seq <span class="comment"># + 代表连接序列</span></span><br><span class="line">seq * <span class="number">2</span> <span class="comment"># * 代表复制, 即 * 2 就是复制两次</span></span><br></pre></td></tr></table></figure><p>当然, <code>list</code> 可以包含很多数据类型, 包括 <code>list</code> 自己, 这样就形成了二维 <code>list</code></p><p><code>for</code> 语句可以遍历序列的每一个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> seq:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><p><code>for</code> 还可以用来拆包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pairs = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> pairs:</span><br><span class="line">    <span class="built_in">print</span>(x, <span class="string">&#x27; &#x27;</span>, y)</span><br></pre></td></tr></table></figure><p><code>range(a, b)</code> 左开右闭, a 默认为 0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>, <span class="number">40</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment"># 当 for 后面定义的名称在循环中用不到时, 应使用 _</span></span><br><span class="line"><span class="comment"># 这不是硬性要求, 但是这是一个习惯</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></figure><p>列表推导式, 当想对序列中每个元素做相同的操作时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">seq2 = [x + <span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> seq]</span><br><span class="line">seq3 = [x <span class="keyword">for</span> x <span class="keyword">in</span> seq <span class="keyword">if</span> (<span class="number">25</span> % x == <span class="number">0</span>)]</span><br><span class="line">seq4 = [x <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">else</span> x + <span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> seq]</span><br><span class="line"><span class="comment"># 一般形式</span></span><br><span class="line">[&lt;映射表达式&gt; <span class="keyword">for</span> &lt;名称&gt; <span class="keyword">in</span> &lt;序列表达式&gt; <span class="keyword">if</span> &lt;筛选表达式&gt;]</span><br></pre></td></tr></table></figure><p>聚合: 把序列中的值经过某种运算最后留下一个值, 如 <code>min</code>, <code>max</code>, <code>sum</code>等</p><p>列表成员</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">seq = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="number">3</span> <span class="keyword">in</span> seq <span class="comment"># 输出 True</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">in</span> seq <span class="comment"># 输出 False</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">not</span> <span class="keyword">in</span> seq <span class="comment"># 输出 True</span></span><br></pre></td></tr></table></figure><p>切片: <code>seq[a:b]</code> 表示下标为 a~b 的这些元素组成的序列, a 默认为 0, b 默认为 <code>list</code> 长度</p><p>空列表: <code>not list == True</code></p><hr><p>字符串: <code>string</code>, 由单引号或双引号包围的任意文本</p><p>字符串有长度, 支持用下标选择某个字符, 支持 <code>+</code>, <code>*</code>, 成员</p><p>三个引号可以表示多行字符串</p><p>字符串强制转换: 可以转换数字, 列表</p><hr><p>用列表作为其他列表元素的能力被称为数据类型的闭包属性</p><p>组合的结果本身可以使用相同的方法进行组合, 则这种方法有闭包属性</p><p>可以使用列表来构造一棵树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">tree</span>(<span class="params">root_label, branches=[]</span>):</span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches:</span><br><span class="line">        <span class="keyword">assert</span> is_tree(branch), <span class="string">&#x27;branches must be trees&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> [root_label] + <span class="built_in">list</span>(branches)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">label</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">branches</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_tree</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(tree) != <span class="built_in">list</span> <span class="keyword">or</span> <span class="built_in">len</span>(tree) &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches(tree):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_tree(branch):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_leaf</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> branches(tree)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建斐波那契树</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib_tree</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> tree(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        left, right = fib_tree(n-<span class="number">2</span>), fib_tree(n-<span class="number">1</span>)</span><br><span class="line">        fib_n = label(left) + label(right)</span><br><span class="line">        <span class="keyword">return</span> tree(fib_n, [left, right])</span><br></pre></td></tr></table></figure><hr><p>可以使用列表构建链表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">empty = <span class="string">&#x27;empty&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_link</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;s is a linked list if it is empty or a (first, rest) pair.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> s == empty <span class="keyword">or</span> (<span class="built_in">len</span>(s) == <span class="number">2</span> <span class="keyword">and</span> is_link(s[<span class="number">1</span>]))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">link</span>(<span class="params">first, rest</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Construct a linked list from its first element and the rest.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> is_link(rest), <span class="string">&quot;rest must be a linked list.&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [first, rest]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the first element of a linked list s.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> is_link(s), <span class="string">&quot;first only applies to linked lists.&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> s != empty, <span class="string">&quot;empty linked list has no first element.&quot;</span></span><br><span class="line">    <span class="keyword">return</span> s[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rest</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the rest of the elements of a linked list s.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> is_link(s), <span class="string">&quot;rest only applies to linked lists.&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> s != empty, <span class="string">&quot;empty linked list has no rest.&quot;</span></span><br><span class="line">    <span class="keyword">return</span> s[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">len_link</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the length of linked list s.&quot;&quot;&quot;</span></span><br><span class="line">    length = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> s != empty:</span><br><span class="line">        s, length = rest(s), length + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> length</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getitem_link</span>(<span class="params">s, i</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the element at index i of linked list s.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> i &gt; <span class="number">0</span>:</span><br><span class="line">        s, i = rest(s), i - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> first(s)</span><br></pre></td></tr></table></figure><h3 id="2-4-Mulable-Data">2.4 Mulable Data</h3><p>对象把数据值和行为结合在一起</p><ol><li>对象具有属性: <code>&lt;表达式&gt;.&lt;属性名称&gt;</code></li><li>对象具有方法: <code>&lt;表达式&gt;.&lt;方法名称&gt;</code></li></ol><p>可变对象: 列表, 字典, 集合<br>不可变对象: 整数, 浮点数, 字符串, 元组</p><p>列表:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = a</span><br><span class="line"><span class="comment"># 此时 a, b 指向同一个列表</span></span><br><span class="line">b += [<span class="number">4</span>] <span class="comment"># a 也会被改变</span></span><br><span class="line"><span class="built_in">print</span>(a) </span><br></pre></td></tr></table></figure><p>可以使用列表复制来避免这个问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="built_in">list</span>(a)</span><br><span class="line">c += [<span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># a 没有受到上一条语句的影响</span></span><br></pre></td></tr></table></figure><p><code>is</code> 可以检测两个对象所指的列表是否是同一个列表, 这比 <code>==</code> 限制条件更强</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c.pop()</span><br><span class="line">c == a <span class="comment"># True</span></span><br><span class="line">c <span class="keyword">is</span> a <span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>列表的其他常用方法</p><ul><li><code>append(el)</code>: el加到末尾。返回None。</li><li><code>extend(lst)</code>: 在后方连接lst。返回None。</li><li><code>insert(i, el)</code>: 在索引i处插入el。返回None。</li><li><code>remove(el)</code>: 移除第一个el。返回None。如果 el 不在列表中会报错</li><li><code>pop(i)</code>: 移除并返回索引i处的元素。</li></ul><hr><p>元组 (tuple) 是一个不可变对象, 类似 list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>, [<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">t[<span class="number">2</span>].pop() <span class="comment"># 如果 tuple 中的元素是可变对象, 那就可以改变这个元素的值</span></span><br><span class="line"><span class="comment"># 但是需要使用 可变对象自身的方法</span></span><br><span class="line"><span class="comment"># t[2] += [4] Error</span></span><br><span class="line">t[<span class="number">2</span>].append(<span class="number">4</span>) <span class="comment"># 可行</span></span><br><span class="line"><span class="comment"># t[0] = 3 不可行, 整数类型不可变</span></span><br><span class="line"><span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure><p>字典 (dictionary) 是一个可变对象, 可以以任何不可变对象为索引 <br>当然, 使用元组作为索引的时候, 元组内不能包含可变对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = &#123; <span class="string">&quot;A&quot;</span>: <span class="number">5</span> &#125;</span><br><span class="line">t.get(<span class="string">&quot;A&quot;</span>, <span class="number">0</span>) <span class="comment"># 第一个参数为简直, 第二个参数为默认值 (如果键值不存在才返回)</span></span><br><span class="line">t.get(<span class="string">&quot;B&quot;</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>还有使用 for 来创建一个字典的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = &#123; x: x + 1 for x in range(3) &#125;</span><br></pre></td></tr></table></figure><p><code>nonlocal</code> 关键字: 使得内嵌函数能使用上一级函数的变量 <br>实际应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_save</span>(<span class="params">money</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">out</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> money</span><br><span class="line">        <span class="keyword">if</span> (x &gt; money):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;余额不足&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            money -= x</span><br><span class="line">        <span class="keyword">return</span> money</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line">money = my_save(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(money(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(money(<span class="number">80</span>))</span><br><span class="line"><span class="built_in">print</span>(money(<span class="number">20</span>))</span><br></pre></td></tr></table></figure><p>可变对象不需要 nonlocal 关键字, 因为他们指向的内存是同一个</p><h3 id="2-5-Object-Orient-Programming">2.5 Object-Orient Programming</h3><p>对象是具有属性和方法的值<br>定义类, 类中每个方法的第一个参数都是 <code>self</code>, 但是在调用的时候不用传入这个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> &lt;name&gt;:</span><br><span class="line">    &lt;suite&gt;</span><br></pre></td></tr></table></figure><p>初始化对象的方法有特定的名字 <code>__init__()</code>, 称作构造函数 <br>通过赋值将对象绑定到新名称不会创建一个新对象</p><p>点表达式: <code>&lt;expression&gt;.&lt;name&gt;</code>, 通过点表达式访问类内部的属性和方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getattr(a, &quot;xxx&quot;) # 调用名称为 xxx 的属性</span><br><span class="line">hasattr(a, &quot;xxx&quot;) # 查询是否有名为 xxx 的属性</span><br></pre></td></tr></table></figure><p>有两种方法调用类内部定义的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;类名称&gt;.&lt;函数名&gt;(实例化名称, 1)</span><br><span class="line">&lt;实例化名称&gt;.&lt;函数名&gt;(1)</span><br></pre></td></tr></table></figure><p>命名约定:</p><ol><li>类名称使用驼峰命名法</li><li>属性名称使用下划线分割由小写字母组成的单词</li><li>以下划线开头的名称通常是由类内部的方法访问, 而不是由外部访问</li></ol><p>对于每个实例化对象, 有些属性一直不变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    interest = <span class="number">0.02</span>  <span class="comment"># 一个类属性</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, account_holder</span>):</span><br><span class="line">        self.balance = <span class="number">0</span></span><br><span class="line">        self.holder = account_holder</span><br><span class="line">    <span class="comment"># 这里可以定义其他方法</span></span><br><span class="line"></span><br><span class="line">Account.interest = <span class="number">0.04</span> <span class="comment"># 这种方法会改变所有实例化对象的 interest 属性</span></span><br><span class="line"><span class="comment"># 单独改变某一实例化对象的 interest 属性不会影响其他实例化对象</span></span><br></pre></td></tr></table></figure><hr><p>继承: 子类可以覆盖基类特定的属性和方法, 未指定的内容则视为和基类相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一个具有非负余额的银行账户。&quot;&quot;&quot;</span></span><br><span class="line">    interest = <span class="number">0.02</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, account_holder</span>):</span><br><span class="line">        self.balance = <span class="number">0</span></span><br><span class="line">        self.holder = account_holder</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deposit</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将账户余额增加指定金额并返回新的余额。&quot;&quot;&quot;</span></span><br><span class="line">        self.balance = self.balance + amount</span><br><span class="line">        <span class="keyword">return</span> self.balance</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">withdraw</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将账户余额减少指定金额并返回新的余额。&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> amount &gt; self.balance:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Insufficient funds&#x27;</span></span><br><span class="line">        self.balance = self.balance - amount</span><br><span class="line">        <span class="keyword">return</span> self.balance</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CheckingAccount</span>(<span class="title class_ inherited__">Account</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一个收取取款费用的银行账户。&quot;&quot;&quot;</span></span><br><span class="line">    withdraw_charge = <span class="number">1</span></span><br><span class="line">    interest = <span class="number">0.01</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">withdraw</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="keyword">return</span> Account.withdraw(self, amount + self.withdraw_charge)</span><br></pre></td></tr></table></figure><p>多重继承: 一个子类可以继承自多个基类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SavingsAccount</span>(<span class="title class_ inherited__">Account</span>):</span><br><span class="line">    deposit_charge = <span class="number">2</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deposit</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="keyword">return</span> Account.deposit(self, amount - self.deposit_charge)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AsSeenOnTVAccount</span>(CheckingAccount, SavingsAccount):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, account_holder</span>):</span><br><span class="line">        self.holder = account_holder</span><br><span class="line">        self.balance = <span class="number">1</span>  <span class="comment"># 一美元免费！</span></span><br></pre></td></tr></table></figure><p>如果多个基类都有同一个方法, 继承的顺序不在本节讨论范围内</p><h3 id="2-9-Recusive-Objects">2.9 Recusive Objects</h3><p>对象可以把其他对象当作属性值, 这样的对象称为递归对象</p><p>链表类:</p><ol><li>空链表用空元组表示, 长度为零, 没有元素</li><li>内置方法名字为 <code>__len__</code> 时, 当使用 python 内置函数 <code>len</code> 的时候就会调用这个方法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">link_expression</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回一个表示s的字符串。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> s.rest <span class="keyword">is</span> Link.empty:</span><br><span class="line">        rest = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rest = <span class="string">&#x27;, &#x27;</span> + link_expression(s.rest)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Link(&#123;0&#125;&#123;1&#125;)&#x27;</span>.<span class="built_in">format</span>(s.first, rest)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">join_link</span>(<span class="params">s, separator</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 链表输出更紧凑 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> s <span class="keyword">is</span> Link.empty:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> s.rest <span class="keyword">is</span> Link.empty:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(s.first)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(s.first) + separator + join_link(s.rest, separator)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">map_link</span>(<span class="params">f, s</span>):</span><br><span class="line">    <span class="keyword">if</span> s <span class="keyword">is</span> Link.empty:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Link(f(s.first), map_link(f, s.rest))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_link</span>(<span class="params">f, s</span>):</span><br><span class="line">    <span class="keyword">if</span> s <span class="keyword">is</span> Link.empty:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        filtered = filter_link(f, s.rest)</span><br><span class="line">        <span class="keyword">if</span> f(s.first):</span><br><span class="line">            <span class="keyword">return</span> Link(s.first, filtered)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> filtered</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Link</span>:</span><br><span class="line">    empty = ()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, first, rest=empty</span>):</span><br><span class="line">        <span class="keyword">assert</span> rest <span class="keyword">is</span> Link.empty <span class="keyword">or</span> <span class="built_in">isinstance</span>(rest, Link)</span><br><span class="line">        <span class="comment"># instance 是内置函数 </span></span><br><span class="line">        <span class="comment"># 如果 rest 是 Link 的实例或者是 Link的某个子类的实例, 返回 True</span></span><br><span class="line">        self.first = first</span><br><span class="line">        self.rest = rest</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, i</span>):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.first</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.rest[i-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">len</span>(self.rest)</span><br><span class="line">    __repr__ = link_expression</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>树的实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tree</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, label, branches=(<span class="params"></span>)</span>):</span><br><span class="line">        self.label = label</span><br><span class="line">        <span class="keyword">for</span> branch <span class="keyword">in</span> branches:</span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">isinstance</span>(branch, Tree)</span><br><span class="line">        self.branches = branches</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.branches:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Tree(&#123;0&#125;, &#123;1&#125;)&#x27;</span>.<span class="built_in">format</span>(self.label, <span class="built_in">repr</span>(self.branches))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Tree(&#123;0&#125;)&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">repr</span>(self.label))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_leaf</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> self.branches</span><br></pre></td></tr></table></figure><p>集合的实现:</p><ol><li>通过链表</li><li>通过有序序列</li><li>通过二叉搜索树, 随机插入元素时复杂度较优</li><li>通过平衡树, 任意元素插入时复杂度较优</li></ol><p>python 内部集合的实现: 基于哈希的一种方法, 超出课程讨论范围</p><h2 id="Chapter-3">Chapter 3</h2><h3 id="3-1-Introduction">3.1 Introduction</h3><p>本章重点介绍程序本身, 研究解释器的设计和执行程序时他们创建的计算过程</p><h3 id="3-2-Functional-Programming">3.2 Functional Programming</h3><p>本节介绍 <code>Scheme</code> 语言的一个子集, 只使用表达式, 专门用于符号计算, 没有可变值</p><p><code>Scheme</code> 完全使用前缀表示法, 使用小括号来分割操作符和操作数</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">3</span>)</span><br><span class="line">(<span class="name"><span class="built_in">&gt;=</span></span> <span class="number">2</span> <span class="number">1</span>)</span><br><span class="line">(<span class="name"><span class="built_in">if</span></span> &lt;condition&gt; &lt;consequent&gt; &lt;alternative&gt;)</span><br><span class="line">(<span class="name"><span class="built_in">and</span></span> &lt;e1&gt; ... &lt;en&gt;)</span><br><span class="line">(<span class="name"><span class="built_in">or</span></span> &lt;e1&gt; ... &lt;en&gt;)</span><br><span class="line">(<span class="name"><span class="built_in">not</span></span> &lt;e1&gt;)</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> pi <span class="number">3.14</span>)</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">square</span> x) (<span class="name"><span class="built_in">*</span></span> x x))</span><br><span class="line">(<span class="name"><span class="built_in">lambda</span></span> (x) (<span class="name">x</span> * x)) </span><br><span class="line"><span class="comment">; 匿名函数, 功能等同于上一句</span></span><br><span class="line">(<span class="name">square</span> <span class="number">21</span>)</span><br><span class="line">(<span class="name">square</span> (<span class="name"><span class="built_in">+</span></span> <span class="number">5</span> <span class="number">2</span>))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> x (<span class="name"><span class="built_in">cons</span></span> <span class="number">1</span> <span class="number">2</span>))</span><br><span class="line">(<span class="name"><span class="built_in">car</span></span> x) </span><br><span class="line"><span class="comment">; 第一个</span></span><br><span class="line">(<span class="name">crd</span> x) </span><br><span class="line"><span class="comment">; 第二个 </span></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">list</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>)</span><br><span class="line">(<span class="name"><span class="built_in">car</span></span>) </span><br><span class="line"><span class="comment">; 1</span></span><br><span class="line">(<span class="name">crd</span>)</span><br><span class="line"><span class="comment">; 2 3 4</span></span><br></pre></td></tr></table></figure><h3 id="3-3-Exceptions">3.3 Exceptions</h3><p>在设计程序时, 应该时刻注意程序中有可能出现的错误 <br>设计持久服务的程序更应该对错误具有健壮性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    &lt;<span class="keyword">try</span> suite&gt;</span><br><span class="line"><span class="keyword">except</span> &lt;exception <span class="keyword">class</span>&gt; <span class="keyword">as</span> &lt;name&gt;:</span><br><span class="line">    &lt;<span class="keyword">except</span> suite&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>异常对象的应用: 第一章中牛顿插值中出现 ValueError 时返回最后一次猜测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IterImproveError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, last_guess</span>):</span><br><span class="line">        self.last_guess = last_guess</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">improve</span>(<span class="params">update, done, guess=<span class="number">1</span>, max_updates=<span class="number">1000</span></span>):</span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> done(guess) <span class="keyword">and</span> k &lt; max_updates:</span><br><span class="line">            guess = update(guess)</span><br><span class="line">            k = k + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> guess</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">raise</span> IterImproveError(guess)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_zero</span>(<span class="params">f, guess=<span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">done</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> f(x) == <span class="number">0</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> improve(newton_update(f), done, guess)</span><br><span class="line">    <span class="keyword">except</span> IterImproveError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> e.last_guess</span><br></pre></td></tr></table></figure><h3 id="3-4-Interpreters-for-Languages-with-Combination">3.4 Interpreters for Languages with Combination</h3><p>元语言抽象: 一种以其他语言为基础建立语言的技术</p><p>现在来用 python 实现一个 scheme 格式的计算器<br>它将以字符串为输入, 并将这些表达式求值后返回结果 <br>如果输入的字符串不符合语法规则, 程序将引发适当的异常</p><p>实现一个 Pair 类来存储表达式树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expr = Pair(<span class="string">&#x27;+&#x27;</span>, Pair(Pair(<span class="string">&#x27;*&#x27;</span>, Pair(<span class="number">3</span>, Pair(<span class="number">4</span>, nil))), Pair(<span class="number">5</span>, nil)))</span><br><span class="line"><span class="built_in">print</span>(expr) <span class="comment"># (+ (* 3 4) 5)</span></span><br></pre></td></tr></table></figure><p>解释器分为词法分析器和语法分析器</p><ol><li>词法分析器 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tokenize_line(<span class="string">&#x27;(+ 1 (* 2.3 45))&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="number">2.3</span>, <span class="number">45</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;)&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li>语法分析器: 一个树递归的过程</li></ol><p>解释器: 解析, 评估, 应用, 评估/应用 循环</p><h3 id="3-5-Interpreters-for-Languages-with-Abstraction">3.5 Interpreters for Languages with Abstraction</h3><h2 id="Chapter-4">Chapter 4</h2><h3 id="4-1">4.1</h3><h3 id="4-2-Implict-Sequences">4.2 Implict Sequences</h3><p>序列可以不显性地创造, 可以在用到这个值的时候延迟计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r = <span class="built_in">range</span>(<span class="number">100</span>, <span class="number">100000000</span>)</span><br><span class="line"><span class="built_in">print</span>(r[<span class="number">11234214</span>])</span><br></pre></td></tr></table></figure><p>迭代器: python 中按顺序处理数据的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">it = <span class="built_in">iter</span>(p)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it)) <span class="comment"># StopIteration</span></span><br></pre></td></tr></table></figure><p>类似的, 对于迭代器, 多个名字指向的是同一个迭代器, 对迭代器使用 iter 函数也返回它自己而不是一个副本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it2 = it1</span><br><span class="line"><span class="built_in">next</span>(it2) <span class="comment"># StopIteration</span></span><br><span class="line">it3 = <span class="built_in">iter</span>(p)</span><br><span class="line"><span class="built_in">next</span>(it3)</span><br><span class="line">it4 = <span class="built_in">iter</span>(it3)</span><br><span class="line"><span class="built_in">next</span>(it4)</span><br></pre></td></tr></table></figure><p>迭代器就可以像这样每次计算出下一个迭代器, 从而实现顺序访问</p><p>通常来说, <code>range()</code>, <code>list</code>, <code>dictionary</code>, <code>set</code>, <code>tuple</code> 是可以被迭代的对象 <br>特殊的, 迭代器本身也是可迭代对象, 因为它可以作为 <code>iter()</code> 函数的参数</p><p>但是, <code>dictionary</code>, <code>set</code> 这些对象的值改变不影响迭代器, 键的增加和删除会让之前的迭代器全部失效</p><p>内置迭代器:</p><ul><li><code>map(f, iterable)</code> - 为可迭代对象中的每个元素 x 创建一个 f(x) 的迭代器。在某些情况下，计算这个可迭代对象中的值列表将给我们与 [func(x) for x in iterable] 相同的结果。但是，请记住，迭代器可以具有无限的值，因为它们是惰性求值的，而列表不能具有无限的元素。</li><li><code>filter(f, iterable)</code> - 为可迭代对象中满足 f(x) 的每个元素 x 创建一个迭代器。</li><li><code>zip(iterables*)</code> - 创建一个迭代器，其中包含来自每个可迭代对象的对应元素的元组。</li><li><code>reversed(iterable)</code> - 以逆序创建一个包含输入可迭代对象中所有元素的迭代器。</li><li><code>list(iterable)</code> - 创建一个包含输入的可迭代对象中所有元素的列表。</li><li><code>tuple(iterable)</code> - 创建一个包含输入的可迭代对象中所有元素的元组。</li><li><code>sorted(iterable)</code> - 创建一个包含输入的可迭代对象中所有元素的排序列表。</li><li><code>reduce(f, iterable)</code> - 必须导入 functools。将两个参数函数 f 从左到右累积地应用于可迭代对象的项，以将序列减少为单个值。</li></ul><p>for 语句就是使用可迭代对象的迭代器进行循环的, 可以使用 while 来模拟</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">        x = <span class="built_in">next</span>(it)</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">except</span> StopIteration:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><hr><p>生成器函数是一类特殊的函数, 使用 <code>yield</code> 而不是 <code>return</code> 来返回一系列元素 <br>每次调用生成器的 <code>next</code> 方法时, 生成器函数会运行到下一个 <code>yield</code> 语句为止</p><h1>SQL</h1><p><code>SQL</code> 是一种声明式语言, 程序是描述结果, 解释器指出如何生成结果<br>命令式语言: 程序是计算过程的描述, 解释器执行该过程</p><ol><li><code>select</code> 语句从零创建一个新表, 或者从之前的表中创建<ul><li><code>select</code> 语句总是包含以逗号分割的列描述来说明表</li><li>一个列描述是一个表达式, 后面可以接 <code>as</code> 和表的名称</li><li><code>select [expression] as [name], [expression] as [name]....;</code></li><li><code>select [columns] from [table] where [condition] order by [order]</code></li><li>所有的 <code>SQL</code> 语句都以分号结尾</li></ul></li><li><code>creat table</code> 为表创建一个全局名称<ul><li><code>creat table [name] as [select statement]</code></li></ul></li><li><code>analyze</code>, <code>delete</code>, <code>explain</code>, <code>insert</code>, <code>replace</code>, <code>update</code></li></ol><p>安装 <code>sqlite</code> 来解释 <code>SQL</code> 代码</p>]]></content>
      
      
      <categories>
          
          <category> Course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scheme </tag>
            
            <tag> Python </tag>
            
            <tag> Course </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim 学习笔记</title>
      <link href="/2023/01/11/Learnvim/"/>
      <url>/2023/01/11/Learnvim/</url>
      
        <content type="html"><![CDATA[<p>A note about learning vim.</p><span id="more"></span><h2 id="Chapter-1-The-Vim-Way">Chapter 1: The Vim Way</h2><h3 id="Tip-1-Meet-the-Dot-Command">Tip 1: Meet the Dot Command</h3><blockquote><p><code>.</code> is to repeat the last change</p></blockquote><ul><li>The Dot Command is a Micro Macro.</li></ul><h3 id="Tip-2-Don’t-Repeat-Yourself">Tip 2: Don’t Repeat Yourself</h3><blockquote><p>Move and use the dot command</p></blockquote><ul><li>Reduce Extraneous Movement</li></ul><h3 id="Tip-3-Take-One-Step-Back-Then-Three-Forward">Tip 3: Take One Step Back, Then Three Forward</h3><ul><li>Make the change repeatable</li><li>Make the motion repeatable</li><li>All together</li></ul><h3 id="Tip-4-Act-Repeat-Reverse">Tip 4: Act, Repeat, Reverse</h3><blockquote><p>Notice that many commands have its reversed form to themselves.<br>So you can undo almost everything.</p></blockquote><h3 id="Tip-5-Find-and-Replace-by-Hand">Tip 5: Find and Replace by Hand</h3><ul><li>Use <code>:%s/content/copy/g</code> to replace all in this file<ul><li>Or use <code>/content</code> and <code>.</code> to replace one by one with your judgement.</li></ul></li></ul><h3 id="Tip-6-Meet-the-Dot-Formula">Tip 6: Meet the Dot Formula</h3><ul><li>One Keystroke to Move, One Keystroke to Execute.</li></ul><h2 id="Chapter-2-Normal-Mode">Chapter 2: Normal Mode</h2><h3 id="Tip-7-Pause-with-Your-Brush-Off-the-Page">Tip 7: Pause with Your Brush Off the Page</h3><blockquote><p>When you ask yourself whether you should enter the normal mode, then do it.</p></blockquote><h3 id="Tip-8-Chunk-Your-Undos">Tip 8: Chunk Your Undos</h3><ul><li><code>u</code> is the undo command.<ul><li><code>u</code> and <code>&lt;C-r&gt;</code> are relative commands.</li></ul></li></ul><h3 id="Tip-9-Compose-Repeatable-Changes">Tip 9: Compose Repeatable Changes</h3><ul><li>In a word, make your command repeatable as possible as you can,<br>so when you find the next operator can be done by <code>.</code>, you`ll be happy.</li></ul><h3 id="Tip-10-Use-Counts-to-Do-Simple-Arithmetic">Tip 10: Use Counts to Do Simple Arithmetic</h3><ul><li><code>&lt;C-a&gt;</code> and <code>&lt;C-x&gt;</code> perform addition and substraction on numbers.</li></ul><h3 id="Tip-11-Don’t-Count-If-You-Can-Repeat">Tip 11: Don’t Count If You Can Repeat</h3><ul><li>You can use <code>dw.......</code> rather than <code>d7w</code> because you counting time are long.<ul><li>Also, if you type dot one more time, you can type <code>u</code> to undo it easily.</li></ul></li><li>But you can use <code>d7w</code> to have a cleaner undo tree if you like counting.</li></ul><p>Which to use is up to you.</p><h3 id="Tip-12-Combine-and-Conquer">Tip 12: Combine and Conquer</h3><ul><li>Operator + Motion = Action</li><li>Try to map your own keys</li></ul><h2 id="Chapter-3-Insert-Mode">Chapter 3 Insert Mode</h2><h3 id="Tip-13-Make-Corrections-Instantly-from-Insert-Mode">Tip 13: Make Corrections Instantly from Insert Mode</h3><ul><li><code>&lt;C-h&gt;</code> is the same as the <code>&lt;BS&gt;</code></li><li><code>&lt;C-w&gt;</code> is the same as <code>db</code></li><li><code>&lt;C-u&gt;</code> is the same as <code>d^</code></li></ul><h3 id="Tip-14-Get-Back-to-Normal-Mode">Tip 14: Get Back to Normal Mode</h3><ul><li><code>&lt;C-[&gt;</code> is the same as <code>&lt;esc&gt;</code></li><li><code>&lt;C-o&gt;</code> is to enter the insert normal mode.</li></ul><h3 id="Tip-15-Paste-from-a-Register-Without-Leaving-Insert-Mode">Tip 15: Paste from a Register Without Leaving Insert Mode</h3><ul><li><code>&lt;C-r&gt;&#123;register&#125;</code> is to paste text from the register.</li><li>In my opinion, it’s not better than <code>&lt;C-o&gt;p</code></li></ul><h3 id="Tip-16-Do-Back-of-the-Envelope-Calculations-in-Place">Tip 16: Do Back-of-the-Envelope Calculations in Place</h3><ul><li><code>&lt;C-r&gt;=&#123;expression&#125;&lt;CR&gt;</code> can calculate the value of the expression.</li></ul><h3 id="Tip-17-Insert-Unusual-Characters-by-Character-Code">Tip 17: Insert Unusual Characters by Character Code</h3><ul><li><code>&lt;C-v&gt;&#123;code&#125;</code> can insert some special characters.<ul><li>To know more, see <code>:h i_CTRL_V_digit</code> for more details.</li><li>Also, you can use <code>ga</code> to know the code of the letter under the cursor.</li><li><code>&lt;C-v&gt;&lt;Tab&gt;</code> is to insert the tab rather than any spaces<br>whether you use the <code>expandtab</code> option.</li></ul></li></ul><h3 id="Tip-18-Insert-Unusual-Characters-by-Digraph">Tip 18: Insert Unusual Characters by Digraph</h3><ul><li><code>&lt;C_k&gt;&#123;char1&#125;&#123;char2&#125;</code> can type digraphs.<ul><li>Use <code>:digraph</code> for more details.</li></ul></li></ul><h3 id="Tip-19-Overwrite-Existing-Text-with-Replace-Mode">Tip 19: Overwrite Existing Text with Replace Mode</h3><ul><li><code>R</code> is to enter the replace mode under the normal mode</li><li><code>r&#123;letter&#125;</code> is to replace the letter under the cursor with the {letter}.</li><li>Overwrite Tab Characters with Virtual Replace Mode<ul><li>If you didn’t set <code>expandtab</code>, replacing a tab means that<br>replace many characters with one. (Many is due to the option <code>tabstop</code>.</li><li>Also you can use <code>gR</code> to avoid it, use <code>gr</code> similarly.</li></ul></li></ul><h2 id="Chapter-4">Chapter 4</h2><h3 id="Tip-20-Grok-Visual-Mode">Tip 20: Grok Visual Mode</h3><ul><li><p>Use <code>v</code> to enter the visual mode.</p></li><li><p>Most commands are the same as themselves in the normal mode.</p><ul><li>The operator commands such as <code>y</code>, it needs you to confirm operation<br>object such as <code>iw</code>, but in the visual mode, the operation object directly<br>becomes the areas you have selected.</li></ul></li><li><p>Use <code>&lt;C-g&gt;</code> to enter the select mode, it is similar to the other editor.</p><ul><li>When you type any printable letter, the area you have selected will be<br>deleted and you will enter the insert mode with the letter printed.</li></ul></li></ul><h3 id="Tip-21-Define-a-Visual-Selection">Tip 21: Define a Visual Selection</h3><ul><li>Use <code>v</code> to enter the character-wise visual mode.</li><li>Use <code>V</code> to enter the line-wise visual mode.</li><li>Use <code>&lt;C-v&gt;</code> to enter the block-wise visual mode.</li><li>Use <code>gv</code> to reselect the last visual selection.</li></ul><p>Also they can be use to change visual mode from the other visual mode.</p><ul><li>Use <code>o</code> to move to the other end of the selection.</li></ul><h3 id="Tip-22-Repeat-Line-Wise-Visual-Commands">Tip 22: Repeat Line-Wise Visual Commands</h3><ul><li><code>.</code> command in the visual mode is to reselect the last visual selection<br>and do the same things such as indenting.</li></ul><h3 id="Tip-23-Prefer-Operators-to-Visual-Commands-Where-Possible">Tip 23: Prefer Operators to Visual Commands Where Possible</h3><ul><li>You’d better use dot command in the normal mode so that it can be repeatable.</li></ul><h3 id="Tip-24-Edit-Tabular-Data-with-Visual-Block-Mode">Tip 24: Edit Tabular Data with Visual-Block Mode</h3><ul><li>Use <code>&lt;C-v&gt;</code> to add the <code>|</code> in the same column for many lines.</li><li>Use <code>V</code> to change the whole line into <code>-</code> by <code>r-</code></li></ul><h3 id="Tip-25-Change-Columns-of-Text">Tip 25: Change Columns of Text</h3><ul><li>Return to the normal mode so that the change can be loaded.</li></ul><h3 id="Tip-26-Append-After-a-Ragged-Visual-Block">Tip 26: Append After a Ragged Visual Block</h3><ul><li><code>i</code> and <code>a</code> have another meanings under the visual mode.<br>We’ll expain it later.</li></ul><h2 id="Chapter-5-Command-Line-Mode">Chapter 5: Command-Line Mode</h2><h3 id="Tip-27-Meet-Vim’s-Command-Line">Tip 27: Meet Vim’s Command Line</h3><ul><li>See <code>:h delete</code>, <code>:h yank</code>, <code>:h put</code>, <code>:h copy</code>, <code>:h move</code>,<br><code>:h join</code>, <code>:h normal</code>, <code>:h substitute</code>, <code>:h global</code> for help.</li></ul><h3 id="Tip-28-Execute-a-Command-on-One-or-More-Consecutive-Lines">Tip 28: Execute a Command on One or More Consecutive Lines</h3><ul><li>See <code>:h range</code>, <code>:h pattern</code>, <code>:h mark</code> for help.</li></ul><h3 id="Tip-29-Duplicate-or-Move-Lines-Using-‘-t’-and-‘-m’-Commands">Tip 29: Duplicate or Move Lines Using ‘:t’ and ‘:m’ Commands</h3><ul><li><code>:t</code> is the same as <code>:copy</code>.</li></ul><h3 id="Tip-30-Run-Normal-Mode-Commands-Across-a-Range">Tip 30: Run Normal Mode Commands Across a Range</h3><ul><li>Use <code>:normal</code> to execute normal commands on the [range].</li></ul><h3 id="Tip-31-Repeat-the-Last-Ex-Command">Tip 31: Repeat the Last Ex Command</h3><ul><li>Use <code>@:</code> to execute the last ex command.<ul><li><code>:bnext</code> can jump to the next buffer, but <code>&lt;C-o&gt;</code> can jump to the last<br>position of the cursor so that after using <code>@:</code> you can use it to reverse.</li><li>Also for <code>:bprev</code> and <code>&lt;C-i&gt;</code>.</li></ul></li></ul><h3 id="Tip-32-Tab-Complete-Your-Ex-Commands">Tip 32: Tab-Complete Your Ex Commands</h3><ul><li><code>&lt;C-d&gt;</code> can reveal the list of possible completions.</li></ul><h3 id="Tip-33-Insert-the-Current-Word-at-the-Command-Prompt">Tip 33: Insert the Current Word at the Command Prompt</h3><ul><li><code>\*</code> can find the next match for the word under the cursor.</li><li><code>&lt;C-r&gt;&lt;C-w&gt;</code> can enter the word under the cursor in the command mode.</li></ul><h3 id="Tip-34-Recall-Commands-from-History">Tip 34: Recall Commands from History</h3><ul><li><p><code>&lt;Up&gt;</code> and <code>&lt;Down&gt;</code> can recall history commands.</p></li><li><p><code>&lt;C-p&gt;</code> and <code>&lt;C-n&gt;</code> can also do that.</p><ul><li>But they have a disadvantage.</li><li>When you type <code>:h </code> and use the arrow keystroke, it will filter the commands<br>you can try out.</li></ul></li><li><p>Use map to solve this problem.</p></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;&lt;C-p&gt;&quot;</span>, <span class="string">&quot;&lt;Up&gt;&quot;</span>, &#123; noremap = <span class="literal">true</span> &#125;)</span><br><span class="line">map(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;&lt;C-n&gt;&quot;</span>, <span class="string">&quot;&lt;Down&gt;&quot;</span>, &#123; noremap = <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure><ul><li><p><code>p:</code> can call a window which can list the history of commands, you can use<br><code>&lt;CR&gt;</code> to execute the command under the cursor.</p><ul><li>You can use any command in every mode, such as gather two lines divided by<br><code>|</code> and <code>&lt;CR&gt;</code> to execute.</li></ul></li><li><p><code>p/</code> call a window which list the search history.</p></li><li><p><code>&lt;C-f&gt;</code> in the command mode can do the same as <code>p:</code>.</p></li></ul><h3 id="Tip-35-Run-Commands-in-the-Shell">Tip 35: Run Commands in the Shell</h3><ul><li><p><code>:!&#123;command&#125;</code> execute commands under the terminal</p></li><li><p><code>:read !&#123;command&#125;</code> paste the outputs of commands to this buffer.</p></li><li><p><code>:write !&#123;command&#125;</code> use the content of this buffer as the input of commands.</p><ul><li>Notice: <code>:write! &#123;command&#125;</code> is different from the previous command,<br>see <code>:h write!</code> for help.</li></ul></li><li><p><code>:[range]!&#123;command&#125;</code> can execute commands specially for this [range].</p></li><li><p>See <code>:h !</code> for a convenient shortcut for setting the range.</p></li></ul><h3 id="Tip-36-Run-Multiple-Ex-Commands-as-a-Batch">Tip 36: Run Multiple Ex Commands as a Batch</h3><ul><li><p>You can save a list of commands in a <code>xxx.vim</code>, and use <code>:source xxx.vim</code> to execute it.</p></li><li><p>To files in <code>:args</code>, you can use <code>:argdo source xxx.vim</code> to execute every files.</p></li></ul><h2 id="Chapter-6-Manage-Multiple-Files">Chapter 6: Manage Multiple Files</h2><h3 id="Tip-37-Track-Open-Files-with-the-Buffer-List">Tip 37: Track Open Files with the Buffer List</h3><ul><li><p>When you execute <code>nvim [filename]</code>, the nvim will creat a copy of this file.<br>So what you do is on this copy, you can change the real file when you save it.</p></li><li><p>You can use wildcards to edit files, for instance, <code>nvim \*\.cpp</code></p></li><li><p>Then use <code>:ls</code> to see all buffers,<br>you can see a <code>%a</code> in front of your current buffer’s name.</p></li><li><p><code>:bnext</code> and <code>:bprev</code> can change the current buffer.</p></li><li><p><code>:bfirst</code> and <code>:blast</code> are easy to comprehense.</p></li><li><p><code>&lt;C-6&gt;(&lt;C-^&gt;)</code> can change to the buffer whose name has a <code>#</code> in front of itself.</p></li></ul><h3 id="Tip-38-Group-Buffers-into-a-Collection-with-the-Argument-List">Tip 38: Group Buffers into a Collection with the Argument List</h3><ul><li><code>:args &#123;lists&#125;</code> can add {lists} to populate argument lists.</li><li>Use <code>:args</code> to print the argument list, with the current file in square brackets.</li></ul><ol><li>List every file’s name.</li><li>Use wildcards.</li></ol><ul><li><code>*</code> matches anything, including nothing</li><li><code>**</code> matches anything, including nothing, recurses into directories</li></ul><ol start="3"><li>Use shell commands’ outputs.</li></ol><ul><li><p><code>:args \</code>cat filename.txt``</p></li><li><p>Use arguments list rather than buffers.</p></li></ul><h3 id="Tip-39-Manage-Hidden-Files">Tip 39: Manage Hidden Files</h3><ul><li><p>When a buffer is modified but not saved, <code>:ls</code> will show a <code>+</code> in front of this buffer.</p></li><li><p>The letter before the buffers indicates status, <code>a</code> means active, <code>h</code> means hidden.</p></li><li><p>If a hidden buffer isn’t be saved, quiting vim with <code>:q</code> is not allowed.</p></li><li><p>After seeing the words, vim will load the first unsaved file when you use <code>enter</code>.</p></li><li><p>Use <code>:qa!</code> can quit vim without saving changes.</p></li><li><p><code>:first</code>, <code>:last</code>, <code>:next</code>, <code>:prev</code> can jump to other files in the arguments.</p></li></ul><h3 id="Tip-40-Divide-Your-Workspace-into-Split-Windows">Tip 40: Divide Your Workspace into Split Windows</h3><ul><li><p><code>&lt;C-w&gt;s</code>, <code>&lt;C-w&gt;v</code> can split a new window which has same height or width as the former window.</p><ul><li>The new window will display the same buffer as previous window.<ul><li>You can use <code>:edit &#123;filename&#125;</code> to edit a new file.</li><li>Also you can us <code>:split &#123;filename&#125;</code> or <code>:vsp &#123;filename&#125;</code> instead.</li></ul></li></ul></li><li><p><code>&lt;C-w&gt;w</code> will circle among opened windows.</p></li><li><p><code>&lt;C-w&gt;h/l/j/k</code> will jump to the h/l/j/k window.</p></li><li><p><code>&lt;C-w&gt;c</code> close the current window.</p></li><li><p><code>&lt;C-w&gt;o</code> close other windows.</p></li><li><p><code>&lt;C-w&gt;=</code> equalize width and height of all windows.</p></li><li><p><code>&lt;C-w&gt;_</code> Maximize height of the active window.</p></li><li><p><code>&lt;C-w&gt;|</code> Maximize width of the active window.</p></li><li><p><code>[N]&lt;C-w&gt;_</code> Set active window height to [N] rows.</p></li><li><p><code>[N]&lt;C-w&gt;|</code> Set active window width to [N] rows.</p></li><li><p>You won’t resize windows at most time, so you can use mouse ultimately.</p></li><li><p>See <code>:h window-moving</code> to know more about it.</p></li></ul><h3 id="Tip-41-Organize-Your-Window-Layouts-with-Tab-Pages">Tip 41: Organize Your Window Layouts with Tab Pages</h3><ul><li><p>Tab page can collect lots of windows, so you can open a new tab to do otherthings<br>and you can come back when you want.</p></li><li><p><code>lcd &#123;path&#125;</code> can change working directory locally for the current window.<br>So we can creat a new tab to edit a diffrent project such as your nvim config.</p></li><li><p><code>:windo lcd &#123;path&#125;</code> can change all windows’ directory to {path}.</p></li><li><p><code>&lt;C-w&gt;T</code> can move the current window to a new tab page.</p></li><li><p><code>:tabedit &#123;filename&#125;</code> can edit {filename} in a new tab page.</p></li><li><p><code>:tabclose</code> and <code>:tabonly</code> are similar to <code>&lt;C-w&gt;c</code> and <code>&lt;C-w&gt;o</code>.</p></li></ul><h2 id="Chapter-7-Open-Files-and-Save-Them-to-Disk">Chapter 7: Open Files and Save Them to Disk</h2><h3 id="Tip-42-Open-a-File-by-Its-Filepath-Using-‘-edit’">Tip 42: Open a File by Its Filepath Using ‘:edit’</h3><ul><li><p><code>:pwd</code> can show absolute path of the current file.</p></li><li><p>We can use relative or absolute path after <code>:edit</code>.</p></li><li><p><code>:edit %&lt;Tab&gt;</code> can print absolute path of the current file from the directory<br>which ordered by <code>:lcd</code>.</p></li><li><p><code>:edit %:h&lt;Tab&gt;</code> can print absolute path of the current file’s directory.</p></li></ul><h3 id="Tip-43-Open-a-File-by-Its-Filename-Using-‘-find’">Tip 43: Open a File by Its Filename Using ‘:find’</h3><ul><li><code>find &#123;filename&#125;</code> can search {filename} in path. (Use <code>&lt;Tab&gt;</code> to autocomplete)<ul><li>Path can be set by <code>:set path = &#123;path&#125;,&#123;path&#125;,...</code>.(See <code>:h path</code> for help)</li><li><code>:set path+=&#123;path&#125;</code> can add {path} to the end of the former path.<ul><li><code>:set path=./**</code> so that every files under <code>.</code> will be included.</li></ul></li></ul></li></ul><h3 id="Tip-44-Explore-the-File-System-with-netrw">Tip 44: Explore the File System with netrw</h3><ul><li>If you use <code>NvimTree</code>, <code>netrw</code> is always been banned.</li></ul><h3 id="Tip-45-Save-Files-to-Nonexistent-Directories">Tip 45: Save Files to Nonexistent Directories</h3><ul><li><code>&lt;C-g&gt;</code> can show file’s path and other information.</li><li><code>:!mkdir -p %:h</code> can creat directories so that you can save.</li></ul><h3 id="Tip-46-Save-a-File-as-the-Super-User">Tip 46: Save a File as the Super User</h3><ul><li><code>:w !sudo tee % &gt; &#123;path&#125;</code></li></ul><h2 id="Chapter-8-Navigate-Inside-Files-with-Motions">Chapter 8: Navigate Inside Files with Motions</h2><h3 id="Tip-47-Keep-Your-Fingers-on-the-Home-Row">Tip 47: Keep Your Fingers on the Home Row</h3><ul><li>When you use three or more times <code>h</code>, you should consider how to optimize your operators.</li></ul><h3 id="Tip-48-Distinguish-Between-Real-Lines-and-Display-Lines">Tip 48: Distinguish Between Real Lines and Display Lines</h3><ul><li><code>j</code>, <code>k</code>, <code>l</code>, <code>h</code>, <code>$</code>, <code>^</code>, is used to move on real lines.</li><li><code>gj</code>, <code>gk</code>, <code>gl</code>, <code>gh</code>, <code>g$</code>, <code>g^</code> is used to move on display lines.</li></ul><h3 id="Tip-49-Move-Word-Wise">Tip 49: Move Word-Wise</h3><ul><li>See <code>:h w</code>, <code>:h e</code>, <code>:h b</code>, <code>:h ge</code> for help</li><li>See <code>:h W</code>, <code>:h E</code>, <code>:h B</code>, <code>:h gE</code> for help</li></ul><h3 id="Tip-50-Find-by-Character">Tip 50: Find by Character</h3><ul><li><p>See <code>:h f</code>,<code>:h F</code>,<code>:h t</code>,<code>:h T</code>,<code>:h ,</code>,<code>:h ;</code> for help</p></li><li><p>Always use <code>f/F</code> in the normal mode and <code>t/T</code> under the operator-pending mode.</p></li><li><p>Always find the letter with a low frequency of occurrence, this will make you faster.</p></li></ul><h3 id="Tip-51-Search-to-Navigate">Tip 51: Search to Navigate</h3><ul><li>Use <code>/</code> to find patterns in this file so that you can move quickly.</li><li>Use <code>d/xxx</code> to delete, it won’t delete the first letter of {pattern}, cool.</li></ul><h3 id="Tip-52-Trace-Your-Selection-with-Precision-Text-Objects">Tip 52: Trace Your Selection with Precision Text Objects</h3><ul><li><p>See <code>:h text-objects</code> for help.</p></li><li><p>Vim’s text-objects consist of two letters.</p></li><li><p><code>ib</code> is the same as <code>i(</code>, <code>iB</code> is the same as <code>i&#123;</code>.</p></li></ul><blockquote><p>Text objects are the next level up. If the f{char} and /pattern <CR> commands<br>are like a flying kick to the head, then text objects are like a scissors kick<br>that strikes two targets with a single move.</p></blockquote><p>It’s funny, haha.</p><h3 id="Tip-53-Delete-Around-or-Change-Inside">Tip 53: Delete Around, or Change Inside</h3><ul><li><p>Now we will discuss vim’s text-objects which interact with chunks of text.<br><code>iw</code>, <code>iW</code>, <code>ip</code>, <code>is</code>. A sentense.</p></li><li><p>As usual, <code>d&#123;motion&#125;</code> command tends to work well with <code>aw</code>, <code>as</code> and <code>ap</code>.</p></li><li><p>As usual, <code>c&#123;motion&#125;</code> command tends to work well with <code>iw</code>, <code>is</code> and <code>ip</code>.</p></li></ul><h3 id="Tip-54-Mark-Your-Place-and-Snap-Back-to-It">Tip 54: Mark Your Place and Snap Back to It</h3><ul><li><p><code>m&#123;mark&#125;</code> can set a mark under the cursor.</p></li><li><p><code>'&#123;mark&#125;</code> can jump to the first non-whitespace character of the line which has mark.</p></li><li><p><code>\</code>{mark}` can jump to the marked position.</p></li><li><p><code>Automatic Marks</code> are useful, see <code>h: mark</code> for help.</p></li></ul><h3 id="Tip-55-Jump-Between-Matching-Parentheses">Tip 55: Jump Between Matching Parentheses</h3><ul><li><p><code>%</code> can move between opening and closing pairs of parentheses,<br>ans creat a mark call <code>\``, so you can move back by </code>```.</p></li><li><p>It is recommended to install <code>surround</code> plugin.</p></li></ul><h2 id="Chapter-9-Navigate-Between-Files-with-Jumps">Chapter 9: Navigate Between Files with Jumps</h2><h3 id="Tip-56-Traverse-the-Jump-List">Tip 56: Traverse the Jump List</h3><ul><li><p><code>:jumps</code> can show the jump list, these commands can be seen a jump.</p><ul><li>Changing the active file for the current window.</li><li>Moving directly to a line number.</li><li>Sentense-wise and paragraph-wise motions.</li><li>Jumping to a mark.</li><li>Finding patterns.</li></ul></li><li><p>Use <code>&lt;C-i&gt;</code>, ‘<C-o>’ can jump to the next and previous one in the jump list.</p></li><li><p>Vim can maintain many jump list for each separate window.</p></li><li><p>Note: <code>&lt;C-i&gt;</code> is the same as <code>&lt;Tab&gt;</code>, so if you map <code>&lt;Tab&gt;</code>, <code>&lt;C-i&gt;</code> will also be mapped.</p></li></ul><h3 id="Tip-57-Traverse-the-Change-List">Tip 57: Traverse the Change List</h3><ul><li><p><code>:changes</code> can show the change list.</p><ul><li><code>u</code> and <code>&lt;C-r&gt;</code> can undo and redo.</li><li><code>g;</code> and <code>g,</code> can move the cursor to<br>the previous and next position of changes in the change list.</li></ul></li><li><p>Use mark to jump:</p><ul><li><code>.</code> is the position of last change.</li><li><code>^</code> is the position of the cursor the last time of quitting insert mode.</li></ul></li><li><p><code>gi</code> is the same as <code>'^i</code>.</p></li><li><p>Vim will maintain a change list to every buffer, it is diffrent from the jump list.</p></li></ul><h3 id="Tip-58-Jump-to-the-Filename-Under-the-Cursor">Tip 58: Jump to the Filename Under the Cursor</h3><ul><li><code>gf</code> can jump to the file under the cursor.</li><li><code>:set suffixesadd+=.lua</code> can ask vim to add the suffix to the filename when opening files.</li><li>Combined with <code>:set path</code>, it will be useful.</li></ul><h3 id="Tip-59-Snap-Between-Files-Using-Global-Marks">Tip 59: Snap Between Files Using Global Marks</h3><ul><li><p><code>m&#123;letter&#125;</code> can creat a mark so you can jump back quickly.</p><ul><li>Lowercase letters creat local marks.</li><li>Uppercase letters creat global marks.</li></ul></li><li><p>Remember to mark when you want to use any command that interact with the quickfix list.</p></li></ul><h2 id="Chapter-10-Copy-and-Paste">Chapter 10: Copy and Paste.</h2><h3 id="Tip-60-Delete-Yank-and-Put-with-Vim’s-Unnamed-Register">Tip 60: Delete, Yank, and Put with Vim’s Unnamed Register</h3><ul><li>Transposing Characters: <code>xp</code></li><li>Transposing Lines: <code>ddp</code></li><li>Duplicating Lines: <code>yyp</code></li></ul><h3 id="Tip-61-Grok-Vim’s-Registers">Tip 61: Grok Vim’s Registers</h3><ul><li><p>We can specify which register we want to use by prefixing the command with <code>&quot;&#123;register&#125;</code>.</p><ul><li>Commands can be delete, yank and put.</li></ul></li><li><p>There is a special register called black hole which will truely delete something.</p><ul><li><code>&quot;_d</code> can do that.</li></ul></li><li><p><code>&quot;a</code> is a named register, there are 26 registers to use, they work respectively.</p></li><li><p><code>&quot;&quot;</code> is a unnamed register, which commands set contents of.</p></li><li><p>The Yank Register (&quot;0) is only written when you use <code>y</code>, also the contents will be<br>copied to the register <code>&quot;&quot;</code>.</p></li><li><p><code>&quot;=</code> register is the expression register, when you use it, you will be orderd to<br>type expression under the command mode and it will use the result of your expression.</p></li><li><p>&quot;% Name of the current file</p></li><li><p>&quot;# Name of the alternate file</p></li><li><p>&quot;. Last inserted text</p></li><li><p>&quot;: Last Ex command</p></li><li><p>&quot;/ Last search pattern</p></li></ul><h3 id="Tip-62-Replace-a-Visual-Selection-with-a-Register">Tip 62: Replace a Visual Selection with a Register</h3><ul><li><p>When you are in the visual mode, <code>p</code> is to replace the selection<br>with the contents of the specified register</p></li><li><p>You can change two blocks of text.</p><ul><li>Delete one block, select the other block and <code>p</code>, go back to <code>p</code> one more.</li><li>You can use mark to quickly go back.</li></ul></li></ul><h3 id="Tip-63-Paste-from-a-Register">Tip 63: Paste from a Register</h3><ul><li><p>当你使用 <code>yy</code> 等面向行的操作时, vim 将会创建面向行的寄存器.</p></li><li><p>当你使用面向字符或者单词的操作时, vim 将会创建面向字符的寄存器.</p></li><li><p>面向字符的粘贴: 由于 <code>p</code> 和 <code>P</code> 的区别, 考虑粘贴在光标前后令人烦躁, 故在插入模式下使用 <code>&lt;C-r&gt;0</code>.</p></li><li><p>面向行的粘贴: <code>p</code> 和 <code>P</code> 会把他们粘贴到当前行之前或者之后, 同时光标落在粘贴部分的开头.</p><ul><li><code>gp</code> 和 <code>gP</code> 作用同上, 但是光标会在粘贴部分的末尾</li></ul></li></ul><h3 id="Tip-64-与系统剪贴板交互">Tip 64: 与系统剪贴板交互</h3><ul><li>请使用 <code>&quot;+</code> 寄存器来与系统剪贴板进行交互.</li></ul><h2 id="Chapter-10-宏">Chapter 10: 宏</h2><h1>起步</h1><ul><li><p><code>:q</code> 退出, <code>:q!</code> 不保存强制退出</p></li><li><p><code>:w</code> 保存, <code>:w file.txt</code> 保存新建的文件并命名</p></li><li><p><code>:h</code> 帮助, <code>:h write-quit</code> 查看特定命令的帮助</p></li><li><p><code>nvim file.txt</code> 打开文件, <code>nvim file1.txt file2.txt file3.txt</code></p></li></ul><blockquote><p>nvim 在不同 <code>buffer</code> 中打开文件</p></blockquote><ul><li><code>nvim --version</code> 查看版本, <code>:version</code> 在 <code>vim</code> 内查看版本</li><li><code>nvim +&#123;cmd&#125; file.txt</code> 打开文件后立即执行 <code>&#123;cmd&#125;</code></li></ul><blockquote><p>可使用 <code>nvim +&#123;cmd1&#125; +&#123;cmd2&#125; file.txt</code> 执行多个命令<br><code>nvim -c &#123;cmd&#125;</code> 也有相同效果</p></blockquote><ul><li><p><code>nvim -o2</code> 打开两个水平分隔窗口</p></li><li><p><code>nvim -o5 file1.txt file2.txt</code> 五个水平分隔的窗口并在前两个显示 <code>file1.txt</code> 和 <code>file2.txt</code></p></li><li><p><code>nvim -O2</code> 打开两个垂直分隔窗口</p></li><li><p><code>&lt;C-z&gt;</code> 用来挂起 <code>nvim</code>, 使用 <code>fg</code> 返回 <code>nvim</code></p></li></ul><blockquote><p><code>:suspend</code> 和 <code>:stop</code> 和 <code>&lt;C-z&gt;</code> 有相同效果</p></blockquote><h1>Buffers</h1><ul><li><code>:buffers</code> 查看所有 <code>buffer</code></li></ul><blockquote><p><code>:ls</code> 和 <code>:files</code> 有相同作用</p></blockquote><ul><li><p><code>:bn</code> 跳转到下一个 <code>buffer</code>, <code>:bp</code> 跳转到上一个 <code>buffer</code></p></li><li><p><code>:b &lt;filename&gt;</code> 跳转到特定文件, <code>:b n</code> 跳转到第n个 <code>buffer</code></p></li><li><p><code>&lt;C-o&gt;</code> 跳转到跳转列表中旧位置, <code>&lt;C-i&gt;</code> 跳转到跳转列表新位置, <code>&lt;C-^&gt;</code> 跳转到先前编辑的 <code>buffer</code></p></li><li><p><code>:bd</code> 删除当前 <code>buffer</code>, <code>:bd n</code>, <code>:bd &lt;filename&gt;</code> 删除特定 <code>buffer</code></p></li><li><p><code>:qa</code> 退出全部 <code>buffer</code>, <code>:wa</code> 保存所有 <code>buffer</code>, <code>:qa!</code> 强制退出所有 <code>buffer</code></p></li></ul><h1>Windows</h1><ul><li><code>:sp &lt;filename&gt;</code> 水平分割窗口, 并在新窗口打开文件</li></ul><blockquote><p><code>&lt;C-w&gt; s</code> 打开一个水平分割的窗口</p></blockquote><ul><li><code>:vsp &lt;filename&gt;</code> 垂直分割窗口, 并在新窗口打开文件</li></ul><blockquote><p><code>&lt;C-w&gt; v</code> 打开一个垂直分割的窗口</p></blockquote><ul><li><p><code>:new &lt;filename&gt;</code> 创建新窗口并打开文件</p></li><li><p><code>&lt;C-w&gt;j</code> 移动到下方窗口, <code>hkl</code> 同理</p></li><li><p><code>:buffer &lt;buffername&gt;</code> 使当前窗口显示此 <code>buffer</code></p></li><li><p><code>:q</code> 关闭当前窗口, <code>&lt;C-w&gt; c</code> 关闭当前窗口, <code>&lt;C-w&gt; o</code> 关闭除当前窗口的其他窗口</p></li></ul><h1>Tabs</h1><ul><li><code>:tabnew &lt;filename&gt;</code> 新 <code>tab</code></li><li><code>:tabclose</code> 关闭 <code>tab</code></li><li><code>:tabnext</code> 下一个, <code>:tabprevious</code> 上一个, <code>:tablast</code> 最后一个, <code>:tabfirst</code> 第一个</li><li><code>nvim -p file1.txt file2.txt file3.txt</code> 在多个 <code>tab</code> 中打开文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learn Git &amp; GitHub</title>
      <link href="/2023/01/07/LearnGitGithub/"/>
      <url>/2023/01/07/LearnGitGithub/</url>
      
        <content type="html"><![CDATA[<p>A note about learning Git.</p><span id="more"></span><h1>Git</h1><p>Git is a popular version control system.</p><h2 id="Get-started">Get started</h2><h3 id="Install">Install</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add-apt-repository ppa:git-core/ppa</span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h3 id="Check-the-Git-version">Check the Git version</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><h3 id="Configure-git">Configure git</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><blockquote><p>Note: <code>--global</code> will set the name and email for every repository on this computer.<br>You can remove <code>--global</code> to set the information just for this repository.</p></blockquote><h3 id="Create-a-git-folder">Create a git folder</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir myproject</span><br><span class="line">cd myproject</span><br></pre></td></tr></table></figure><h3 id="Initialize-git">Initialize git</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><blockquote><p>Note: Git creates a hidden folder called .git in the root directory of the repository to keep track of changes.</p></blockquote><h2 id="Add-new-files-to-git">Add new files to git</h2><ul><li>First, create a new file.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>Now git is aware of the file, but has not added it to our repository.</p><ul><li>Tracked: files have been added to your repository.</li><li>Untracked: files that are in your working directory, but not added to your repository.</li></ul><p><code>git status --short</code> can display the changes in a more compact way.</p><blockquote><p><code>??</code> Untracked files.<br><code>A</code> Files add to stage.<br><code>M</code> Modified files.<br><code>D</code> Deleted files.</p></blockquote><p>Use <code>git diff &lt;filename&gt;</code> to show the differences.</p><h2 id="Git-staging-environment">Git staging environment</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt;</span><br><span class="line">git status</span><br></pre></td></tr></table></figure><p>Use <code>git add -a</code> to add all files.</p><h2 id="Git-commit">Git commit</h2><p><code>git commit -m &quot;&lt;message&gt;&quot;</code></p><ul><li>Use <code>git commit -a -m &quot;&lt;message&gt;&quot;</code> to commit without stage(don’t recommend).</li><li>Use <code>git log</code> to view the historu of commits.</li></ul><h2 id="Git-help">Git help</h2><ul><li><code>git commit --help</code> – See all the available options for the specific command.<ul><li>Use <code>--help</code> to open the relevant Git manual page.</li></ul></li><li><code>git help --all</code> – See all possible commands.<ul><li><code>SHIFT + g</code> to the end of the list, <code>q</code> to exit.</li></ul></li></ul><h2 id="Git-branch">Git branch</h2><p>A branch is a new version of the main repository’s codebase.</p><p>To add some new features to the <code>firstfile.cpp</code>, create a new branch.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch newbranch</span><br></pre></td></tr></table></figure><p><code>git branch</code> can display all the branches.</p><p><code>git checkout newbranch</code> can move our current workspace from the main branch to the new branch.</p><blockquote><p><code>git checkout -b newbranch</code> will create a new branch and move to it if it doesn’t exist.</p></blockquote><p>Make some changes to a file and add a new file.</p><p><code>git status</code> – To check the status of the current branch.</p><p><code>git add --all</code> – Add files to the staging environment.</p><p>Now, <code>git checkout main</code> and <code>ls</code>, you’ll find that the file created just now is no longer exist.</p><h2 id="Emergency-branch">Emergency branch</h2><p>Imagine you are not yet done with the new branch, but we need to fix an error on main.</p><p>We can create a new branch called <code>bugFix</code> to deal with it without messing the two branches.</p><p>Make some changes, <code>git add</code> and <code>git commit</code>, now we should merge two branches.</p><h2 id="Git-merge">Git merge</h2><h3 id="Merge-branches">Merge branches</h3><p>Now <code>git checkout main</code> and <code>git merge bugFix</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge bugFix</span><br></pre></td></tr></table></figure><p>After merging, this branch is useless, so we want to delete it.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d bugFix</span><br></pre></td></tr></table></figure><h3 id="Merge-conflicts">Merge conflicts</h3><p>Now we return to our newbranch to finish our work, make some changes to the <code>firstfile.cpp</code>.</p><p>Then <code>git checkout main</code> and <code>git merge newbranch</code> to apply new changes.</p><p>We failed, then use <code>git status</code> to check the status.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Unmerged paths:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)</span><br><span class="line">        both modified:   firstfile.cpp</span><br></pre></td></tr></table></figure><p>Open the <code>firstfile.cpp</code> you’ll find there’s something new.</p><p>Adjust the file to what you want, then git add and git commit -m “merged changes”.</p><p>Delete the <code>newbranch</code>, then finish this part of work.</p><h1>Git and Github</h1><h2 id="Get-started-2">Get started</h2><p>Go to Github to sign up for an account and creat a new repository.</p><blockquote><p>Remember to use the same e-mail adress you used in the git config.</p></blockquote><h3 id="Push-local-repository-to-GitHub">Push local repository to GitHub</h3><p>Copy the link of the repository paste the following command.</p><p>Search for how to configure ssh.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:lzlcs/learngit.git</span><br></pre></td></tr></table></figure><p>Now, push out main branch to the origin url, and set it as the default remote branch.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin main</span><br></pre></td></tr></table></figure><blockquote><p><code>-u</code> is the same as <code>--set-upstream</code>.</p></blockquote><h2 id="Edit-files-in-Github">Edit files in Github</h2><p>It’s simple, follow the instructions.</p><h2 id="Git-pull-from-github">Git pull from github</h2><p>Use <code>pull</code> to get the most recent changes to your local copy.<br><code>pull</code> is a combination of 2 different commands: <code>fetch</code> and <code>merge</code>.</p><h3 id="Git-fetch">Git fetch</h3><p><code>fetch</code> gets all the change history of a tracked branch.<br>Now check our <code>status</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">On branch main</span><br><span class="line">Your branch is behind &#x27;origin/main&#x27; by 1 commit, and can be fast-forwarded.</span><br><span class="line">  (use &quot;git pull&quot; to update your local branch)</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><p>We are behind the <code>origin/main</code> by 1 <code>commit</code>, let’s double check by viewing the <code>log</code>.<br>Also use <code>git diff</code> to show the differences between our local <code>main</code> and <code>origin/main</code>.</p><p>So we can safely <code>merge</code>.</p><h3 id="Git-merge-2">Git merge</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git merge origin/main</span><br><span class="line">git status</span><br></pre></td></tr></table></figure><p>Everything is done.</p><h3 id="Git-pull">Git pull</h3><p>Make another change to the <code>README.md</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin</span><br></pre></td></tr></table></figure><h2 id="Push-to-Github">Push to Github</h2><p>Try making some changes to our local git and pushing them to Github.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;xxxx&quot;</span><br><span class="line">git push origin</span><br><span class="line">git status</span><br></pre></td></tr></table></figure><p>Go to Github to confirm that the repository has a new commmit.</p><h2 id="Github-branch">Github branch</h2><p>Create a branch <code>beta</code> on Github and make some changes.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git pull origin</span><br><span class="line">git status</span><br><span class="line">git branch -a</span><br></pre></td></tr></table></figure><blockquote><p>Use <code>git branch -a</code> to show all local and remote branches.<br>Use <code>git branch -r</code> to show remote branches only.</p></blockquote><p><code>git checkout beta</code> and <code>git pull</code> to check if it is all up to date.</p><p>Now you can see the changes you made recently on branch <code>beta</code>.</p><h2 id="Push-a-branch-to-Github">Push a branch to Github</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b branch2</span><br></pre></td></tr></table></figure><p>Make some changes.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git add </span><br><span class="line">git commit -m &quot;...&quot;</span><br><span class="line">git push origin branch2</span><br></pre></td></tr></table></figure><p>In Github, we can see the changes and merge them into the branch <code>master</code> if we approve it.</p><h2 id="Github-flow">Github flow</h2><ol><li>Create a new branch</li><li>Make changes and add commits</li><li>Open a pull request</li><li>Review</li><li>Deploy</li><li>Merge</li></ol><h3 id="Create-a-new-branch">Create a new branch</h3><p>If you want to try something new, you create a new branch.<br>Branching gives you an environment where you can make changes without affecting the main branch.</p><p>When you make a new branch, you will always want to make it from the main branch.</p><blockquote><p>Using descriptive names for new branches, so everyone can understand what is happening.</p></blockquote><h3 id="Make-changes-and-add-commits">Make changes and add commits</h3><p>When you reach a small milestone, add the changes into your branch by commit.</p><blockquote><p>Commit message are very important.</p></blockquote><h3 id="Open-a-pull-request">Open a pull request</h3><p>A Pull Request notifies people you have changes ready for them to consider or review.</p><h3 id="Review">Review</h3><p>When a Pull Request is made, it can be reviewed by whoever has the proper access to the branch.</p><h3 id="Deploy">Deploy</h3><p>GitHub allows you to deploy from a branch for final testing in production before merging with the master branch.</p><h3 id="Merge">Merge</h3><p>After exhaustive testing, you can merge the code into the master branch!</p><h1>Git contribute</h1><h2 id="Github-fork">Github fork</h2><h3 id="Fork-a-repository">Fork a repository</h3><p>Click the <code>fork</code>.</p><h2 id="Git-clone">Git clone</h2><h3 id="Clone-a-fork-from-Github">Clone a fork from Github</h3><p><strong>Move back to the origin repository.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone ....</span><br><span class="line">cd ....</span><br><span class="line">git status</span><br><span class="line">git log</span><br><span class="line">git remote -v </span><br></pre></td></tr></table></figure><p>Raname: <code>git remote rename origin upstream</code>.</p><p>Then fetch the URL of our own fork: <code>git remote add origin ...</code></p><ul><li>origin: we can read and write.</li><li>upstream wo can read only.</li></ul><h2 id="Github-send-pull-request">Github send pull request</h2><p>Make some changes.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;&quot;</span><br><span class="line">git push origin</span><br></pre></td></tr></table></figure><p>Now go to Github and pull request.</p><h2 id="Git-ignore">Git ignore</h2><p>When sharing your code with others, there are often files or parts of your project, you do not want to share.</p><h3 id="Create-gitignore">Create .gitignore</h3><p><code>touch .gitignore</code></p><blockquote><p>It is also possible to have additional .gitignore files in subdirectories.<br>These only apply to files or folders within that directory.</p></blockquote><h2 id="Git-security">Git security</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;...@...com&quot;</span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>Add ssh to Github.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">git remote set-url remote-name git@github.com:username/repository.git</span><br></pre></td></tr></table></figure><h1>Git undo</h1><h2 id="Git-revert">Git revert</h2><p>When we want to take a previous commit and add it as a new commit, keeping the log intact.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline</span><br><span class="line">git revert HEAD --no-edit</span><br></pre></td></tr></table></figure><p>Use <code>--no-edit</code> to skip the commit message editor (getting the default revert message).</p><h2 id="Git-reset">Git reset</h2><ul><li>Use <code>git log --pretty=oneline</code> to show the commit history.</li><li>Use <code>git reset --hard HEAD^</code> to be the last version.<ul><li><code>HEAD</code> is the current version, <code>HEAD^</code> is the previous version.</li><li><code>HEAD~n</code> is the previous n version</li></ul></li><li>Use <code>git reflog</code> to show your commands, you can find the version number to estoppel.</li></ul><h2 id="Git-amend">Git amend</h2><p>commit --amend is used to modify the most recent commit.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;Adding plines to reddme&quot;</span><br><span class="line">git commit --amend -m &quot;Added lines to README.md&quot;</span><br></pre></td></tr></table></figure><blockquote><p>You should avoid making changes that rewrite history to remote repositories,<br>especially if others are working with them.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UseFul Websites</title>
      <link href="/2023/01/01/UseFullWebsites/"/>
      <url>/2023/01/01/UseFullWebsites/</url>
      
        <content type="html"><![CDATA[<h1>Cheat Sheet</h1><p><a href="https://atts.w3cschool.cn/attachments/image/20191225/1577243564858376.png">Git Cheat Sheet</a><br><a href="https://vim.rtorr.com/lang/zh_cn">Vim Cheat Sheet</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/25/hello-world/"/>
      <url>/2022/10/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
