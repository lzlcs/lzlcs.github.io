<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Pintos Project 1</title>
      <link href="/2023/09/25/1pintos/"/>
      <url>/2023/09/25/1pintos/</url>
      
        <content type="html"><![CDATA[<h1>Part I: Alarm Clock</h1><p><strong>开关中断来保证操作的原子性</strong></p><p>以 <code>timer.c</code> 中 <code>timer_ticks()</code> 函数举例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int64_t</span> <span class="title function_">timer_ticks</span> <span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">intr_level</span> <span class="title">old_level</span> =</span> intr_disable ();</span><br><span class="line">    <span class="type">int64_t</span> t = ticks;</span><br><span class="line">    intr_set_level (old_level);</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用链中一些关键函数</p><ol><li><code>intr_disable()</code><ul><li>保存之前的中断状态</li><li>使用汇编关中断</li></ul></li><li><code>intr_enable()</code><ul><li>保存之前的中断状态</li><li>使用汇编开中断</li></ul></li><li><code>intr_get_level()</code><ul><li>把表示是否中断的寄存器 <code>flag</code> 压栈, 再弹出到 <code>flags</code> 变量中</li><li>根据 <code>flag</code> 值获得 当前中断的状态: 是否开启</li></ul></li><li><code>intr_set_level()</code><ul><li>调用 <code>intr_disable()</code> 和 <code>intr_enable()</code></li></ul></li><li><code>intr_context()</code>: 返回是否是外中断(I/O 等)</li></ol><p><code>timer_ticks</code> 中先关闭中断, 获取 <code>ticks</code> 值, 最后把中断设置成初始状态</p><p><strong>进程状态的转换</strong></p><ol><li>运行态 至 阻塞态: <code>thread_block()</code></li><li>阻塞态 至 就绪态: <code>thread_unblock()</code></li><li>运行态 至 就绪态: <code>thread_yield()</code></li><li>就绪态 至 运行态: 需要 <code>schedule()</code> 函数调度</li></ol><p><strong>时钟中断的处理</strong></p><p>在 <code>timer_interrupt</code> 函数中</p><ul><li><code>ticks++</code> 记录系统时间片</li><li>调用 <code>thread_tick</code> 记录进程的时间片 <br>如果当前进程使用的时间片超出限制 <br>那么当中断处理结束的时候把该进程放入就绪队列</li></ul><p><strong>最初 <code>timer_sleep</code> 中的 忙等 实现</strong></p><p>在间隔时间未到 形参 <code>ticks</code> 的情况下不断执行 <code>thread_yield()</code> 函数</p><p>实际的运行结果就是 在时间到达 <code>ticks</code> 的情况下, 该进程处在就绪状态即可</p><h2 id="实现思路">实现思路</h2><p>在执行 <code>timer_sleep</code> 的时候, 把当前进程阻塞 <br>在进程结构体中使用 <code>blocked_ticks</code> 变量记录剩余阻塞的 <code>ticks</code></p><p>每次处理时钟中断的时候, 使用 <code>thread_foreach</code> 函数遍历每个进程并检测 <code>blocked_ticks</code> 值</p><ol><li><code>thread.h</code> 中</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thread</span></span></span><br><span class="line"><span class="class"> &#123;</span></span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">   <span class="type">uint32_t</span> blocked_ticks;</span><br><span class="line">   <span class="comment">/* Owned by thread.c. */</span></span><br><span class="line">   <span class="type">unsigned</span> magic;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>thread.c</code> 中, <code>blocked_ticks</code> 值初始化为 0</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">init_thread</span><span class="params">(<span class="keyword">struct</span> thread *t, <span class="type">const</span> <span class="type">char</span> *name, <span class="type">int</span> priority)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  t-&gt;blocked_ticks = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>timer.c</code> 中</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">timer_sleep</span><span class="params">(<span class="type">int64_t</span> ticks)</span></span><br><span class="line">&#123;  </span><br><span class="line">  <span class="comment">// 测试点 alarm-zero, alarm-negative</span></span><br><span class="line">  <span class="comment">// 注意对数据进行边界检查</span></span><br><span class="line">  <span class="keyword">if</span> (ticks &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">int64_t</span> start = timer_ticks();</span><br><span class="line"></span><br><span class="line">  ASSERT(intr_get_level() == INTR_ON);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 保证操作的原子性</span></span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">intr_level</span> <span class="title">old_level</span> =</span> intr_disable();</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">thread</span>* <span class="title">t</span> =</span> thread_current();</span><br><span class="line">  t-&gt;blocked_ticks = ticks;</span><br><span class="line">  thread_block();</span><br><span class="line"></span><br><span class="line">  intr_set_level(old_level);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">timer_interrupt</span><span class="params">(<span class="keyword">struct</span> intr_frame *args UNUSED)</span></span><br><span class="line">&#123;</span><br><span class="line">  ticks++;</span><br><span class="line">  thread_tick();</span><br><span class="line">  thread_foreach(thread_check_blocked, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>在 <code>thread.h</code> 中声明,  <code>thread.c</code> 中实现 <code>thread_check_blocked</code></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">thread_check_blocked</span><span class="params">(<span class="keyword">struct</span> thread* t, <span class="type">void</span> *aux)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">thread_check_blocked</span><span class="params">(<span class="keyword">struct</span> thread*t, <span class="type">void</span> *aux)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (t-&gt;status == THREAD_BLOCKED &amp;&amp; t-&gt;blocked_ticks &gt; <span class="number">0</span>) </span><br><span class="line">  &#123;</span><br><span class="line">    t-&gt;blocked_ticks--;</span><br><span class="line">    <span class="keyword">if</span> (t-&gt;blocked_ticks == <span class="number">0</span>) </span><br><span class="line">      thread_unblock(t);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Labs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> OS </tag>
            
            <tag> Lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2023/09/16/internet/"/>
      <url>/2023/09/16/internet/</url>
      
        <content type="html"><![CDATA[<h1>Chapter 1</h1><h2 id="因特网概述">因特网概述</h2><ol><li>若干节点和链路互联形成网络</li><li>若干网络通过路由器互联形成互联网</li><li>因特网是世界上最大的互联网</li></ol><p><code>Internet Service Provider</code> 因特网服务提供者, 如电信移动联通 <br>用户先接入 <code>ISP</code> 之后再接入因特网</p><p><strong>因特网的组成</strong></p><ol><li>边缘部分: 用户直接使用的主机, 进行通信和资源共享</li><li>核心部分: 大量网络和路由器组成, 提供连通性和交换</li></ol><p><strong>三种交换方式</strong></p><ol><li>电路交换:<ul><li>建立连接</li><li>通话</li><li>释放连接</li></ul></li><li>报文交换:<ul><li>把要传输的数据(报文)整个发送出去</li></ul></li><li>分组交换:<ul><li>报文分组之后加上首部</li><li>分别通过路由器网络发送到目标位置</li><li>组合各组成为完整报文</li></ul></li></ol><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.7fkr0a82w8w0.png" alt=""></p><p><strong>性能指标</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.76c1gair1ps0.webp" alt=""></p><ol><li>速率: <code>bps</code>: 表示数据传送的速率 <code>min(主机接口速率, 线路带宽, 路由器接口速率)</code><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.622gbg6uucg0.webp" alt=""></li><li>带宽: <code>bps</code>: 表示数据传送的能力</li><li>吞吐量: 单位时间内通过某个网络或接口的实际数据量</li><li>时延: 数据传送耗费的时间<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.2pb9mo6nd9u0.webp" alt=""></li><li>时延带宽积: $传播时延 \times 带宽$<ul><li>发送的第一个比特到达终点时, 发送端已经发送了 时延带宽积 个比特</li></ul></li><li>往返时间 <code>(RTT)</code></li><li>利用率: 利用率越高, 时延越高<ul><li>信道利用率: 某个信道有数据通过的时间占比</li><li>网络利用率: 网络中所有信道的利用率加权平均</li></ul></li><li>丢包率: 一定时间内丢失的分组数量比全部分组数量<ul><li>传输过程中出现误码</li><li>到达的分组交换机队列已满</li></ul></li></ol><h2 id="计算机网络体系结构">计算机网络体系结构</h2><p><strong>常见的结构</strong></p><p><code>TCP/IP</code>: 网络接口层, 网际层, 运输层, 应用层 <br>原理体系结构(用于教学): 物理层, 数据链路层, 网络层, 运输层, 应用层</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.ap3xsleznq0.png" alt=""></p><p><strong>术语</strong></p><ol><li>实体: 任何可发送或可接收信息的硬件或软件进程 <br>对等实体: 收发双方相同层次的实体</li><li>协议: 控制两个对等实体进行逻辑通信的规则的集合<ul><li>语法: 定义所交换信息的格式</li><li>语义: 定义接收双方所要完成的操作</li><li>同步: 定义收发双方的时序关系<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5kwzh7x7wro0.png" alt=""></li></ul></li><li>服务: 两个对等实体之间的协议使得他们能向上一层提供服务</li></ol><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3nfltb1mk460.webp" alt=""></p><h1>物理层</h1><p><strong>传输媒体</strong></p><ol><li>导引型传输媒体: 同轴电缆, 双绞线, 光纤, 电力线</li><li>非导引型传输媒体: 无线电波, 微波, 红外线, 可见光</li></ol><p><strong>传输方式</strong></p><p>串行, 并行 <br>同步, 异步 <br>单工, 半双工, 全双工</p><p><strong>编码和调制</strong></p><p>编码:<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.39viprf3a4u0.webp" alt=""><br>调制:<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6ggh08kbc1k0.webp" alt=""></p><p><strong>信道的极限容量</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.31p7lezchzu0.webp" alt=""></p><p><strong>信道复用技术</strong></p><ol><li>频分复用: 子信道占据一定频带, 频带之间有隔离频带</li><li>时分复用: 类似 CPU 并行</li><li>波分复用: 光的频分复用</li><li>码分复用: 谁发乘谁</li></ol><h1>链路层</h1><p>数据链路层向上层提供的服务模型</p><ol><li>不可靠传输服务: 丢弃有误码的帧</li><li>可靠传输服务: 实现准确的信息传送 (不局限于链路层)</li></ol><p><strong>封装成帧</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6t9vhndrirg0.webp" alt=""></p><p><strong>透明传输</strong></p><p>透明传输对上层传下来的数据没有任何要求</p><p>面向字节的物理链路: 字节填充<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1zzorbcw6a2o.webp" alt=""><br>面向比特的物理链路: 比特填充<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.50y01r0rz2o0.webp" alt=""></p><p>最大传送单元 (MTU): 帧的数据部分的长度上限</p><p><strong>差错检验</strong></p><ol><li>奇偶校验: 添加一位奇偶校验码, 但是在偶数个位出错的时候会漏检</li><li>循环冗余校验(CRC): <a href="https://www.bilibili.com/video/BV1NT411g7n6?p=20">视频</a></li></ol><p><strong>可靠传输</strong></p><ol><li>停止等待协议<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3bsjjwyu57c0.webp" alt=""></li><li>回退 N 帧协议<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5c5wfavh0rk0.webp" alt=""></li><li>选择重传协议<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.76k0knf06ko0.png" alt=""></li></ol><p><strong>点对点协议 PPP</strong></p><ol><li>帧格式<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.38e5hht4mrg0.webp" alt=""></li><li>透明传输<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.2jzk39pf2gy0.png" alt=""><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.7c7fxkefow80.webp" alt=""></li></ol><p><strong>网络适配器(网卡)</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.2zgynsooagw0.webp" alt=""></p><p><strong><code>MAC</code>地址</strong></p><p>以太网卡用于接入有限局域网 <br>WiFi 网卡用于接入无限局域网</p><p>MAC 地址是对网络上各接口的唯一标识</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.wbgtpas4lgg.webp" alt="image"></p><p>网卡从网络中接收的每一个帧, 检查帧首部的 MAC 地址</p><ol><li>广播地址 (<code>FF-FF-FF-FF-FF-FF</code>), 接收帧</li><li>网卡支持的多播地址, 接收帧</li><li>网卡的全球单播 MAC 地址与之符合: 接收帧</li></ol><p>混合模式: 不管 MAC 地址是什么, 都接收帧</p><p><strong>CSMA/CD 协议</strong></p><p>共享式以太网使用</p><p>载波监听多址接入/碰撞检测</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6o5964bv2j80.webp" alt="image"></p><p>不能进行全双工通信, 只能进行半双工通信<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.613hy4rquq00.png" alt="image"></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.32xbmelxuii0.webp" alt="image"></p><p>使用集线器连线可以形成星型网络</p><p><strong>网桥</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.2hhyerfyi5w0.webp" alt="image"></p><p>自学习和转发流程<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4esn18mt7eg0.png" alt="image"></p><p>生成树协议 STP</p><p>多个透明网桥来提供冗余链路</p><p>为防止回路, 网桥之间产生生成树, 当出现故障的时候就会重新生成生成树</p><p><strong>交换式以太网</strong></p><p>仅使用交换机的以太网就是交互式以太网</p><p>交换机的接口连接交换机或计算机的时候, 可以使用全双工工作方式</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.7240fgicbhs0.webp" alt="image"></p><p>交换机的接口连接集线器的时候, 只能使用 CSMA/CD 协议工作在半双工模式</p><p>一般的交换机使用存储转发, 有一些交换机使用直接转发</p><p>直接转发:</p><ol><li>时延很小</li><li>不检查纠错码将帧转发出去</li></ol><p><strong>共享式以太网和交换式以太网区别</strong></p><p>交换机每个端口连接的网络 构成一个独立的冲突域 <br>交换机互联的工作站构成一个整体的广播域</p><p>集线器互联的工作站构成整体的广播域和冲突域<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3h73vzop7gi0.webp" alt="image"></p><p><strong>虚拟局域网 <code>VLAN</code></strong></p><p>交换式以太网的巨大广播域会产生一些问题: 广播风暴</p><p>以太网交换机进行配置之后, 把一些接口分配 PVID 形成局域网 <br>广播的时候交换机把传入的数据打上标签, 然后传出的时候再去标签<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5xzg2oy1cyw0.webp" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.7bz9pzovpm40.webp" alt="image"></p><p><strong>无限局域网 <code>WLAN</code></strong></p><ol><li>有固定基础设施的无线局域网</li><li>无固定基础设施的无限局域网</li></ol><p>固定基础设施是预先建立的多个固定的通讯基站</p><p>无线局域网的最小构件是 基本服务集 BSS, 每个 BSS 有一个接入点 AP <br>每个 AP 在安装的时候会被分配一个 唯一的服务器标识符 SSID</p><p>每个 AP 可以连接到 分配系统 DS, 从而和其他的 BSS 连接从而构成扩展服务集 ESS</p><p>主机从一个服务集漫游到另一个服务集的时候, 仍然可以保持和其他主机的连接 <br>区别是使用的 AP 不同</p><ol><li>关联服务 <br>移动站和接入点 AP 建立关联的办法有两种<ul><li>被动扫描: 被动等待 AP 传来的信标帧<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4jd2ouqauly0.webp" alt="image"></li><li>主动扫描: 向 AP 传探测请求帧, 收到探测相应帧</li></ul></li><li>重建关联服务和分离服务: 更换连接的 AP 和 终止连接 AP 的时候使用</li></ol><p>无固定基础设施的无线局域网主要是依靠连接在网络里的节点转发 <br>因此每个节点都要有路由功能</p><p>自组织网络内部有特定的路由选择协议, 整个内部网络通过网关(协议转换器)连接到因特网</p><p>无线局域网使用很多种物理协议 <br>数据链路层使用 CSMA/CA 协议<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3ee6kep6zmy0.webp" alt="image"></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6118f48nv600.webp" alt="image"></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3q84ygcfk1c0.webp" alt="image"></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3wm8xi4s6te0.webp" alt="image"></p><p>MAC 帧</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5q9z3jo6p2c0.webp" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4vl0ffdd8x40.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1zvjvq2gkadc.webp" alt="image"></p><h1>网络层</h1><p>将分组通过源主机经过多个网络和多端链路传输到目的主机 <br>功能包括分组转发和路由选择</p><p>网络层面向上层提供的两种服务</p><ol><li>面向连接的虚电路服务<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6oyzo56um540.png" alt="image"></li><li>无连接的数据报服务<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.456qhlftm7w0.webp" alt="image"></li></ol><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4s2okmqofso0.webp" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.76lzgu70s3s0.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.ka84kd1c3k0.webp" alt="image"></p><p>划分子网来缓解 IP 地址被大量浪费的问题</p><p>无分类方式易于实现路由聚合<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1q3n3wqf3dxc.png" alt="image"></p><p><strong>IP 地址和 MAC 地址</strong></p><p>在数据包的传送过程中, IP 地址不改变, MAC 地址改变</p><p>如果只使用 MAC 地址通信:</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1kbhlqsy2cow.webp" alt="image"></p><p>使用 地址解析协议 ARP 来通过 IP 地址找到相应的 MAC 地址</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.7dvsu3kb4bo0.webp" alt="image"></p><p><strong>静态路由配置</strong></p><ol><li>设置默认路由: <code>xxx.xxx.xxx.xxx/0</code></li><li>设置特定主机路由: <code>xxx.xxx.xxx.xxx/32</code></li></ol><p>由于最长前缀匹配的原因, 特定主机路由优先级最高, 默认路由优先级最低</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3lasy0kjsvc0.webp" alt="image"></p><p><strong>动态路由配置</strong></p><ol><li>RIP</li></ol><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5mpksydlz680.webp" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.21t9j568tmqo.webp" alt="image"></p><ol start="2"><li>OSPF</li></ol><p>链路状态: 本路由器和哪些路由器相邻, 以及相应链路的代价<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3ki5fp1oi680.png" alt="image"></p><p>防止邻居表中路由器太多, 选定指定路由器 DR 和备用指定路由器 BDR <br>其他的路由器只与 DR 和 BDR 建立邻居关系, 并通过他们交换信息</p><ol start="3"><li>BDP</li></ol><p>每个 AS 都会有至少一个 BGP 发言人</p><p>不同 AS 之间通过 BGP 发言人通信, BGP 发言人决定网络内部的较优路线</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6ewn5qlyi5s0.png" alt="image"></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5gwxkqsl8zs0.webp" alt="image"></p><p><strong>路由器</strong></p><p>路由器是有多个输入输出端口, 进行转发分组的专用计算机</p><p><strong>ICMP</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4t2th9hzqo00.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4annwamt7ty0.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1sky5l8ui0m8.webp" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.72ohq7d3pi40.png" alt="image"></p><p>典型应用</p><ol><li>ping</li><li>跟踪路由<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.zbrzzl444wg.png" alt="image"></li></ol><p><strong>虚拟专用网</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6nzxr7swjh80.png" alt="image"></p><p><strong>NAT</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6kuzzajnlrk0.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4dlt369n8ow0.png" alt="image"></p><p><strong>IP 多播</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5yt6kpu6si80.png" alt="image"></p><p>局域网多播: 有五位 无法映射到 MAC 地址, 所以需要软件过滤以下 <br>因特网 IP 多播: 使用 <code>IGMP</code> 和 多播路由选择协议</p><p><strong>IGMP</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.2sm435r2y340.png" alt="image"></p><p><strong>多播路由选择协议</strong></p><ol><li>RPM 算法: 先用 RPB 建立广播树, 然后剔除非成员路由器</li><li>组共享多播路由选择:<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.79nkq1n84xo0.png" alt="image"></li></ol><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6be47q3vqho0.png" alt="image"></p><p><strong>IPV6</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5ubsszsajsw0.webp" alt="image"></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.t1b6hgebmr4.webp" alt="image"></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4xcirgi77zw0.png" alt="image"></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.13ng6dbmw0tc.webp" alt="image"></p><p>从 IPV4 过渡到 IPV6</p><ol><li>双协议栈, 同时使用 IPV4 和 IPV6 协议栈</li><li>隧道技术, 把 IPV6 和 IPV4 互相转换</li></ol><p>ICMPv6: 合并原本的 ICMP, IGCM, ARP</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.57vsyo7mhbo0.webp" alt="image"></p><p><strong>SDN</strong></p><p>把网络的数据和控制部分分离, 使用软件控制</p><p><strong>OpenFlow</strong></p><p>SDN 体系结构中 控制层面和数据层面之间的通信接口</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.69sm3v5aimk0.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.lpq098csjdc.png" alt="image"></p><h1>运输层</h1><p>运输层为运行在不同主机上的应用进程提供直接的逻辑通信服务</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.565yw01gsv40.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.ah4tftqcig8.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.59qntf5h0hc0.webp" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.2mw10shtuzy0.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.2g1h2zarm8ys.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.i6lsl3z9x1s.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.46k2dvpiaak0.webp" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1xgszvzh6068.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.545awauihww0.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3o1ux0t46xa0.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.7c1c5seudxk0.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4ao22qdzxtk0.webp" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.32c1ysd3ram0.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5io8tk0viso0.webp" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.42bqq7tj0t40.webp" alt="image"></p><p>网际层拥塞控制: 主动队列管理 AQM <br>随机早期丢弃: RED<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5irhsnxl9cc0.webp" alt="image"></p><p>超时重传时间应略大于往返时间 RTT<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.77h01sa8w080.png" alt="image"></p><h1>应用层</h1><p>网络应用程序在各种段系统上的组织方式和他们之间的关系</p><ol><li>客户/服务器方式( Client/Server, C/S 方式 )</li><li>对等方式 (Peer to Peer, P2P)</li></ol><p><strong>DHCP</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.45vnargyh9y0.png" alt="image"></p><p><strong>DNS</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6zsply9142c0.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.62whgb04j6c0.webp" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1fn7pd9j2dz4.png" alt="image"></p><p><strong>FTP</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6vyv0v1ezec0.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.55xi1lj6cq00.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6ntxj1pr1lg0.webp" alt="image"></p><p><strong>电子邮件</strong><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1p3zxbrpq8cg.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1ikdg5j82hk0.png" alt="image"></p><p>MIME:<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.39n5eyxw5jc0.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6pjrd6znv8w.png" alt="image"></p><p><strong>HTTP</strong><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.2xkfjoxvw200.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5gn33t6j58c0.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5e2bzsx8bt40.png" alt="image"></p><h1>网络安全</h1><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.47b56gaz7xk0.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3f9lbsjtiws0.png" alt="image"></p><ol><li>对称密钥密码体制: DES, 3DES, AES <br>通信双方使用相同的密钥加密和解密</li><li>公钥密码体制: RSA <br>被通信的一方公布公钥, 自己留着私钥, 对它通信的乙方使用它的公钥加密之后, 它用私钥解密</li></ol><p>报文鉴别: 对于不需要保密内容的情况, 只需要检测报文从而保证完整性 <br>MD, MD5, SHA-1, SHA-2, SHA-3, HMAC 等方法加密报文</p><p>数字签名: 对报文摘要进行数字签名<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.ens7qv7mvw8.png" alt="image"></p><p>实体鉴别:<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.50808vxcj5k0.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.hwk8fnfp3xk.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.7gfrl8fusac0.png" alt="image"></p><p>密钥分发:<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6atxjt6oyd40.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.36pskyu3k5w0.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.32nvbwton1s0.png" alt="image"></p><p><strong>访问控制</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6wk883baunk0.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3adu13sg2n00.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1r83zcs570tc.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4z7yvv4zt2w0.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1bxawnjxbwcg.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4wvhj1jwv8q0.png" alt="image"></p><ol><li>物理层安全<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.49owm73n9020.png" alt="image"><br>早期使用的简单的安全机制<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1w9a8k37ki68.webp" alt="image"></li><li>数据链路层安全<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.536cizfm7cc0.png" alt="image"></li><li>网络层安全<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.pdnwsbphtkg.webp" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.2tmg30ffy400.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.2ez9qjzbfqf4.webp" alt="image"></li><li>运输层安全<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.17wd3owrvm5c.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3gw6fcupzeq0.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.7avsan900500.png" alt="image"></li><li>应用层安全 <br>PGP<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5i0wq54nfxw0.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5py26tgqhqo0.png" alt="image"></li></ol><p><strong>防火墙</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.60qw850oz280.png" alt="image"></p><ol><li>分组过滤路由器<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5fa1ucsx5pw0.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.uaenkhm750g.png" alt="image"></li><li>应用网关<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.28mu0v47vaf4.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.18zuj1ha6vs0.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.2l9jgu8rsey0.png" alt="image"><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.qix53r7ddhc.png" alt="image"></li></ol><p><strong>网络攻击和防范</strong></p><ol><li>网络扫描<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.70zcgstytmc0.png" alt="image"></li><li>网络监听<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1iu4dhanlwo0.png" alt="image"></li><li>拒绝服务攻击<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.7ex7tnkwo7g0.png" alt="image"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Base </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Internet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/2023/09/10/os/"/>
      <url>/2023/09/10/os/</url>
      
        <content type="html"><![CDATA[<h1>操作系统介绍</h1><p>操作系统提供很多 <code>API</code> 给应用程序从而访问设备, 所以 OS 有时被称为标准库</p><p><strong>虚拟化</strong>: 将物理资源转换为更通用的虚拟形式</p><ol><li>虚拟化 CPU: 将单个 CPU 转化成看似无限数量的 CPU</li><li>虚拟化内存: 每个进程访问自己的虚拟地址空间</li></ol><p><strong>并发</strong>: 同时处理很多事情</p><p>在运行多线程程序时, 可能会出现并发问题导致运行结果呢出错</p><p><strong>持久性</strong>: 硬件和软件持久地存储数据</p><p>文件系统: 操作系统中管理磁盘的系统</p><p><strong>设计目标</strong></p><ol><li>建立抽象, 使系统更方便被使用</li><li>高性能</li><li>保护程序和硬件</li></ol><h1>抽象: 进程</h1><h2 id="内容">内容</h2><p>进程是运行中的程序</p><p>共享资源使用的最基本技术</p><ol><li>时分共享: 允许资源使用物理实体一段时间, 再由另一个资源使用一小段时间</li><li>空分共享: 资源在空间上被划分给使用它的人</li></ol><p>存在一些策略调度这些进程</p><p><strong>抽象: 进程</strong></p><p>进程的机器状态组成: 进程可以访问的内存空间(地址空间), 寄存器状态</p><p><strong>进程 <code>API</code></strong></p><p>操作系统必须提供的接口:</p><ol><li>创建新进程</li><li>销毁进程</li><li>等待进程运行</li><li>其他控制</li><li>获取进程状态</li></ol><p><strong>进程创建: 更多细节</strong></p><ol><li>将所有代码和静态数据放到内存中<ul><li>早期操作系统是在运行程序之前把这些都放到内存中</li><li>现代操作系统使用惰性加载: 用到了再放到内存中</li></ul></li><li>为运行时栈分配内存: 局部变量, 函数参数和返回地址<ul><li>操作系统可能使用参数初始化栈: <code>argc</code>, <code>argv</code></li></ul></li><li>为运行时堆分配内存: 用于动态分配数据</li><li>执行一些其他操作, 比如 IO 设备相关的操作</li><li>启动程序: 跳转到 <code>main</code> 函数</li></ol><p><strong>进程状态</strong></p><ol><li>运行: 正在执行指令</li><li>就绪: 准备好运行, 但是操作系统选择先做别的事</li><li>阻塞: 直到发生一些其他事情时才会开始运行</li></ol><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1nblosu9jtxc.webp" alt=""></p><p><strong>数据结构</strong></p><ol><li>保存寄存器值的数据结构</li><li>保存进程的数据结构</li></ol><h2 id="作业">作业</h2><ol><li>CPU 利用率为 100%</li><li>9</li><li>在等待 IO 的过程中运行进程 2, 可以节省时间, 总时间为 5</li><li>同 问题 2 的时间需求, 产生浪费</li><li>同 问题 3 的时间需求, 得到很高利用率</li><li>先进行进程 234 的操作, 而回到进程 1 的时候, CPU 资源被浪费</li><li>优先 IO, CPU 资源利用率升高</li><li>随机问题</li></ol><h1>插叙: 进程 <code>API</code></h1><h2 id="内容-2">内容</h2><p><strong><code>fork()</code>系统调用</strong></p><p>创建子进程, 有独立的地址空间 <br>父进程的 <code>fork()</code> 返回值非零, 子进程 <code>fork()</code> 返回值为 0</p><p>子进程和父进程可能会并发运行, 从而无法得到确定的结果</p><p><strong><code>wait()</code>系统调用</strong></p><p>在父进程部分的代码调用 <code>wait(NULL)</code> 即可等到子进程结束</p><p>这样就会得到确定的结果</p><p><strong><code>exec()</code>系统调用</strong></p><p>允许子进程运行其他的程序</p><p>把子进程的地址空间里放进 目标程序的地址空间 <br>堆, 栈, 代码静态数据都会重新初始化 <br>这样子进程在运行 <code>exec</code> 函数之后的代码就永远不会被执行</p><p><strong>为什么这样设计<code>API</code></strong></p><p>允许程序运行 <code>fork()</code> 和 <code>execve()</code> 之间的代码 <br>可以进行一些设置环境之类的操作</p><p><code>shell</code> 执行程序:</p><ol><li>用户输入命令</li><li><code>fork()</code> 创建子进程</li><li><code>exec()</code> 或者某个变体运行目标程序</li><li><code>wait()</code> 等待程序完成</li><li>继续输出提示符等待下一步输入</li></ol><p><code>shell</code> 进行重定向: 在调用 <code>exec()</code> 之前关闭 <code>stdout</code> 打开文件即可</p><p>管道也是使用类似的方式实现, 不过使用的是 <code>pipe()</code> 系统调用</p><p><strong>其他<code>API</code></strong></p><p><code>kill()</code> 向进程发送信号, 要求进程睡眠终止之类的指令</p><h2 id="作业-2">作业</h2><p><strong>5.1</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> x = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> rc = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child: \n&quot;</span>);</span><br><span class="line">        x = <span class="number">101</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;after: %d\n&quot;</span>, x);</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;parent: \n&quot;</span>);</span><br><span class="line">        x = <span class="number">102</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;after: %d\n&quot;</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父子进程之间有独立的地址空间, 更改变量不会对另一个进程有什么影响</p><p><strong>5.2</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;example.txt&quot;</span>, O_CREAT | O_WRONLY, <span class="number">0644</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> rc = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">char</span> *s = <span class="string">&quot;child write\n&quot;</span>;</span><br><span class="line">        <span class="type">int</span> tmp = write(fd, s, <span class="built_in">strlen</span>(s));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">char</span> *s = <span class="string">&quot;parent write\n&quot;</span>;</span><br><span class="line">        <span class="type">int</span> tmp = write(fd, s, <span class="built_in">strlen</span>(s));</span><br><span class="line">        wait(<span class="literal">NULL</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>地址空间独立, 互相写入的操作不会被干扰 <br>但是并发写入文件可能会出现顺序问题</p><p><strong>5.3</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> rc = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;goodbye\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>sleep()</code> 函数取巧</p><p><strong>5.4</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> rc = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">        execl(<span class="string">&quot;/bin/ls&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        wait(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变种多的原因是参数的种类数量不同</p><p><strong>5.5</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> rc = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> tmp = wait(<span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child wait output: %d, pid: %d\n&quot;</span>, tmp, getpid());</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> tmp = wait(<span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;parent wait output: %d\n&quot;</span>, tmp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父进程 <code>wait</code> 返回子进程的进程号 <br>子进程返回 <code>-1</code></p><p><strong>5.6</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> rc = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> tmp = waitpid(rc, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child wait output: %d, pid: %d\n&quot;</span>, tmp, getpid());</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> tmp = waitpid(rc, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;parent wait output: %d\n&quot;</span>, tmp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>waitpid</code> 提供更精细的控制</p><p><strong>5.7</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> rc = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">        close(STDOUT_FILENO);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;parent\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子进程不会输出到屏幕上了</p><p><strong>5.8</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> pipe_fd[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> rc1, rc2;</span><br><span class="line"></span><br><span class="line">    pipe(pipe_fd);</span><br><span class="line"></span><br><span class="line">    rc1 = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc1 == <span class="number">0</span>) &#123;</span><br><span class="line">        close(pipe_fd[<span class="number">0</span>]);</span><br><span class="line">        dup2(pipe_fd[<span class="number">1</span>], STDOUT_FILENO);</span><br><span class="line"></span><br><span class="line">        execlp(<span class="string">&quot;echo&quot;</span>, <span class="string">&quot;echo&quot;</span>, <span class="string">&quot;Hello&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">        _exit(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        waitpid(rc1, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        rc2 = fork();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rc2 == <span class="number">0</span>) &#123;</span><br><span class="line">            close(pipe_fd[<span class="number">1</span>]);</span><br><span class="line">            dup2(pipe_fd[<span class="number">0</span>], STDIN_FILENO);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> x = execlp(<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">            </span><br><span class="line">            _exit(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            close(pipe_fd[<span class="number">0</span>]), close(pipe_fd[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">            waitpid(rc2, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>机制: 受限直接执行</h1><h2 id="内容-3">内容</h2><p>在保持控制的同时实现高性能</p><p><strong>基本技巧: 受限直接执行(LDE)</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.8tk9ru1ygps.png" alt=""></p><p><strong>问题 1: 受限制的操作</strong></p><p>操作系统使用 内核模式 <br>应用程序使用 用户模式</p><p>内核模式具有所有权限</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.66adso3ctbc0.webp" alt=""></p><p>LDE 协议的两个阶段</p><ol><li>系统引导时初始化陷阱表</li><li>运行进程时如图</li></ol><p><strong>问题 2: 在进程之中切换</strong></p><p>协作方式: 等待系统调用</p><p>应用将 CPU 控制权转移给操作系统的方式</p><ol><li>通过系统调用, 友好地交还控制权</li><li>执行非法操作<br>被动地等待应用交还会存在隐患</li></ol><hr><p>非协作方式: 操作系统进行控制</p><p>使用时钟中断的方式: 每隔几毫秒产生中断, 进程将 CPU 控制权转移给操作系统</p><hr><p>保存和恢复上下文</p><p>调度进程来决定 操作系统重新获得控制权之后的 操作</p><p>上下文切换: 为当前执行的进程保存一些寄存器的值, 为即将执行的进程恢复一些寄存器的值</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4r6z6euckay0.webp" alt=""></p><p>此协议中有两种类型的寄存器 保存 / 恢复</p><ol><li>时钟中断时: 硬件隐式保存用户寄存器</li><li>进程切换时: 内核寄存器被 OS 明确保存</li></ol><p><strong>并发问题</strong></p><p>中断的时候不允许发生另外的中断, 还有一些锁机制来防止并发错误的产生</p><h2 id="作业-3">作业</h2><p><strong>测量系统调用</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;q1.c&quot;</span>, O_RDONLY);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">start</span>, <span class="title">end</span>;</span></span><br><span class="line"></span><br><span class="line">    gettimeofday(&amp;start, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1e7</span>; i++) &#123;</span><br><span class="line">        read(fd, buf, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    gettimeofday(&amp;end, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)(end.tv_usec - start.tv_usec));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一百万次系统调用大概 0.6s</p><p><strong>测量上下文切换</strong></p><p>暂时跳过</p><h1>进程调度: 介绍</h1><h2 id="内容-4">内容</h2><p><strong>工作负载假设</strong></p><ol><li>假设每个工作运行相同时间</li><li>所有的工作同时到达</li><li>一旦开始, 每个工作保持运行直到完成</li><li>所有的工作只使用 CPU</li><li>每个工作的运行时间已知</li></ol><p><strong>调度指标</strong></p><p>性能指标:<br>$$<br>T_{周转时间} = T_{完成时间}-T_{到达时间}<br>$$<br>公平指标:<br>$$<br>T_{响应时间} = T_{首次运行}-T_{到达时间}<br>$$</p><p><strong>存在五条限制</strong></p><p><code>FIFO</code>: 先进先出式运行进程</p><p><strong>取消假设 1</strong></p><p><code>FIFO</code> 如果先运行一个时间很长的进程, 那么平均周转时间就会很高 <br><code>SJF</code> 最短任务优先: 可以证明在 2345 条限制之下这个调度方案最优</p><p><strong>取消假设 2</strong></p><p><code>SJF</code> 当前执行一个很长的任务, 中途来了几个很短的任务, 此时平均周转时间很高 <br><code>STJF</code> 最短完成时间优先: 剩余的完成任务时间最短的最先运行, 这样可以大大提高周转时间 <br>可以证明在 345 条限制下这个调度方案最优</p><p><strong>取消假设 3</strong></p><p>此时的调度程序变成抢占式的, 可以暂停一个进程开始另一个进程</p><p><code>PP</code> 轮转: 在一个时间片(通常为中断周期的整数倍)内执行一个进程, 下一个时间片轮转地执行其他进程,<br>这样的好处是可以减少响应时间, 也就是公平性, 坏处是增加周转时间, 也就是低性能</p><p>摊销: 上下文切换的时间开销占比过大时, 可以增大时间片从而摊销上下文时间切换</p><p><strong>取消假设 4</strong></p><p>在 IO 期间进程不会使用 CPU, 所以可以把 IO 时间用来执行其他程序 <br>根据 IO 的分布, 把进程划分成一些子进程, 把他们都当作单独的进程来调度</p><p><strong>取消假设 5</strong></p><p>结合上面的所有想法, 平衡响应时间和周转时间</p><h2 id="作业-4">作业</h2><p>123 略过</p><ol start="4"><li>按照运行时间从小到大的到达顺序的工作负载</li><li>时间片的长度大于最长的进程</li><li>逐渐增大</li><li>$$<br>\frac{q\Sigma_{i = 0}^{n-1}i}{N} = \frac{q(N-1)}{2}<br>$$</li></ol><h1>调度: 多级反馈队列</h1><h2 id="内容-5">内容</h2><p><code>Multi-level Feedback Queue(MLFQ)</code> 多级反馈队列</p><p><strong><code>MLFQ</code> 的基本规则</strong></p><p><code>MLFQ</code> 中有许多队列, 每个队列有不同的优先级, 每个进程只属于一个队列</p><ol><li>A 的优先级比 B 高, 运行 A</li><li>A 的优先级与 B 相同, 轮转运行 AB</li></ol><p><strong>尝试 1: 如何改变优先级</strong></p><ol start="3"><li>工作进入系统时使用最高优先级</li><li>工作用完整个时间片只有, 降低优先级 <br>工作在时间片中主动释放 CPU, 优先级不变</li></ol><p>缺点:</p><ol><li>饥饿问题: 太多短工作使得长工作饿死</li><li>愚弄调度程序: 时间片的 99% 访问无关文件, 从而一直保持在高优先级</li></ol><p><strong>尝试 2: 提升优先级</strong></p><ol start="5"><li>经过一段时间, 就将所有工作加入最高优先级队列</li></ol><p><strong>尝试 3: 更好的计时方式</strong></p><p>重写第四条:</p><ol start="4"><li>一旦工作用完了其在某一层的时间配额, 那就降低优先级</li></ol><p><strong><code>MLFQ</code> 调优</strong></p><p>比如不同优先级队列可变的时间片长度</p><h2 id="作业-略">作业(略)</h2><h1>调度: 比例分额</h1><p>每隔一段时间抽奖决定下一个应该运行的进程 <br>根据进程需要更改概率</p><p><strong>基本概念: 彩票数表示份额</strong></p><p>彩票数占总彩票数的百分比代表进程占用资源的份额</p><p>随机性的好处:</p><ol><li>几乎遇不到最差的情况</li><li>几乎不需要记录除彩票数的其他状态</li><li>迅速</li></ol><p><strong>彩票机制</strong></p><ol><li>彩票货币: 分给子进程的货币按照比例兑换全局彩票</li><li>彩票转让: 某个进程想让另一个进程更快, 可以进行彩票转让</li><li>彩票通胀: 用于进程之间相互信任的环境, 临时提升自己的彩票数量</li></ol><p><strong>实现</strong></p><p>把进程按照彩票数从多到少排序, 按顺序遍历从而找到下一个运行的进程</p><p><strong>分配彩票</strong></p><p>除了用户自己分配之外, 分配问题到现在还没有最佳答案</p><p><strong>步长调度: 一个确定性的公平分配算法</strong></p><ol><li>每个进程用一个大数除以彩票数, 得到步长, 总步长设为 0</li><li>每次选择所有进程中总步数最小的开始运行一段时间</li><li>运行完毕之后总步数加上步长, 随后回到第二步</li></ol><p><strong>比例分额模式的缺点</strong></p><ol><li>无法确定各个进程应该有多少彩票数</li><li>不能很好适配 IO 操作</li></ol><h2 id="作业-5">作业</h2><ol start="2"><li>彩票数量不平衡时, 彩票数量多的几乎是一直运行到结束 <br>出现饥饿现象</li><li>不公平性不多</li><li>不公平性增大</li></ol><h1>多处理器调度</h1><p>暂时搁置, 学完并发再回来读</p><h1>抽象: 地址空间</h1><p><strong>早期系统</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.48xmqeb3hbc0.png" alt=""></p><p><strong>多道程序和时分共享</strong></p><p>一种粗糙的机器共享(慢): 一个程序使用全部内存, 上下文切换的时候把程序数据放到硬盘中 <br>加载其他程序的信息再继续运行</p><p><strong>地址空间</strong></p><p>地址空间包括运行程序的所有内存状态: 包括代码段, 栈段, 堆段等等</p><p><strong>目标</strong></p><ol><li>透明: 让运行的程序不知道内存被虚拟化了</li><li>效率: 追求更低的时间空间复杂度</li><li>保护: 保护进程之间相互隔离, 不受其他进程影响</li></ol><p>程序中打印的地址都是虚拟地址, 需要操作系统翻译成物理地址</p><h1>插叙: 内存操作 <code>API</code></h1><p><strong>内存类型</strong></p><p>栈内存: 申请和释放操作由编译器隐式管理, 也被称为自动内存 <br>堆内存: 申请和释放操作由程序员显式管理</p><p><strong><code>malloc()</code>调用</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">malloc</span><span class="params">(<span class="type">size_t</span> size)</span>;</span><br></pre></td></tr></table></figure><p>传入参数的时候使用 <code>sizeof()</code> 和 <code>strlen(s) + 1</code> <br><code>malloc</code> 返回 <code>void *</code>, 所以最好是显式写出强制类型转换</p><p><strong><code>free()</code> 调用</strong></p><p>释放不使用的堆内存: <code>free(x)</code></p><h1>操作系统概述</h1><p><strong>特征</strong></p><ol><li>并发: 程序分时交替进行</li><li>共享:<ol><li>互斥共享方式: 目标资源称为临界资源</li><li>同时访问方式: 程序分时交替访问文件</li></ol></li><li>虚拟: 虚拟化 CPU, 虚拟化内存, 虚拟化设备 <br>包括时分共享和空分共享</li><li>异步: 程序走走停停</li></ol><p><strong>功能</strong></p><ol><li>管理资源: 管理处理器, 存储器, 设备, 文件</li><li>作为用户与系统间的接口:<ol><li>命令接口:<ul><li>联机命令接口: 交互式</li><li>脱机命令接口: 批处理</li></ul></li><li>程序接口: 一组系统调用</li></ol></li></ol><p><strong>体系结构</strong></p><ol><li>大内核: 难以维护, 性能高</li><li>微内核: 易于维护, 性能低</li></ol><p><strong>中断</strong></p><ol><li>中断(异步): 时钟中断, IO 中断</li><li>异常(同步):<ul><li>陷阱: 如系统调用(主动)</li><li>故障: 如缺页异常(可修复)</li><li>终止: 如除零错误(不可修复)</li></ul></li></ol><p><strong>系统调用</strong></p><p>切换到内核态, 获得操作系统的服务</p><p>系统调用是操作系统的一部分, 在内核态运行 <br>库函数是语言或应用程序的一部分, 在用户态运行</p><p>很多库函数会使用系统调用</p><p><strong>分类</strong></p><ol><li>手工操作系统: 资源利用率低</li><li>单道批处理操作系统: 顺序处理, 资源利用率低</li><li>多道批处理操作系统: 不提供人机交互功能</li><li>分时操作系统: 不能处理要求运行时间 比时间片还短的 请求</li><li>实时操作系统: 及时性, 可靠性</li><li>分布式操作系统: 分布性, 并行性</li></ol><h1>进程管理</h1><h2 id="进程">进程</h2><p>进程是操作系统进行资源分配和调度的基本单位</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1nblosu9jtxc.webp" alt=""></p><p><strong>进程控制</strong></p><ol><li>创建原语:<ol><li>分配 pid, 申请空白 PCB, 分配资源</li><li>初始化 PCB</li><li>插入就绪队列, 准备执行</li></ol></li><li>撤销原语<ol><li>根据终止标识符找出 PCB, 获取状态</li><li>终止该进程以及子进程</li><li>归还资源, 删除 PCB</li></ol></li><li>阻塞原语<ol><li>该进程为运行状态: 保护现场, 改状态, 插入等待队列</li><li>该进程为就绪状态: 该状态, 移出就绪队列, 插入等待队列</li></ol></li><li>唤醒原语: 找到 PCB, 加入就绪队列</li></ol><p><strong>进程组织</strong></p><ol><li>连接方式: 相同状态的进程组织成队列</li><li>索引表: 相同状态的进程放到一张索引表里</li></ol><p><strong>进程通信</strong></p><ol><li>共享存储: 设置一个共享空间, 进程之间互斥访问</li><li>消息传递:<ul><li>直接传递: 发送到对方进程接收队列尾</li><li>间接传递: 发送到内存中的信箱</li></ul></li><li>管道通信: 从一边读, 从一边写</li></ol><h2 id="线程">线程</h2><p>线程是 CPU 的最小执行单元</p><p>优点: 提高并发度, 同一进程内的线程切换时不需要切换进程环境</p><p><strong>线程分类</strong></p><ol><li>用户级线程: 由应用程序管理</li><li>内核级线程: 由操作系统管理, 切换线程时要在内核态</li></ol><p><strong>多线程模型</strong></p><ol><li>多对一: 开销小, 一个线程被阻塞, 整个进程会被阻塞</li><li>一对一: 开销大, 多线程可并行执行</li><li>多对多: 开销小, 多线程可并行执行</li></ol><h2 id="调度">调度</h2><p>三级调度</p><ol><li>作业调度: 从外存调进来</li><li>内存调度: 从内存调出去(挂起)</li><li>进程调度: 从就绪队列中选择进程执行</li></ol><p><strong>调度时机</strong></p><ol><li>需要调度:<ul><li>主动放弃: 进程终止, 主动阻塞</li><li>被动放弃: 分配的时间片用完, 有更高优先级的进程需要执行, 中断</li></ul></li><li>不能调度<ul><li>原语</li><li>处理中断时</li><li>进程在临界区(访问临界资源的代码)中</li></ul></li></ol><p><strong>调度指标</strong></p><ol><li>CPU 利用率</li><li>系统吞吐量: 单位时间内完成作业的数量</li><li>周转时间: 完成时间 - 提交时间</li><li>等待时间: 进程处于等待的时间之和</li><li>响应时间: 开始时间 - 提交时间</li></ol><p><strong>调度算法</strong></p><ol><li>FIFS: 先来先服务: 效率低, 有利于 CPU 繁忙性作业</li><li>SJF: 短作业优先: 未考虑紧迫程度, 长作业可能产生饥饿 <br>SRTN: 最短剩余时间优先: 同上</li><li>HRRN: 高响应比优先:<br>$$<br>响应比 = \frac{等待时间 + 运行时间}{运行时间}<br>$$</li><li>RR: 时间片轮转: 公平, 进程切换开销大</li><li>优先级调度算法: 优先级高的先调度 (优先级可动态或静态分配): 可能导致低优先级进程饥饿</li><li>多级反馈队列: 优先级从高到低, 时间片从小到大 <br>当前时间片被用完, 放到下一层的队尾</li></ol><h2 id="同步与互斥">同步与互斥</h2><ol><li>同步: 进程之间要使用一定的先后顺序完成某项任务</li><li>互斥: 对临界资源的访问需要进程互斥地访问</li></ol><p>临界资源的访问过程</p><ol><li>四个部分<ul><li>进入区: 检查是否可进入临界区, 如可进入则需上锁</li><li>临界区: 访问临界资源的代码</li><li>退出区: 负责解锁</li><li>剩余区: 其他代码部分</li></ul></li><li>四个原则<ul><li>空闲让进: 临界区空闲时允许一个进程访问</li><li>忙则等待: 临界区正在被访问时, 其他进程需等待</li><li>有限等待: 有限时间内进入临界区, 防止饥饿</li><li>让权等待: 进不了临界区的进程要释放 CPU, 防止忙等</li></ul></li></ol><p><strong>实现互斥的硬件方法</strong></p><ol><li>中断屏蔽: 使用开/关中断指令<ul><li>简单高效 | 只适用于单核CPU, 只适用于内核进程</li></ul></li><li>TSL 指令:</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 硬件实现此函数, 相当于原语</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">TSL</span><span class="params">(<span class="type">bool</span> *lock)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> old = *lock;</span><br><span class="line">    *lock = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 四区</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">TSL</span>(&amp;lock));</span><br><span class="line"><span class="comment">// 临界区</span></span><br><span class="line">lock = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 剩余区</span></span><br></pre></td></tr></table></figure><ol start="3"><li>XCHG(Swap) 指令:</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原语</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Swap</span><span class="params">(<span class="type">bool</span> *a, <span class="type">bool</span> *b)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> tmp = *a;</span><br><span class="line">    *a = *b, *b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">四区</span><br><span class="line"><span class="type">bool</span> old = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (old == <span class="literal">true</span>) </span><br><span class="line">    <span class="built_in">Swap</span>(&amp;old, &amp;lock);</span><br><span class="line"><span class="comment">// 临界区</span></span><br><span class="line">lock = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 剩余区</span></span><br></pre></td></tr></table></figure><p>后两种方法不满足 让全等待 原则, 会导致忙等</p><p><strong>实现互斥的软件方法</strong></p><ol><li>单标志法: 进程访问完临界区之后会赋予其他进程访问临界资源的权限 <br>违背空闲让进原则</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> turn = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SingleSignal_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (turn != <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    turn = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SingleSignal_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (turn != <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    turn = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>双标志先检查法 <br>违反忙则等待原则, 检查和上锁是分开的</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> flag[<span class="number">2</span>] = &#123; <span class="literal">false</span>, <span class="literal">false</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (flag[<span class="number">1</span>]);</span><br><span class="line">flag[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">flag[<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (flag[<span class="number">0</span>]);</span><br><span class="line">flag[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">flag[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><ol start="3"><li>双标志后检查法 <br>违背空闲让进和忙则等待</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> flag[<span class="number">2</span>] = &#123; <span class="literal">false</span>, <span class="literal">false</span> &#125;;</span><br><span class="line"></span><br><span class="line">flag[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (flag[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">flag[<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line">flag[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (flag[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">flag[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><ol start="4"><li><code>Peterson</code> 算法: 无法实现让权等待</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> flag[<span class="number">2</span>] = &#123; <span class="literal">false</span>, <span class="literal">false</span> &#125;; <span class="comment">// 表示进入临界区意愿</span></span><br><span class="line"><span class="type">int</span> turn = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">flag[<span class="number">0</span>] = <span class="literal">true</span>, turn = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (flag[<span class="number">1</span>] &amp;&amp; turn == <span class="number">1</span>); <span class="comment">// 如果对方想用且自己让给了他</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">flag[<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line">flag[<span class="number">1</span>] = <span class="literal">true</span>, turn = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (flag[<span class="number">0</span>] &amp;&amp; turn == <span class="number">0</span>);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">flag[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><p><strong>信号量机制</strong></p><p>原语: <code>wait(S)</code>, <code>signal(S)</code></p><ol><li>整形信号量: 不满足让权等待原则</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">wait</span><span class="params">(<span class="type">int</span> S)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (S &lt;= <span class="number">0</span>);</span><br><span class="line">    S -= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">signal</span><span class="params">(<span class="type">int</span> S)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    S += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>记录型信号量, <code>block(P)</code>, <code>wakeup(P)</code> 阻塞和唤醒原语</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">process</span> *L;</span><br><span class="line">&#125; semaphore;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wait</span><span class="params">(semaphore S)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    S.value--;</span><br><span class="line">    <span class="keyword">if</span> (S.value &lt; <span class="number">0</span>) </span><br><span class="line">        <span class="built_in">block</span>(S.L);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">signal</span><span class="params">(semaphore S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    S.value++;</span><br><span class="line">    <span class="keyword">if</span> (S.value &lt;= <span class="number">0</span>)  <span class="comment">// &lt;= 0 说明有进程在等待该资源</span></span><br><span class="line">        <span class="built_in">wakeup</span>(S.L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>信号量实现互斥, 同步, 前驱</strong></p><ol><li>互斥  <br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1cyf9dr5p3uo.png" alt="image"></li><li>同步 <br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6xecwk0ng3s0.webp" alt="image"></li><li>前驱 <br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6vp0jxj1b400.png" alt="image"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Base </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP Labs 小结</title>
      <link href="/2023/09/04/csapplabs/"/>
      <url>/2023/09/04/csapplabs/</url>
      
        <content type="html"><![CDATA[<h1><code>data</code></h1><p><strong><code>bitXor</code></strong></p><p>本质上是使用 非门 <code>~</code> 和 与门 <code>&amp;</code> 实现 异或门 <code>^</code></p><p>$$<br>\begin{align*}<br>a \ \oplus \ b &amp;= (a \overline b) + (\overline a b)  \<br>&amp;= \overline{ \overline{ a \overline b} \cdot \overline { \overline a b}}</p><p>\end{align*}<br>$$</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">bitXor</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ~(~(~x &amp; y) &amp; ~(~y &amp; x));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>tmin</code></strong></p><p>使用二进制补码, 最高位为 <code>1</code> 时得到 <code>tmin</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">tmin</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; <span class="number">31</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1><code>malloc</code></h1><p><strong>隐式空闲链表</strong></p><p>根据 <code>head</code> 和 <code>foot</code> 中记录的长度可以找到左右块, 从而组成双向链表</p><p>使用策略: 首次适配, 立即合并</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mm.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;memlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">team_t</span> team = &#123;</span><br><span class="line">    <span class="comment">/* Team name */</span></span><br><span class="line">    <span class="string">&quot;ateam&quot;</span>,</span><br><span class="line">    <span class="comment">/* First member&#x27;s full name */</span></span><br><span class="line">    <span class="string">&quot;lzl&quot;</span>,</span><br><span class="line">    <span class="comment">/* First member&#x27;s email address */</span></span><br><span class="line">    <span class="string">&quot;emmmm&quot;</span>,</span><br><span class="line">    <span class="comment">/* Second member&#x27;s full name (leave blank if none) */</span></span><br><span class="line">    <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="comment">/* Second member&#x27;s email address (leave blank if none) */</span></span><br><span class="line">    <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* single word (4) or double word (8) alignment */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALIGNMENT 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* rounds up to the nearest multiple of ALIGNMENT */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALIGN(size) (((size) + (ALIGNMENT-1)) &amp; ~0x7)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE_T_SIZE (ALIGN(sizeof(size_t)))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a, b) ((a) &gt; (b) ? a : b)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WSIZE 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DSIZE 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHUNKSIZE (1 &lt;&lt; 12)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PACK(size, alloc) ((size) | (alloc))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET(p) (*(unsigned int *)(p))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PUT(p, val) (*(unsigned int *)(p) = (val))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_SIZE(p) (GET(p) &amp; ~0x7)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_ALLOC(p) (GET(p) &amp; 0x1)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HDRP(bp) ((char *)(bp) - WSIZE)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FTRP(bp) ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NEXT_BLKP(bp) ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PREV_BLKP(bp) ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE)))</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *heap_listp;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">coalesce</span><span class="params">(<span class="type">void</span> *bp)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));</span><br><span class="line">    <span class="type">size_t</span> next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> size = GET_SIZE(HDRP(bp));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prev_alloc &amp;&amp; next_alloc) <span class="keyword">return</span> bp;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (prev_alloc &amp;&amp; !next_alloc) &#123;</span><br><span class="line"></span><br><span class="line">        size += GET_SIZE(HDRP(NEXT_BLKP(bp)));</span><br><span class="line">        PUT(HDRP(bp), PACK(size, <span class="number">0</span>));</span><br><span class="line">        PUT(FTRP(bp), PACK(size, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!prev_alloc &amp;&amp; next_alloc) &#123;</span><br><span class="line"></span><br><span class="line">        size += GET_SIZE(HDRP(PREV_BLKP(bp)));</span><br><span class="line">        PUT(FTRP(bp), PACK(size, <span class="number">0</span>));</span><br><span class="line">        PUT(HDRP(PREV_BLKP(bp)), PACK(size, <span class="number">0</span>));</span><br><span class="line">        bp = PREV_BLKP(bp);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        size += GET_SIZE(HDRP(NEXT_BLKP(bp)));</span><br><span class="line">        size += GET_SIZE(HDRP(PREV_BLKP(bp)));</span><br><span class="line"></span><br><span class="line">        PUT(FTRP(NEXT_BLKP(bp)), PACK(size, <span class="number">0</span>));</span><br><span class="line">        PUT(HDRP(PREV_BLKP(bp)), PACK(size, <span class="number">0</span>));</span><br><span class="line">        bp = PREV_BLKP(bp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">extend_heap</span><span class="params">(<span class="type">size_t</span> words)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *bp;</span><br><span class="line">    <span class="type">size_t</span> size;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    size = (words % <span class="number">2</span>) ? (words + <span class="number">1</span>) * WSIZE : words * WSIZE;</span><br><span class="line">    </span><br><span class="line">    bp = (<span class="type">char</span> *)mem_sbrk(size);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">long</span>)bp == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    PUT(HDRP(bp), PACK(size, <span class="number">0</span>));</span><br><span class="line">    PUT(FTRP(bp), PACK(size, <span class="number">0</span>));</span><br><span class="line">    PUT(HDRP(NEXT_BLKP(bp)), PACK(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> coalesce(bp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">find_fit</span><span class="params">(<span class="type">size_t</span> asize)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *cur_ptr = heap_listp;</span><br><span class="line">    <span class="keyword">while</span> (GET_SIZE(HDRP(cur_ptr)) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (GET_SIZE(HDRP(cur_ptr)) &gt;= asize &amp;&amp;</span><br><span class="line">            !GET_ALLOC(HDRP(cur_ptr)))</span><br><span class="line">                <span class="keyword">return</span> cur_ptr;</span><br><span class="line">        cur_ptr = NEXT_BLKP(cur_ptr);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">place</span><span class="params">(<span class="type">void</span> *bp, <span class="type">size_t</span> asize)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> rest_size = GET_SIZE(HDRP(bp)) - asize;</span><br><span class="line">    <span class="type">char</span> *cur_bp = (<span class="type">char</span> *)bp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rest_size &gt;= <span class="number">2</span> * DSIZE) &#123;</span><br><span class="line"></span><br><span class="line">        PUT(HDRP(bp), PACK(asize, <span class="number">1</span>));</span><br><span class="line">        PUT(FTRP(bp), PACK(asize, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        bp = NEXT_BLKP(bp);</span><br><span class="line"></span><br><span class="line">        PUT(HDRP(bp), PACK(rest_size, <span class="number">0</span>));</span><br><span class="line">        PUT(FTRP(bp), PACK(rest_size, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">        asize = GET_SIZE(HDRP(bp));</span><br><span class="line">        PUT(HDRP(cur_bp), PACK(asize, <span class="number">1</span>));</span><br><span class="line">        PUT(FTRP(cur_bp), PACK(asize, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * mm_init - initialize the malloc package.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mm_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    mem_init();</span><br><span class="line">    <span class="keyword">if</span> ((heap_listp = (<span class="type">char</span> *)mem_sbrk(<span class="number">4</span> * WSIZE)) == (<span class="type">void</span> *)<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    PUT(heap_listp, <span class="number">0</span>);</span><br><span class="line">    PUT(heap_listp + (<span class="number">1</span> * WSIZE), PACK(DSIZE, <span class="number">1</span>));</span><br><span class="line">    PUT(heap_listp + (<span class="number">2</span> * WSIZE), PACK(DSIZE, <span class="number">1</span>));</span><br><span class="line">    PUT(heap_listp + (<span class="number">3</span> * WSIZE), PACK(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">    heap_listp += (<span class="number">2</span> * WSIZE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * mm_malloc - Allocate a block by incrementing the brk pointer.</span></span><br><span class="line"><span class="comment"> *     Always allocate a block whose size is a multiple of the alignment.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">mm_malloc</span><span class="params">(<span class="type">size_t</span> size)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> asize;</span><br><span class="line">    <span class="type">size_t</span> extendsize;</span><br><span class="line">    <span class="type">char</span> *bp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size &lt;= DSIZE) asize = <span class="number">2</span> * DSIZE;</span><br><span class="line">    <span class="keyword">else</span> asize = DSIZE * ((size + (DSIZE) + (DSIZE - <span class="number">1</span>)) / DSIZE);</span><br><span class="line"></span><br><span class="line">    bp = (<span class="type">char</span> *)find_fit(asize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        place(bp, asize);</span><br><span class="line">        <span class="keyword">return</span> bp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    extendsize = asize;</span><br><span class="line"></span><br><span class="line">    bp = (<span class="type">char</span> *)extend_heap(extendsize / WSIZE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bp == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    place(bp, asize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * mm_free - Freeing a block does nothing.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">mm_free</span><span class="params">(<span class="type">void</span> *ptr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (ptr == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> size = GET_SIZE(HDRP(ptr));</span><br><span class="line"></span><br><span class="line">    PUT(HDRP(ptr), PACK(size, <span class="number">0</span>));</span><br><span class="line">    PUT(FTRP(ptr), PACK(size, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    coalesce(ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * mm_realloc - Implemented simply in terms of mm_malloc and mm_free</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">mm_realloc</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">        mm_free(ptr);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ptr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> mm_malloc(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *newptr = mm_malloc(size);</span><br><span class="line">    <span class="keyword">if</span> (!newptr) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">size_t</span> oldsize = GET_SIZE(HDRP(ptr));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size &lt; oldsize) oldsize = size;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(newptr, ptr, oldsize);</span><br><span class="line">    mm_free(ptr);</span><br><span class="line">    <span class="keyword">return</span> newptr;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得分 <code>46 (util) + 36 (thru) = 83/100</code></p><p><strong>显式空闲链表</strong></p><p>空闲块中 <code>head</code> 之后的两个位置放指针, 指向上一个 / 下一个空闲块</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * mm-naive.c - The fastest, least memory-efficient malloc package.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * In this naive approach, a block is allocated by simply incrementing</span></span><br><span class="line"><span class="comment"> * the brk pointer.  A block is pure payload. There are no headers or</span></span><br><span class="line"><span class="comment"> * footers.  Blocks are never coalesced or reused. Realloc is</span></span><br><span class="line"><span class="comment"> * implemented directly using mm_malloc and mm_free.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * NOTE TO STUDENTS: Replace this header comment with your own header</span></span><br><span class="line"><span class="comment"> * comment that gives a high level description of your solution.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mm.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;memlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************************************************</span></span><br><span class="line"><span class="comment"> * NOTE TO STUDENTS: Before you do anything else, please</span></span><br><span class="line"><span class="comment"> * provide your team information in the following struct.</span></span><br><span class="line"><span class="comment"> ********************************************************/</span></span><br><span class="line"><span class="type">team_t</span> team = &#123; <span class="comment">/* Team name */</span></span><br><span class="line">    <span class="string">&quot;ateam&quot;</span>,</span><br><span class="line">    <span class="comment">/* First member&#x27;s full name */</span></span><br><span class="line">    <span class="string">&quot;lzl&quot;</span>,</span><br><span class="line">    <span class="comment">/* First member&#x27;s email address */</span></span><br><span class="line">    <span class="string">&quot;emmmm&quot;</span>,</span><br><span class="line">    <span class="comment">/* Second member&#x27;s full name (leave blank if none) */</span></span><br><span class="line">    <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="comment">/* Second member&#x27;s email address (leave blank if none) */</span></span><br><span class="line">    <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* single word (4) or double word (8) alignment */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALIGNMENT 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* rounds up to the nearest multiple of ALIGNMENT */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALIGN(size) (((size) + (ALIGNMENT-1)) &amp; ~0x7)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE_T_SIZE (ALIGN(sizeof(size_t)))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a, b) ((a) &gt; (b) ? a : b)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WSIZE 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DSIZE 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHUNKSIZE (1 &lt;&lt; 6)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PACK(size, alloc) ((size) | (alloc))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET(p) (*(unsigned int *)(p))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PUT(p, val) (*(unsigned int *)(p) = (val))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_SIZE(p) (GET(p) &amp; ~0x7)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_ALLOC(p) (GET(p) &amp; 0x1)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HDRP(bp) ((char *)(bp) - WSIZE)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FTRP(bp) ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NEXT_BLKP(bp) ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PREV_BLKP(bp) ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE)))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_PREV(p) (*(unsigned int *)(p))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SET_PREV(p, prev) (*(unsigned int *)(p) = (prev))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_NEXT(p) (*((unsigned int *)(p)+1))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SET_NEXT(p, val) (*((unsigned int *)(p)+1) = (val))</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *heap_listp;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *free_listp;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">remove_from_free_list</span><span class="params">(<span class="type">void</span> *bp)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (bp == <span class="literal">NULL</span> || GET_ALLOC(bp)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *prev = GET_PREV(bp);</span><br><span class="line">    <span class="type">void</span> *next = GET_NEXT(bp);</span><br><span class="line"></span><br><span class="line">    SET_PREV(bp, <span class="number">0</span>), SET_NEXT(bp, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="literal">NULL</span> &amp;&amp; next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        free_listp = <span class="literal">NULL</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prev == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        SET_PREV(next, <span class="number">0</span>);</span><br><span class="line">        free_listp = next;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        SET_NEXT(prev, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        SET_NEXT(prev, next);</span><br><span class="line">        SET_PREV(next, prev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">insert_to_free_list</span><span class="params">(<span class="type">void</span> *bp)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (bp == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (free_listp == <span class="literal">NULL</span>) </span><br><span class="line">        <span class="keyword">return</span> free_listp = bp, (<span class="type">void</span>)<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    SET_NEXT(bp, free_listp);</span><br><span class="line">    SET_PREV(free_listp, bp);</span><br><span class="line"></span><br><span class="line">    free_listp = bp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">coalesce</span><span class="params">(<span class="type">void</span> *bp)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));</span><br><span class="line">    <span class="type">size_t</span> next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> size = GET_SIZE(HDRP(bp));</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *prev_bp = PREV_BLKP(bp);</span><br><span class="line">    <span class="type">void</span> *next_bp = NEXT_BLKP(bp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prev_alloc &amp;&amp; next_alloc) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (prev_alloc &amp;&amp; !next_alloc) &#123;</span><br><span class="line"></span><br><span class="line">        remove_from_free_list(next_bp);</span><br><span class="line"></span><br><span class="line">        size += GET_SIZE(HDRP(next_bp));</span><br><span class="line">        PUT(HDRP(bp), PACK(size, <span class="number">0</span>));</span><br><span class="line">        PUT(FTRP(bp), PACK(size, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!prev_alloc &amp;&amp; next_alloc) &#123;</span><br><span class="line"></span><br><span class="line">        remove_from_free_list(prev_bp);</span><br><span class="line"></span><br><span class="line">        size += GET_SIZE(HDRP(prev_bp));</span><br><span class="line"></span><br><span class="line">        PUT(FTRP(bp), PACK(size, <span class="number">0</span>));</span><br><span class="line">        PUT(HDRP(prev_bp), PACK(size, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        bp = PREV_BLKP(bp);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        remove_from_free_list(prev_bp);</span><br><span class="line">        remove_from_free_list(next_bp);</span><br><span class="line"></span><br><span class="line">        size += GET_SIZE(HDRP(next_bp));</span><br><span class="line">        size += GET_SIZE(HDRP(prev_bp));</span><br><span class="line"></span><br><span class="line">        PUT(FTRP(next_bp), PACK(size, <span class="number">0</span>));</span><br><span class="line">        PUT(HDRP(prev_bp), PACK(size, <span class="number">0</span>));</span><br><span class="line">        bp = PREV_BLKP(bp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    insert_to_free_list(bp);</span><br><span class="line">    <span class="keyword">return</span> bp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">extend_heap</span><span class="params">(<span class="type">size_t</span> words)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *bp;</span><br><span class="line">    <span class="type">size_t</span> size;</span><br><span class="line"></span><br><span class="line">    size = (words % <span class="number">2</span>) ? (words + <span class="number">1</span>) * WSIZE : words * WSIZE;</span><br><span class="line">    </span><br><span class="line">    bp = (<span class="type">char</span> *)mem_sbrk(size);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">long</span>)bp == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    PUT(HDRP(bp), PACK(size, <span class="number">0</span>));</span><br><span class="line">    PUT(FTRP(bp), PACK(size, <span class="number">0</span>));</span><br><span class="line">    PUT(HDRP(NEXT_BLKP(bp)), PACK(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    SET_PREV(bp, <span class="number">0</span>), SET_NEXT(bp, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> coalesce(bp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span>* <span class="title function_">find_fit</span><span class="params">(<span class="type">size_t</span> asize)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">void</span>* bp = free_listp; bp != <span class="number">0</span>; bp = GET_NEXT(bp))</span><br><span class="line">        <span class="keyword">if</span> (GET_SIZE(HDRP(bp)) &gt;= asize)</span><br><span class="line">            <span class="keyword">return</span> bp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">place</span><span class="params">(<span class="type">void</span> *bp, <span class="type">size_t</span> asize)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> rest_size = GET_SIZE(HDRP(bp)) - asize;</span><br><span class="line">    <span class="type">char</span> *cur_bp = (<span class="type">char</span> *)bp;</span><br><span class="line"></span><br><span class="line">    remove_from_free_list(bp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rest_size &gt;= <span class="number">2</span> * DSIZE) &#123;</span><br><span class="line"></span><br><span class="line">        PUT(HDRP(bp), PACK(asize, <span class="number">1</span>));</span><br><span class="line">        PUT(FTRP(bp), PACK(asize, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        bp = NEXT_BLKP(bp);</span><br><span class="line"></span><br><span class="line">        PUT(HDRP(bp), PACK(rest_size, <span class="number">0</span>));</span><br><span class="line">        PUT(FTRP(bp), PACK(rest_size, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        SET_PREV(bp, <span class="number">0</span>), SET_NEXT(bp, <span class="number">0</span>);</span><br><span class="line">        coalesce(bp);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">        asize = GET_SIZE(HDRP(bp));</span><br><span class="line">        PUT(HDRP(cur_bp), PACK(asize, <span class="number">1</span>));</span><br><span class="line">        PUT(FTRP(cur_bp), PACK(asize, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * mm_init - initialize the malloc package.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mm_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    mem_init();</span><br><span class="line">    <span class="keyword">if</span> ((heap_listp = (<span class="type">char</span> *)mem_sbrk(<span class="number">4</span> * WSIZE)) == (<span class="type">void</span> *)<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    PUT(heap_listp, <span class="number">0</span>);</span><br><span class="line">    PUT(heap_listp + (<span class="number">1</span> * WSIZE), PACK(DSIZE, <span class="number">1</span>));</span><br><span class="line">    PUT(heap_listp + (<span class="number">2</span> * WSIZE), PACK(DSIZE, <span class="number">1</span>));</span><br><span class="line">    PUT(heap_listp + (<span class="number">3</span> * WSIZE), PACK(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">    heap_listp += (<span class="number">2</span> * WSIZE);</span><br><span class="line">    free_listp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * mm_malloc - Allocate a block by incrementing the brk pointer.</span></span><br><span class="line"><span class="comment"> *     Always allocate a block whose size is a multiple of the alignment.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">mm_malloc</span><span class="params">(<span class="type">size_t</span> size)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> asize;</span><br><span class="line">    <span class="type">size_t</span> extendsize;</span><br><span class="line">    <span class="type">char</span> *bp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size &lt;= DSIZE) asize = <span class="number">2</span> * DSIZE;</span><br><span class="line">    <span class="keyword">else</span> asize = DSIZE * ((size + (DSIZE) + (DSIZE - <span class="number">1</span>)) / DSIZE);</span><br><span class="line"></span><br><span class="line">    bp = (<span class="type">char</span> *)find_fit(asize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        place(bp, asize);</span><br><span class="line">        <span class="keyword">return</span> bp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    extendsize = asize;</span><br><span class="line"></span><br><span class="line">    bp = (<span class="type">char</span> *)extend_heap(extendsize / WSIZE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bp == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    place(bp, asize);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * mm_free - Freeing a block does nothing.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">mm_free</span><span class="params">(<span class="type">void</span> *ptr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (ptr == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> size = GET_SIZE(HDRP(ptr));</span><br><span class="line"></span><br><span class="line">    PUT(HDRP(ptr), PACK(size, <span class="number">0</span>));</span><br><span class="line">    PUT(FTRP(ptr), PACK(size, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    SET_PREV(ptr, <span class="number">0</span>), SET_NEXT(ptr, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    coalesce(ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * mm_realloc - Implemented simply in terms of mm_malloc and mm_free</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">mm_realloc</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">        mm_free(ptr);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ptr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> mm_malloc(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *newptr = mm_malloc(size);</span><br><span class="line">    <span class="keyword">if</span> (!newptr) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">size_t</span> oldsize = GET_SIZE(HDRP(ptr));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size &lt; oldsize) oldsize = size;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(newptr, ptr, oldsize);</span><br><span class="line">    mm_free(ptr);</span><br><span class="line">    <span class="keyword">return</span> newptr;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">checkheap</span><span class="params">(<span class="type">int</span> verbose)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">printblock</span><span class="params">(<span class="type">void</span> *bp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> hsize, halloc, fsize, falloc;</span><br><span class="line"></span><br><span class="line">  checkheap(<span class="number">0</span>);</span><br><span class="line">  hsize = GET_SIZE(HDRP(bp));</span><br><span class="line">  halloc = GET_ALLOC(HDRP(bp));</span><br><span class="line">  fsize = GET_SIZE(FTRP(bp));</span><br><span class="line">  falloc = GET_ALLOC(FTRP(bp));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hsize == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p: EOL\n&quot;</span>, bp);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%p: header: [%ld:%c] footer: [%ld:%c]\n&quot;</span>, bp,</span><br><span class="line">      hsize, (halloc ? <span class="string">&#x27;a&#x27;</span> : <span class="string">&#x27;f&#x27;</span>),</span><br><span class="line">      fsize, (falloc ? <span class="string">&#x27;a&#x27;</span> : <span class="string">&#x27;f&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">checkblock</span><span class="params">(<span class="type">void</span> *bp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ((<span class="type">size_t</span>)bp % <span class="number">8</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Error: %p is not doubleword aligned\n&quot;</span>, bp);</span><br><span class="line">  <span class="keyword">if</span> (GET(HDRP(bp)) != GET(FTRP(bp)))</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Error: header does not match footer\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * checkheap - Minimal check of the heap for consistency</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">checkheap</span><span class="params">(<span class="type">int</span> verbose)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *bp = heap_listp;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (verbose)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Heap (%p):\n&quot;</span>, heap_listp);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((GET_SIZE(HDRP(heap_listp)) != DSIZE) || !GET_ALLOC(HDRP(heap_listp)))</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Bad prologue header\n&quot;</span>);</span><br><span class="line">  checkblock(heap_listp);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (bp = heap_listp; GET_SIZE(HDRP(bp)) &gt; <span class="number">0</span>; bp = NEXT_BLKP(bp)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (verbose)</span><br><span class="line">      printblock(bp);</span><br><span class="line">    checkblock(bp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (verbose)</span><br><span class="line">    printblock(bp);</span><br><span class="line">  <span class="keyword">if</span> ((GET_SIZE(HDRP(bp)) != <span class="number">0</span>) || !(GET_ALLOC(HDRP(bp))))</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Bad epilogue header\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>45 (util) + 40 (thru) = 85/100</code></p><p>优化的点主要在速度上</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP 学习笔记 (第八章)</title>
      <link href="/2023/09/01/8csapp/"/>
      <url>/2023/09/01/8csapp/</url>
      
        <content type="html"><![CDATA[<h1>Chapter 8: 异常控制流</h1><p>异常控制流 <code>Exceptional Control Flow, ECF</code></p><ol><li>理解 ECF 帮助你理解重要的系统概念</li><li>理解 ECF 帮助你理解应用程序是如何与操作系统交互的</li><li>理解 ECF 帮助你编写有趣的新应用程序</li><li>理解 ECF 帮助你理解并发</li><li>理解 ECF 帮助你理解软件异常如何工作</li></ol><h2 id="8-1-异常">8.1 异常</h2><p><strong>异常</strong> 控制流的突变, 用来响应处理器状态中某些变化</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.7cjcua34j1o0.png" alt=""></p><p><strong>事件</strong> 状态变化</p><p>每当有异常发生时, 处理器通过异常表来找到对应的异常处理程序</p><ol><li>处理程序返回到 $I_{curr}$</li><li>处理程序返回到 $I_{next}$</li><li>处理程序中断原本程序</li></ol><h3 id="8-1-1-异常处理">8.1.1 异常处理</h3><p>每种类型的异常都有一个异常号, 有些是处理器设计者分配的, 有些是操作系统内核分配的</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4nyapbmz38u0.png" alt=""></p><p>异常表的起始地址放在一个 <strong>异常表基址寄存器</strong> 的特殊 CPU 寄存器中</p><p>异常类似于过程调用, 但有些不同</p><ol><li>异常的返回地址是当前指令或者下一套指令, 过程调用中处理器把返回地址压入栈中</li><li>处理器把一些额外的状态压入到栈中</li><li>控制从用户程序转移到内核, 所有的项目被压到内核栈中, 而非用户栈</li><li>异常处理程序运行在内核模式下, 可以访问任何系统资源</li></ol><h3 id="8-1-2-异常的类别">8.1.2 异常的类别</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1bx3tew0w7k0.png" alt=""></p><p><strong>中断</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1u9elplf1nb4.png" alt=""></p><p><strong>陷阱和系统调用</strong></p><p>系统调用: 在用户程序和内核之间提供一个像过程的接口</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6x8g7yx7dow0.png" alt=""></p><p>普通的函数运行在用户模式下, 只能访问与调用函数相同的栈 <br>系统调用运行在内核模式下, 可以访问任意系统资源</p><p><strong>故障</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4slop7tpd8u0.png" alt=""></p><p>典型的故障是缺页异常</p><p><strong>终止</strong></p><p>致命错误, 终止程序</p><h3 id="8-1-3-Linux-x86-64-系统中的异常">8.1.3 Linux/x86-64 系统中的异常</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4htjh5tsey20.webp" alt=""></p><p>汇编中使用 <code>syscall</code> 进行系统调用, 编号存储在 <code>%rax</code> 中</p><h2 id="8-2-进程">8.2 进程</h2><p>进程: 一个执行中的程序的实例</p><h3 id="8-2-1-逻辑控制流">8.2.1 逻辑控制流</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5rmf3bsnpoo0.png" alt=""></p><p>进程是轮流使用处理器的, 每个进程的每段指令之间看起来有一点时间间隔 <br>实际上是 CPU 将当前程序挂起, 转而执行其他进程, 执行完毕之后再切换回来</p><h3 id="8-2-2-并发流">8.2.2 并发流</h3><p>并发流: 一个流的执行在时间上去另一个流重叠, 两个流并发运行 <br>并发: 多个流并发执行的一般现象 <br>多任务: 一个进程与其他进程轮流进行的概念 <br>时间片: 一个进程执行它的控制流的一部分的每一时间段</p><p>并行流: 两个流并发地运行在不同的处理器核或者计算机上</p><h3 id="8-2-3-私有地址空间">8.2.3 私有地址空间</h3><p>进程为每个程序提供一种假象, 每个程序独占地使用系统内存空间 <br>进程为每个程序提供私有地址空间, 基本格式相同</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5y3ky9m9ivk0.png" alt=""></p><h3 id="8-2-4-用户模式与内核模式">8.2.4 用户模式与内核模式</h3><p>使用某个寄存器中的模式位来提供这种功能, 模式位设置为 1 时启用内核模式</p><p>运行应用程序最开始都是在用户模式, 进入内核模式的唯一方法是异常</p><p><code>Linux</code> 通过 <code>/proc</code> 文件系统允许用户模式访问内核数据结构 <br>具体是把内核数据结构的输出放到这个目录下</p><h3 id="8-2-5-上下文切换">8.2.5 上下文切换</h3><p>使用上下文切换这样的异常控制流实现多任务</p><p>内核为每个进程维护一个上下文, 内核重新启动一个被暂挂的进程所需的状态</p><p>调度: 内核决定抢占进程并重新开始一个之前被抢占的进程的决策 <br>通过上下文切换的机制来将控制转移到新的进程</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5shxebi3p600.webp" alt=""></p><h2 id="8-3-系统调用错误处理">8.3 系统调用错误处理</h2><p>Unix 系统级函数遇到错误时, 通常返回 -1, 设置全局整数变量 <code>errno</code></p><p>使用错误处理来包装函数, 这样可以简化代码</p><h2 id="8-4-进程控制">8.4 进程控制</h2><h3 id="8-4-1-获取进程-ID">8.4.1 获取进程 ID</h3><p>每个进程都有唯一的无符号进程 (PID) <br><code>getpid()</code> 返回当前进程的 PID, <code>getppid()</code> 返回父进程的 PID</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">pid_t getpid(void);</span><br><span class="line">pid_t getppid(void);</span><br></pre></td></tr></table></figure><h3 id="8-4-2-创建和终止进程">8.4.2 创建和终止进程</h3><p>进程处在三种状态之一</p><ol><li>运行: 正在被执行或者等待被执行</li><li>停止: 运行的进程被挂起</li><li>终止: 进程永远停止</li></ol><p>使用 <code>fork()</code> 函数创建进程</p><ol><li>调用一次返回两次: <code>fork()</code> 函数有两个返回值, 对于父进程返回子进程 ID, 对于子进程返回 0</li><li>并发执行: 不能假定父进程和子进程执行的顺序</li><li>相同但是独立的地址空间: 子进程复制一遍父进程的地址空间, 随后的修改都时互不干扰的</li><li>共享文件: 子进程继承了父进程所有的打开文件</li></ol><h3 id="8-4-3-回收子进程">8.4.3 回收子进程</h3><p>进程终止时, 内存并没有马上消除它, 内存把它冻起来, 等父进程来回收</p><p>终止了还未回收的进程称为僵死进程</p><p>父进程终止了, 孤儿进程由 <code>init</code> 进程接管</p><p><code>init</code> 进程 PID 是 1, 系统启动时内核创建的, 不会终止, 是所有进程的祖先</p><p>父进程如果没有回收僵死子进程就终止了, 那么就让 <code>init</code> 回收它</p><p><code>man waitpid</code></p><h3 id="8-4-4-让进程休眠">8.4.4 让进程休眠</h3><p><code>man pause</code>, <code>man sleep</code></p><p>只要休眠进程收到一个未被忽略的信号, <code>sleep</code> 函数就会提前返回</p><h3 id="8-4-5-加载并运行程序">8.4.5 加载并运行程序</h3><p><code>execve</code> 函数在当前进程的上下文中加载并运行一个新程序</p><p><code>int main(int argc, char **argv, char **envp);</code></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6n50pv0ef980.png" alt=""></p><p><code>getenv</code> 和 <code>unsetenv</code> 函数分别是 寻找环境变量和删除环境数组变量的函数</p><h3 id="8-4-6-利用-fork-和-execve-运行程序">8.4.6 利用 fork 和 execve 运行程序</h3><p>给出简单的有缺陷的 <code>shell</code> 实现, 缺陷是不回收子进程</p><p>使用信号修复缺陷</p><h2 id="8-5-信号">8.5 信号</h2><p>信号提供一种机制, 通知用户进程 发生了这些异常</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4dh6hijkln20.webp" alt=""></p><h3 id="8-5-1-信号术语">8.5.1 信号术语</h3><ol><li>发送信号: 内核更新进程上下文的某个状态, 发送信号给目标进程的过程 <br>发送信号有如下两种原因: 系统检测到一个事件 / 一个进程调用了 <code>kill</code> 函数</li><li>接收信号: 目的进程被内核强迫 对信号的发送做出反应 <br>进程可以执行一个信号处理程序的用户层函数捕获这个信号 <br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.7fwkde0xfvg0.webp" alt=""></li></ol><p><strong>待处理信号</strong>: 发出而没有被接收的信号</p><p>一个进程中一个类型至多有一个待处理信号, 更多的待处理信号被丢弃</p><h3 id="8-5-2-发送信号">8.5.2 发送信号</h3><p><strong>进程组</strong> 每个进程属于一个进程组, 默认子进程和父进程一个进程组</p><p><code>getpgrp()</code> 返回当前进程的进程组 ID <br><code>setpgid(pid, pgid)</code> 改变进程组</p><p><strong>用 <code>/bin/kill</code> 程序发送信号</strong></p><p><code>/bin/kill -9 15213</code> 把信号 9 发送到 进程 15213 中 <br><code>/bin/kill -9 -15213</code> 把信号 9 发送到 进程组 15213 中所有的进程</p><p><strong>从键盘发送信号</strong></p><p>作业 (job) 表示为一条命令行求值而创建的进程</p><p>键入 <code>Ctrl-C</code> 终止前台作业, <code>Ctrl-Z</code> 停止(挂起)前台作业</p><p><strong>函数 <code>kill</code> 发送信号</strong></p><p><strong>函数 <code>alarm</code> 发送信号</strong></p><h3 id="8-5-3-接收信号">8.5.3 接收信号</h3><p>当内核把进程 $p$ 从内核模式切换到用户模式的时候, 它会检查未被阻塞的待处理信号的集合</p><ol><li>集合为空: $I_{next}$</li><li>集合不空: 选定集合中的最小的信号 $k$ 强制 $p$ 接收信号 $k$</li></ol><p>进程可以使用 <code>signal</code> 函数来修改和信号相关联的默认行为 <br><code>SIGSTOP</code> 和 <code>SIGKILL</code> 的默认行为不能修改</p><p><code>man signal</code></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.7fsto8guq1g0.webp" alt=""></p><h3 id="8-5-4-阻塞和解除阻塞信号">8.5.4 阻塞和解除阻塞信号</h3><ol><li>隐式阻塞机制: 内核默认阻塞当前信号处理程序所处理的信号类型 的待处理信号</li><li>显式阻塞机制: 使用一些辅助函数明确说明阻塞信号和解除阻塞信号</li></ol><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5rr1oyus6m00.webp" alt=""></p><h3 id="8-5-5-编写信号处理程序">8.5.5 编写信号处理程序</h3><p><strong>安全的信号处理</strong></p><p>事件处理程序和主程序并发运行, 如果两个程序并发地访问全局数据结构, 那么结果可能无法预测</p><ol><li>处理程序要尽可能简单: 例如处理程序设置个全局标志, 主程序周期性检查并处理</li><li>处理程序中只调用异步信号安全的函数 \ <br>异步信号安全函数: 可重入 / 不能被信号处理程序中断<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6ssqpltx58w0.webp" alt=""></li><li>保存和回复 <code>errno</code>: 防止处理程序中有函数改变 <code>errno</code></li><li>访问全局数据结构时阻塞所有的信号</li><li>用 <code>volatile</code> 声明全局变量</li><li>用 <code>sig_atomic_t</code> 声明标志</li></ol><p><strong>正确的信号处理</strong></p><p>未处理的信号是不排队的, 编写程序时要考虑不排队的问题</p><p><strong>可移植的信号处理</strong></p><p>不同的系统可能有不同的信号处理语义</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5r15fpjhp8w0.webp" alt=""></p><p>使用此函数指定信号处理语义</p><h3 id="8-5-6-同步流以避免讨厌的并发错误">8.5.6 同步流以避免讨厌的并发错误</h3><p>处理相同位置数据的 并发程序 一向是个难题</p><p><strong>竞争</strong> 是一种同步错误, 两个有操作顺序要求的函数, 因为并行而乱了顺序</p><p>父进程使用阻塞 <code>SIGCHLD</code>, 子进程再取消阻塞</p><h3 id="8-5-7-显式地等待信号">8.5.7 显式地等待信号</h3><p>使用 <code>sigsuspend</code> 函数来挂起进程, 并在收到信号的时候恢复进程执行</p><h2 id="8-6-非本地跳转">8.6 非本地跳转</h2><p>非本地跳转 将控制直接从一个函数转移到另一个函数</p><p><code>man setjmp</code>, <code>man longjmp</code></p><h2 id="8-7-操作进程的工具">8.7 操作进程的工具</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1nhlwypex6yo.png" alt=""></p><h2 id="8-8-小结">8.8 小结</h2><p>异常控制流</p><ol><li>硬件层: 处理器中的事件引发, 控制流转移到异常处理程序</li><li>操作系统层: 内核用 ECF 提供进程的基本概念</li><li>应用程序, 子进程, 运行程序, 捕获信号</li><li>非本地跳转</li></ol><h1>练习</h1><h2 id="8-1">8.1</h2><p>对错对</p><h2 id="8-2">8.2</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 子进程</span><br><span class="line">p1: x=1</span><br><span class="line">p2: x=2</span><br><span class="line">// 父进程</span><br><span class="line">p2: x=0</span><br></pre></td></tr></table></figure><h2 id="8-3">8.3</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4xlz1xpgbu40.webp" alt=""></p><p><code>acbc</code>, <code>abcc</code>, <code>bacc</code> 都有拓扑序</p><h2 id="8-4">8.4</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6xop3ignvfc0.webp" alt=""></p><p>6 行 <br>任何符合拓扑序的输出都可以</p><h2 id="8-5">8.5</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">snooze</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> secs)</span> &#123;</span><br><span class="line">    <span class="type">int</span> rear_secs = sleep(secs);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Slept for %d of %d secs.\n&quot;</span>, secs - rear_secs, secs);</span><br><span class="line">    <span class="keyword">return</span> rear_secs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-6">8.6</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[], <span class="type">char</span> *envp[])</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Command-line arguments:\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; argc; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;    argv[%2d]: %s\n&quot;</span>, i, argv[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Environment variables:\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; envp[i]; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;    envp[%2d]: %s\n&quot;</span>, i, envp[i]);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-7">8.7</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigint_handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">snooze</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> secs)</span> &#123;</span><br><span class="line">    <span class="type">int</span> rear_secs = sleep(secs);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Slept for %d of %d secs.\n&quot;</span>, secs - rear_secs, secs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rear_secs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (signal(SIGINT, sigint_handler) == SIG_ERR) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;signal error&quot;</span>);</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    snooze(atoi(argv[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-8">8.8</h2><p><code>213</code></p><h2 id="8-9">8.9</h2><p>只有第一行不是并发的</p><h2 id="8-10">8.10</h2><ol><li><code>fork</code></li><li><code>longjmp</code>, <code>execve</code></li><li><code>setjmp</code></li></ol><h2 id="8-11">8.11</h2><p>4</p><h2 id="8-12">8.12</h2><p>8</p><h2 id="8-13">8.13</h2><p>父进程 43, 子进程 2</p><p>每次输出的 $x$ 分别为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">432</span><br><span class="line">423</span><br><span class="line">243</span><br></pre></td></tr></table></figure><h2 id="8-14">8.14</h2><p>3</p><h2 id="8-15">8.15</h2><p>5</p><h2 id="8-16">8.16</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">counter = 2</span><br></pre></td></tr></table></figure><h2 id="8-17">8.17</h2><p>略</p><h2 id="8-18">8.18</h2><p>ACE</p><h2 id="8-19">8.19</h2><p>$2^n$</p><h2 id="8-20">8.20</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[], <span class="type">char</span> *envp[])</span> &#123;</span><br><span class="line">    </span><br><span class="line">    execve(<span class="string">&quot;/bin/ls&quot;</span>, argv, envp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-21">8.21</h2><p><code>abc</code>, <code>bac</code></p><h2 id="8-22">8.22</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">mysystem</span><span class="params">(<span class="type">char</span> *command)</span> &#123;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((pid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">char</span> *argv[<span class="number">4</span>] = &#123; <span class="string">&quot;&quot;</span>, <span class="string">&quot;-c&quot;</span>, command, <span class="literal">NULL</span> &#125;;</span><br><span class="line">        execve(<span class="string">&quot;/bin/sh&quot;</span>, argv, environ);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;child pid: %d\n&quot;</span>, pid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (waitpid(pid, &amp;status, <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (WIFEXITED(status))</span><br><span class="line">            <span class="keyword">return</span> WEXITSTATUS(status);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (WIFSIGNALED(status))</span><br><span class="line">            <span class="keyword">return</span> WTERMSIG(status);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-23">8.23</h2><p>信号没有排队机制</p><p>第一个信号处理时, 第二个信号是未处理状态, 第三四五信号被忽略</p><p>最终只处理两个信号</p><h2 id="8-24">8.24</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ((pid = waitpid(<span class="number">-1</span>, &amp;status, <span class="number">0</span>) &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (WIFEXITED(status))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child %d terminated normally with exit status=%d\n&quot;</span>, pid, WEXITSTATUS(status));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (WIFSIGNALED(status)) &#123;</span><br><span class="line">        <span class="type">char</span>* sigErr = strsignal(WTERMSIG(status))</span><br><span class="line">        psignal(WTERMSIG(status), sigErr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-25">8.25</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sigalrm_handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (alarm(<span class="number">0</span>) == <span class="number">0</span>) _exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* <span class="title function_">tfgets</span><span class="params">(<span class="type">char</span> *str, <span class="type">int</span> n, FILE* stream)</span> &#123;</span><br><span class="line">    signal(SIGALRM, sigalrm_handler);</span><br><span class="line">    alarm(<span class="number">5</span>);</span><br><span class="line">    fgets(str, n, stream);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-26">8.26</h2><p><code>shell lab</code></p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP 学习笔记 (第七章)</title>
      <link href="/2023/08/29/7csapp/"/>
      <url>/2023/08/29/7csapp/</url>
      
        <content type="html"><![CDATA[<h1>Chapter 7: 链接</h1><p>链接是将各种代码和数据片段收集并组合成一个单一文件的过程 <br>链接可以在 编译时, 加载时, 运行时进行, 通常是由链接器来执行</p><h2 id="7-1-编译器驱动程序">7.1 编译器驱动程序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -Og -o prog main.c sum.c</span><br></pre></td></tr></table></figure><p>详细步骤</p><ol><li><code>cpp</code> 预处理器, 将 <code>.c</code> 翻译成 <code>ASCII</code> 码的中间文件 <code>.i</code></li><li><code>ccl</code> C 编译器, 将 <code>.i</code> 翻译成 汇编语言文件 <code>.s</code></li><li><code>as</code> 汇编器, 将 <code>.s</code> 翻译成可重定位目标文件 <code>.o</code></li><li><code>ld</code> 链接器, 将 若干 <code>.o</code> 文件和必要的系统文件组合在一起, 产生可执行目标文件</li><li><code>shell</code> 调用操作系统中的 加载器 <code>loader</code>, 把可执行文件的代码和数据复制到内存, 开始执行</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cpp main.c ./tmp/main.i</span><br><span class="line">ccl ./tmp/main.i -Og -o ./tmp/main.s</span><br><span class="line">as -o ./tmp/main.o ./tmp/main.s</span><br><span class="line">ld -o prog [system files] ./tmp/main.o ./tmp/sum.o</span><br><span class="line">./prog</span><br></pre></td></tr></table></figure><h2 id="7-2-静态链接">7.2 静态链接</h2><p>可重定位目标文件由各种不同的代码和数据节组成 <br>指令在一节中, 初始化了的全局变量在一节中, 未初始化的变量又在另外一节中</p><p><code>ld</code> 这样的静态链接器</p><ol><li>输入: 一组可重定位目标文件</li><li>输出: 完全链接的可执行目标文件</li></ol><p>链接器的任务</p><ol><li>符号解析: 源文件中用到的函数, 全局变量, <code>static</code> 静态变量都是符号 <br>链接器找到这些符号的定义, 并将他们关联起来</li><li>重定位: 编译器和链接器生成的都是 地址从零开始 的代码和数据 <br>链接器把符号定义和内存位置关联起来, 从而重定位这些节 <br>之后 修改所有对这些符号的引用到新的位置</li></ol><h2 id="7-3-目标文件">7.3 目标文件</h2><ol><li>可重定位目标文件: 包含二进制代码和数据, 可被链接</li><li>可执行目标文件: 包含二进制代码和数据, 可被运行</li><li>共享目标文件: 特殊的可重定位目标文件, 可在加载或者执行的时候被动态链接</li></ol><p>每个系统都有不同的目标文件格式, 但概念大致相同</p><p>现在 <code>x86 Linux</code> 采用 <code>ELF (Executable and Linkable Format)</code> 格式, 讨论集中在 <code>ELF</code> 进行</p><h2 id="7-4-可重定位目标文件">7.4 可重定位目标文件</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.z5yv0jb4ygg.webp" alt=""></p><p>ELF头 和 节头部表中间的都是节</p><ol><li>ELF 头: 系统字的大小, 字节顺序, 头大小, 目标文件类型, 机器类型, 节头部表位置大小数量等</li><li><code>.text</code> 程序机器代码</li><li><code>.rodata</code> 只读数据</li><li><code>.data</code> 已初始化的全局和静态变量</li><li><code>.bss</code> 未初始化的静态变量, 初始化为 0 的全局/静态变量</li><li><code>.symlab</code> 符号表, 存放函数, 全局/静态变量的信息</li><li><code>.rel.text</code> 存储代码段的重定位信息</li><li><code>.rel.data</code> 存储 函数, 全局/静态变量的 重定位信息</li><li><code>.debug</code> 局部变量信息, 原始 C 代码, 编译器加 <code>-g</code> 参数时才会出现</li><li><code>.line</code> 行号和 <code>.text</code> 节中二进制代码的映射</li><li><code>.strlab</code>, 字符串表, 包括所有符号表, 节名字</li></ol><h2 id="7-5-符号和符号表">7.5 符号和符号表</h2><p>设一个可重定位目标文件是 $m$</p><p>有三种不同的符号</p><ol><li>$m$ 定义, 其他模块可使用 的全局符号</li><li>其他模块定义, $m$ 可使用 的全局符号</li><li>$m$ 定义, $m$ 使用的局部符号, <code>static</code> 的函数和变量</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">int</span> name;   <span class="comment">// 符号表中的字节偏移, 指出符号名字的位置</span></span><br><span class="line">    <span class="type">char</span> type:<span class="number">4</span>, <span class="comment">// 指明类型是函数还是数据</span></span><br><span class="line">         binding:<span class="number">4</span>; <span class="comment">// 表明符号是本地的还是全局的</span></span><br><span class="line">    <span class="type">char</span> reserved; <span class="comment">// 未使用</span></span><br><span class="line">    <span class="type">short</span> section; <span class="comment">// 到节头部表的索引</span></span><br><span class="line">    <span class="type">long</span> value; <span class="comment">// 在 .o 文件中是符号对应数据的相对位置</span></span><br><span class="line">                <span class="comment">// 在可执行目标文件中是符号对应数据的绝对位置</span></span><br><span class="line">    <span class="type">long</span> size; <span class="comment">// 目标大小</span></span><br><span class="line">&#125; Elf64_Symbol;</span><br></pre></td></tr></table></figure><p>可重定位目标文件中有三个伪节:</p><ol><li><code>ABS</code> 不该被重定位的符号</li><li><code>UNDEF</code> 未定义的符号, 本模块引用, 其他模块定义</li><li><code>COMMON</code> 未初始化的全局变量, 注意和 <code>.bss</code> 的区别</li></ol><h2 id="7-6-符号解析">7.6 符号解析</h2><ol><li>局部符号, 本模块定义本模块引用</li><li>全局符号, 引用时发现不是在本模块定义就会假设在其他模块中定义 <br>生成一个符号表条目, 交给链接器处理</li></ol><h3 id="7-6-1-链接器如何解析多重定义的全局符号">7.6.1 链接器如何解析多重定义的全局符号</h3><p>编译器向汇编器输出每个全局符号: <br>强(函数, 已初始化的全局变量) <br>弱(未初始化的全局变量)</p><ol><li>不允许有多个同名的强符号</li><li>如果有一个强符号和弱符号同名, 选择强符号</li><li>多个弱符号同名, 任选一个</li></ol><p><code>-fno-common</code> 参数 让链接器在遇到多重定义的全局符号时触发错误 <br><code>-Werror</code> 警告当成错误</p><h3 id="7-6-2-与静态库链接">7.6.2 与静态库链接</h3><p>静态库以一种 <code>archive</code> 的形式存放在磁盘中, 文件后缀名为 <code>.a</code> <br>这种文件是一组连接起来的可重定位目标文件的集合, 有一个头部描述每个成员目标文件的信息</p><p>链接的时候只需要复制 程序引用的符号 所在的可重定位目标文件即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// addvec.c</span></span><br><span class="line"><span class="type">int</span> addcnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addvec</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b, <span class="type">int</span> *c, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    addcnt++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        c[i] = a[i] + b[i];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mulvec.c</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> mulcnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mulvec</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b, <span class="type">int</span> *c, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    mulcnt++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        c[i] = a[i] * b[i];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vector.h</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addvec</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b, <span class="type">int</span> *c, <span class="type">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mulvec</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b, <span class="type">int</span> *c, <span class="type">int</span> n)</span></span>;</span><br></pre></td></tr></table></figure><p>构建静态库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c addvec.c mulvec.c</span><br><span class="line">ar rcs libvector.a addvec.o mulvec.o</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vector.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">2</span>] = &#123; <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br><span class="line"><span class="type">int</span> b[<span class="number">2</span>] = &#123; <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line"><span class="type">int</span> c[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">addvec</span>(a, b, c, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c = [%d, %d]&quot;</span>, c[<span class="number">0</span>], c[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用静态库编译 <br><code>-static</code> 表示使用静态库<br><code>-L. -lvector</code> 或者 <code>./libvector.a</code> 确认静态库位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc -c main.c</span><br><span class="line">gcc -static -o prog main.o ./libvector.a</span><br><span class="line">./prog</span><br></pre></td></tr></table></figure><h2 id="7-6-3-链接器如何使用静态库来解析引用">7.6.3 链接器如何使用静态库来解析引用</h2><p>在符号解析阶段, 链接器从左到右扫描可重定位目标文件和存档文件</p><p>链接器维护如下内容</p><ol><li><code>E</code> 表示应该合并到可执行文件的可重定位目标集合</li><li><code>U</code> 表示引用了但是还未定义的符号</li><li><code>D</code> 表示已经定义了的符号</li></ol><p>链接器解析流程</p><ol><li>如果输入的是目标文件, 那么加入 <code>E</code>, 并修改 <code>U</code>, <code>D</code></li><li>如果输入的是存档文件, 那么扫描存档的成员目标文件 $m$ <br>如果 $m$ 定义的一个符号在 U 中, 那么把 $m$ 加入到 <code>E</code>, 修改 <code>U</code>, <code>D</code></li><li>扫描完所有输入之后, 如果 <code>U</code> 是空的, 那么就构架可执行目标文件</li></ol><p>如果定义一个符号的库在引用这个符号的文件之前, 那么就会报错</p><p>建议把 库文件放到最后, 并且按照拓扑序组织库文件 <br>$x$ 调用 $y$, 先放 $x$ 再放 $y$</p><h2 id="7-7-重定位">7.7 重定位</h2><ol><li>重定位节和符号定义:<br>把所有可重定位目标文件的所有相同类型的节合并 <br>将运行时的内存地址赋给每个节每个符号, 这样指令和全局变量就有正确的地址了</li><li>重定位节中的符号引用:<br>把所有引用指向的地址修改正确</li></ol><h3 id="7-7-1-重定位条目">7.7.1 重定位条目</h3><p>汇编器遇到最终位置未知的引用, 就会生成重定位条目 <br>代码的重定位条目放在 <code>.ret.text</code> 中, 已初始化数据的重定位条目放在 <code>.ret.data</code> 中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">long</span> offset;  <span class="comment">// 偏移量</span></span><br><span class="line">    <span class="type">long</span> type:<span class="number">32</span>, <span class="comment">// 重定位类型</span></span><br><span class="line">         symbol:<span class="number">32</span>; <span class="comment">// 符号表下标</span></span><br><span class="line">    <span class="type">long</span> addend;  <span class="comment">// 某些类型的</span></span><br><span class="line">&#125; Elf64_Rela;</span><br></pre></td></tr></table></figure><p>列出两种最基本的类型</p><ol><li><code>R_X86_64_PC32</code> 重定位相对引用</li><li><code>R_X86_64_32</code> 重定位绝对引用</li></ol><h2 id="7-7-2-重定位符号引用">7.7.2 重定位符号引用</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5kopgorsjq0.png" alt=""></p><p><strong>重定位 PC 相对引用</strong></p><p>找到应该修改的字段位置, 包括 <strong><code>0xf</code></strong> 所在的 4 个字节, 所以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">offset = 0xf;</span><br><span class="line">symbol = sum;</span><br><span class="line">type = R_X86_64_PC32</span><br><span class="line">addend = -4;</span><br></pre></td></tr></table></figure><p>假设 <code>ADDR(s) = ADDR(.text) = 0x4004d0</code>, <code>ADDR(symbol) = ADDR(sum) = 0x4004d0</code></p><p>应该修改字段的地址 <code>refaddr = ADDR(s) + offset = 0x4004df</code> \</p><p>CPU 在执行完 <code>call</code> 指令之后, PC 变成 <code>0x4004de</code>, 此时 +5 才能得到 <code>sum</code> 的地址 <br>所以这个字段改成 <code>05 00 00 00</code></p><p><code>*refptr = ADDR(sum) - refaddr + addend = 0x5</code>, 所以得到 <code>addend</code> 值为 -4</p><p><strong>重定位 PC 绝对引用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">offset = 0xa;</span><br><span class="line">symbol = array;</span><br><span class="line">type = R_X86_64_32;</span><br><span class="line">addend = 0</span><br></pre></td></tr></table></figure><p>假设 <code>ADDR(array) = 0x601018</code></p><p>所以值应该修改成 <code>18 10 60 00</code>, 所以 <code>addend = 0</code></p><h2 id="7-8-可执行目标文件">7.8 可执行目标文件</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1lgcnlqk4mu8.png" alt=""></p><h2 id="7-9-加载可执行目标文件">7.9 加载可执行目标文件</h2><p>加载: 将程序复制到内存并运行</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6ne6dj1d8q80.webp" alt=""></p><h2 id="7-10-动态链接共享库">7.10 动态链接共享库</h2><p>静态库的缺点</p><ol><li>需要定期维护和更新</li><li>基本每个程序都用的函数, 会在内存中被复制 $n$ 遍</li></ol><p>动态链接: 在程序运行或加载的时候, 共享库加载到任意内存地址, 并和一个内存中的程序链接</p><p>动态链接器: 执行动态链接</p><p>做到共享的方式:</p><ol><li>在存储空间中只有一份 <code>.so</code> 文件</li><li>在内存中可以有 <code>.text</code> 的共享对象</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -fpic -o libvector.so addvec.c mulvec.c</span><br><span class="line">gcc -o prog main.c ./libvector.so</span><br></pre></td></tr></table></figure><p><code>-fpic</code> 指示编译器生成与位置无关的代码, <code>-shared</code> 表示共享</p><p><code>prog</code> 有一个 <code>.interp</code> 节, 包含动态链接器的路径名</p><p>加载器加载并运行动态链接器, 动态链接器开始工作</p><ol><li>重定位 <code>libc.so</code> 的代码和数据到内存</li><li>重定位 <code>libvector.so</code> 的代码和数据到内存</li><li>重定位 <code>main.c</code> 中在如上两个共享库中的符号引用</li></ol><h2 id="7-11-从应用程序中加载和链接共享库">7.11 从应用程序中加载和链接共享库</h2><p>动态链接的作用:</p><ol><li>分发软件: 用户下载新的共享库文件, 程序运行时直接链接新的共享库文件</li><li>构建高性能 Web 服务器: 生成动态内容</li></ol><p>通过操作系统和语言提供的接口来显式地调用共享库</p><h2 id="7-12-位置无关代码">7.12 位置无关代码</h2><p>可以加载而无需重定位的代码称为位置无关代码 (<code>Position-Independent Code, PIC</code>)</p><p>共享库的编译必须使用 <code>-fpic</code> 参数</p><h2 id="7-13-库打桩机制">7.13 库打桩机制</h2><p>库打桩允许你截获对共享库的调用, 取而代之执行自己的代码</p><h3 id="7-13-1-编译时打桩">7.13.1 编译时打桩</h3><p>有源码时适用</p><p>写个头文件, 头文件里有个宏, 宏把调用的库函数改成自己的函数 <br>修改源码, 包括上这个头文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c mymalloc.c</span><br><span class="line">gcc -I. -o intc int.c mymalloc.o</span><br></pre></td></tr></table></figure><h3 id="7-13-2-链接时打桩">7.13.2 链接时打桩</h3><p>有可重定位目标文件时适用</p><p><code>__wrap_name</code> 是你的函数, <code>__real_name</code> 是原始函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c mymalloc.c int.c</span><br><span class="line">gcc -Wl, --wrap, malloc -Wl, --wrap, free -o intl int.o mymalloc.o</span><br></pre></td></tr></table></figure><p><code>-Wl, --wrap, malloc</code> 表示让链接器重定位的时候</p><ol><li>把 <code>int.c</code> 中调用的函数定位到 <code>__wrap_malloc</code> 中</li><li>把调用的 <code>__real_malloc</code> 当作原始函数</li></ol><h3 id="7-13-3-运行时打桩">7.13.3 运行时打桩</h3><p>有可执行文件时适用</p><p>写一个文件, 不要包含 <code>malloc.h</code>, 有一个叫 <code>malloc</code> 的函数 <br>函数中使用 运行时链接 来调用 <code>malloc</code> <br>然后把动态链接器中的 <code>LD_PRELOAD</code> 环境变量改一下, 使得动态连接的时候先使用自己定义的库</p><p>这样动态链接的时候就会优先使用自己定义的库</p><h2 id="7-14-处理目标文件的工具">7.14 处理目标文件的工具</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4et8avjt5lk0.webp" alt=""></p><h2 id="7-15-小结">7.15 小结</h2><p>三种目标文件</p><ol><li>可重定位目标文件 <code>.o</code></li><li>可执行目标文件</li><li>共享目标文件 <code>.so</code></li></ol><p>链接器通过符号解析和重定位来连接</p><h1>练习</h1><h2 id="7-1">7.1</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6ajht71dsdw0.webp" alt=""></p><h2 id="7-2">7.2</h2><ol><li><code>main.1</code>, <code>main.1</code></li><li>错误</li><li><code>x.2</code>, <code>x.2</code></li></ol><h2 id="7-3">7.3</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc -static -o prog p.o libx.a</span><br><span class="line">gcc -static -o prog p.o libx.a liby.a</span><br><span class="line">gcc -static -o prog p.o libx.a liby.a libx.a</span><br></pre></td></tr></table></figure><h2 id="7-4">7.4</h2><p><code>0x4004df</code>, <code>0x4004e8</code></p><h2 id="7-5">7.5</h2><p><code>swap</code> 地址为 <code>0x4004e8</code> <br><code>call</code> 下一条指令是 <code>0x4004de</code></p><p>相减得 <code>0xa</code></p><h2 id="7-6">7.6</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6ruvbzkj36k0.png" alt=""></p><h2 id="7-7">7.7</h2><p><code>bar5.c</code> 中 <code>static double x;</code></p><h2 id="7-8">7.8</h2><p><code>static</code> 既不是强符号也不是弱符号, 所以不管他</p><ol><li>都是 <code>main.1</code></li><li>未知</li><li>错误</li></ol><h2 id="7-9">7.9</h2><p><code>main</code> 函数第一条指令是 <code>push</code>, 号码为 <code>0x55</code>, 所以输出 <code>0x55</code></p><h2 id="7-10">7.10</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc -static -o prog p.o libx.a p.o</span><br><span class="line">gcc -static -o prog p.o libx.a liby.a libx.a</span><br><span class="line">gcc -static -o prog p.o libx.a liby.a libx.a libz.a</span><br></pre></td></tr></table></figure><h2 id="7-11">7.11</h2><p><code>z[2]</code> 在 <code>.bss</code> 里, 一开始不给他们分配内存</p><p>运行的时候给他们分配 8 字节, <code>0x228 -&gt; 0x230</code></p><h2 id="7-12">7.12</h2><p><code>0xa</code>, <code>0x22</code></p><h2 id="7-13">7.13</h2><p>A</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ar -t /usr/lib32/libc.a | wc -l</span><br><span class="line">ar -t /usr/lib32/libm.a | wc -l</span><br></pre></td></tr></table></figure><p>B</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">readelf -S prog1</span><br><span class="line">readelf -S prog2</span><br></pre></td></tr></table></figure><p>发现节中多了 <code>.debug</code> 的部分 \</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objdump -d prog1</span><br><span class="line">objdump -d prog2</span><br></pre></td></tr></table></figure><p>但是可执行代码的部分相同</p><p>C</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lozical@LAPTOP-RPT2HO0D:/usr/bin$ cd /usr/bin &amp;&amp; ldd gcc</span><br><span class="line">        linux-vdso.so.1 (0x00007fffed336000)</span><br><span class="line">        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f9614183000)</span><br><span class="line">        /lib64/ld-linux-x86-64.so.2 (0x00007f96143b7000)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP 学习笔记 (第五章)</title>
      <link href="/2023/08/29/5csapp/"/>
      <url>/2023/08/29/5csapp/</url>
      
        <content type="html"><![CDATA[<h1>Chapter 5: 优化程序性能</h1><h2 id="5-1-优化编译器的能力和局限性">5.1 优化编译器的能力和局限性</h2><p>现代编译器向用户提供一些对它们所使用的优化的控制, 最简单的是指定优化级别 <br><code>-Og</code>, <code>-O1</code>, <code>-O2</code>, <code>-O3</code> 从低到高是不同的优化等级</p><p>编译器对程序使用安全的优化 <br>一个函数以两个指针为参数, 编译器就要考虑两个指针相同的情况 <br>多次调用函数的时候, 就要考虑函数的副作用—对全局变量产生的影响</p><h2 id="5-2-表示程序性能">5.2 表示程序性能</h2><p><code>CPE(Cycles Per Elements)</code> 表示每个元素所需的周期数, 在度量执行重复计算的程序时很适当</p><p>时钟运行频率: 每秒处理器执行多少个周期</p><h2 id="5-3-程序示例">5.3 程序示例</h2><p>使用如下程序来测试优化等级</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> <span class="type">data_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">long</span> len;</span><br><span class="line">    <span class="type">data_t</span> *data;</span><br><span class="line">&#125; vec_rec, *vec_ptr;</span><br><span class="line"></span><br><span class="line"><span class="function">vec_ptr <span class="title">new_vec</span><span class="params">(<span class="type">long</span> len)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    vec_ptr res = (vec_ptr)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(vec_rec));</span><br><span class="line">    <span class="type">data_t</span> *data = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!res) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    res-&gt;len = len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        data = (<span class="type">data_t</span> *)<span class="built_in">calloc</span>(len, <span class="built_in">sizeof</span>(<span class="type">data_t</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">            <span class="built_in">free</span>((<span class="type">void</span> *)res);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res-&gt;data = data;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_vec_element</span><span class="params">(vec_ptr v, <span class="type">long</span> index, <span class="type">data_t</span> *dest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= v-&gt;len) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    *dest = v-&gt;data[index];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">vec_length</span><span class="params">(vec_ptr v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v-&gt;len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDENT 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OP +</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">combine1</span><span class="params">(vec_ptr v, <span class="type">data_t</span> *dest)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    *dest = IDENT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> i = <span class="number">0</span>; i &lt; <span class="built_in">vec_length</span>(v); i++) &#123;</span><br><span class="line">        <span class="type">data_t</span> val;</span><br><span class="line">        <span class="built_in">get_vec_element</span>(v, i, &amp;val);</span><br><span class="line">        *dest = *dest OP val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    vec_ptr v = <span class="built_in">new_vec</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> times = <span class="number">1e7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">vec_length</span>(v); j++)</span><br><span class="line">            v-&gt;data[j] = <span class="built_in">rand</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="type">data_t</span> sum;</span><br><span class="line">        <span class="built_in">combine1</span>(v, &amp;sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">g++ -o tmp tmp.cpp &amp;&amp; time ./tmp</span><br><span class="line">g++ -Og -o tmp tmp.cpp &amp;&amp; time ./tmp</span><br><span class="line">g++ -O1 -o tmp tmp.cpp &amp;&amp; time ./tmp</span><br><span class="line">g++ -O2 -o tmp tmp.cpp &amp;&amp; time ./tmp</span><br><span class="line">g++ -O3 -o tmp tmp.cpp &amp;&amp; time ./tmp</span><br></pre></td></tr></table></figure><p>可以轻松观察优化等级带来的影响</p><h2 id="5-4-消除循环的低效率">5.4 消除循环的低效率</h2><p>把 <code>combine1</code> 中循环的结束条件中 <code>vec_length</code> 函数放到函数之外</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">combine2</span><span class="params">(vec_ptr v, <span class="type">data_t</span> *dest)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    *dest = IDENT;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> length = <span class="built_in">vec_length</span>(v);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="type">data_t</span> val;</span><br><span class="line">        <span class="built_in">get_vec_element</span>(v, i, &amp;val);</span><br><span class="line">        *dest = *dest OP val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现在低等级的优化级别中, 运行速度明显加快</p><p>但是如果 <code>vec_length</code> 是一个线性复杂度的函数, 整段函数的复杂度变为 $O(n^2)$ <br>这时使用代码移动可以让整段函数重新变成 $O(n)$</p><p><strong>代码移动</strong> 多次执行相同运算结果相同, 可以把这段代码放到外部</p><h2 id="5-5-减少过程调用">5.5 减少过程调用</h2><p>可以直接操作数组来获取元素而不是通过调用函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">data_t</span> *<span class="title">get_vec_start</span><span class="params">(vec_ptr v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">combine3</span><span class="params">(vec_ptr v, <span class="type">data_t</span> *dest)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    *dest = IDENT;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> length = <span class="built_in">vec_length</span>(v);</span><br><span class="line">    <span class="type">data_t</span> *data = <span class="built_in">get_vec_start</span>(v);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        *dest = *dest OP data[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种变换损害了程序的模块性, 但是提高了运行速度</p><h2 id="5-6-消除不必要的内存引用">5.6 消除不必要的内存引用</h2><p><code>combine3</code> 循环中每次都要调用 <code>dest</code> 指针所指向的内存 <br>可以通过引入中间变量而消除这种不必要的内存引用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">combine4</span><span class="params">(vec_ptr v, <span class="type">data_t</span> *dest)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> length = <span class="built_in">vec_length</span>(v);</span><br><span class="line">    <span class="type">data_t</span> *data = <span class="built_in">get_vec_start</span>(v);</span><br><span class="line"></span><br><span class="line">    <span class="type">data_t</span> res = IDENT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        res = res OP data[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *dest = res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-7-理解现代处理器">5.7 理解现代处理器</h2><p>现在的处理器都是超标量乱序发射的, 可以达到更好的指令级并行度 <br>包括指令控制单元 <code>Instruction Control Unit (ICU)</code> 和 执行单元 <code>Execution Unit(EU)</code></p><p>找到程序的关键路径, 最小化 CPE</p><h2 id="5-8-循环展开">5.8 循环展开</h2><p>下面代码被称作 <code>2 * 1</code> 的循环展开</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">combine5</span><span class="params">(vec_ptr v, <span class="type">data_t</span> *dest)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> length = <span class="built_in">vec_length</span>(v);</span><br><span class="line">    <span class="type">data_t</span> *data = <span class="built_in">get_vec_start</span>(v);</span><br><span class="line"></span><br><span class="line">    <span class="type">data_t</span> res = IDENT;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i += <span class="number">2</span>) &#123;</span><br><span class="line">        res = (res OP data[i]) OP data[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; length; i++) res = (res OP data[i]);</span><br><span class="line"></span><br><span class="line">    *dest = res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-9-提高并行性">5.9 提高并行性</h2><h3 id="5-9-1-多个累计变量">5.9.1 多个累计变量</h3><p>使用 2 个临时变量来存储, 从而提高并行性, 这被称作 <code>2 * 2</code> 的循环展开</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">combine6</span><span class="params">(vec_ptr v, <span class="type">data_t</span> *dest)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> length = <span class="built_in">vec_length</span>(v);</span><br><span class="line">    <span class="type">data_t</span> *data = <span class="built_in">get_vec_start</span>(v);</span><br><span class="line"></span><br><span class="line">    <span class="type">data_t</span> acc0 = IDENT;</span><br><span class="line">    <span class="type">data_t</span> acc1 = IDENT;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i += <span class="number">2</span>) &#123;</span><br><span class="line">        acc0 = acc0 OP data[i];</span><br><span class="line">        acc1 = acc1 OP data[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; length; i++) acc0 = (acc0 OP data[i]);</span><br><span class="line"></span><br><span class="line">    *dest = acc0 OP acc1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时要注意 OP 运算的可交换和可结合性</p><h2 id="5-9-2-重新结合变换">5.9.2 重新结合变换</h2><p>根据结合律, 尽量减少关键路径的长度, 这称之为 <code>2 * 1a</code> 变换</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">combine7</span><span class="params">(vec_ptr v, <span class="type">data_t</span> *dest)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> length = <span class="built_in">vec_length</span>(v);</span><br><span class="line">    <span class="type">data_t</span> *data = <span class="built_in">get_vec_start</span>(v);</span><br><span class="line"></span><br><span class="line">    <span class="type">data_t</span> res = IDENT;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i += <span class="number">2</span>) &#123;</span><br><span class="line">        res = res <span class="built_in">OP</span> (data[i] OP data[i + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; length; i++) res = (res OP data[i]);</span><br><span class="line"></span><br><span class="line">    *dest = res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-10-优化合并代码的结果小结">5.10 优化合并代码的结果小结</h2><p>多项优化技术确实减少了 没有优化 的 C 程序运行时间</p><h2 id="5-11-一些限制因素">5.11 一些限制因素</h2><h3 id="5-11-1-寄存器溢出">5.11.1 寄存器溢出</h3><p>并行度 $p$ 超过寄存器数量, 这个时候就要用内存, 反而不如之前</p><h3 id="5-11-2-分支预测和预测错误处罚">5.11.2 分支预测和预测错误处罚</h3><p>尽量使用条件传送风格的代码</p><h2 id="5-12-理解内存性能">5.12 理解内存性能</h2><p>读写操作也会影响程序性能</p><h2 id="5-13-应用-性能提高技术">5.13 应用: 性能提高技术</h2><ol><li>高级设计: 选用适当的算法和数据结构</li><li>基本编码原则:<ol><li>消除连续的函数调用</li><li>消除不必要的内存引用</li><li>低级优化:<ol><li><code>k * k</code> 的循环展开</li><li>使用条件传送风格写代码</li></ol></li></ol></li></ol><h2 id="5-14-确认和消除性能瓶颈">5.14 确认和消除性能瓶颈</h2><p>在大型程序中, 知道哪里需要优化也是一个难题</p><p>本节使用 代码剖析程序, 收集程序性能数据并分析</p><h2 id="5-14-1-程序剖析">5.14.1 程序剖析</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc -Og -pg -o prog prog.c</span><br><span class="line">./prog file.txt</span><br><span class="line">gprof prog</span><br></pre></td></tr></table></figure><h2 id="5-14-2-使用剖析程序来指导优化">5.14.2 使用剖析程序来指导优化</h2><p>观察程序运行的瓶颈在哪个位置, 从而优化那个函数</p><h2 id="5-15-小结">5.15 小结</h2><p>如何优化代码 <br>如何找到应该优化的代码</p><h1>练习</h1><h2 id="5-1">5.1</h2><p><code>*xp = 0</code></p><h2 id="5-2">5.2</h2><p>数学题, 略</p><h2 id="5-3">5.3</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5olf3rvjv8w0.webp" alt=""></p><h2 id="5-4">5.4</h2><ol><li>没什么不同, 只是省略了倒腾</li><li>实现了, 内存别名都一样</li><li>少了几步无意义的 <code>mov</code> 指令</li></ol><h2 id="5-5">5.5</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">这两条语句无关, 可以并行执行, CPE 为 5</span><br><span class="line">并且与 result 无关, 可以不管他们直接执行</span><br><span class="line">int tmp1 = a[i] * xpwr;</span><br><span class="line">int tmp2 = x * xpwr;</span><br><span class="line"></span><br><span class="line">上一次迭代的 tmp1, tmp2 计算到 result 中</span><br><span class="line">result += tmp1;</span><br><span class="line">xpwr = tmp2;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.2xb6ce0y7m40.webp" alt=""></p><ol><li>2n 次乘法, n 次加法</li><li>如图</li></ol><h2 id="5-6">5.6</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这三条语句必须顺序执行, CPE 为 8</span><br><span class="line">int tmp1 = x * result;</span><br><span class="line"></span><br><span class="line">int tmp2 = a[i] + tmp1;</span><br><span class="line"></span><br><span class="line">result = tmp2;</span><br></pre></td></tr></table></figure><ol><li>n 次乘法, n 次加法</li><li>如上</li></ol><h2 id="5-7">5.7</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">combine5_5</span><span class="params">(vec_ptr v, <span class="type">data_t</span> *dest)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> length = <span class="built_in">vec_length</span>(v);</span><br><span class="line">    <span class="type">data_t</span> *data = <span class="built_in">get_vec_start</span>(v);</span><br><span class="line"></span><br><span class="line">    <span class="type">data_t</span> res = IDENT;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i += <span class="number">5</span>) &#123;</span><br><span class="line">        res = res OP data[i];</span><br><span class="line">        res = res OP data[i + <span class="number">1</span>];</span><br><span class="line">        res = res OP data[i + <span class="number">2</span>];</span><br><span class="line">        res = res OP data[i + <span class="number">3</span>];</span><br><span class="line">        res = res OP data[i + <span class="number">4</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; length; i++) res = (res OP data[i]);</span><br><span class="line"></span><br><span class="line">    *dest = res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-8">5.8</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.223emvu88q1s.png" alt=""></p><p>x, y, z 跟 r 无关, 所以可以并行计算</p><h2 id="5-9">5.9</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (i1 &lt; n &amp;&amp; i2 &lt; n) &#123;</span><br><span class="line">    <span class="type">long</span> v1 = src1[i1], v2 = src2[v2];</span><br><span class="line">    <span class="type">long</span> take1 = v1 &lt; v2;</span><br><span class="line">    dest[id++] = take1 ? v1 : v2;</span><br><span class="line">    i1 += take1, i2 += (<span class="number">1</span> - take1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-10">5.10</h2><ol><li>$0 \le i \le 998$ <code>a[i] = i + 1</code></li><li>$1 \le i \le 999$ <code>a[i] = 0</code></li><li><code>A</code> 每次读取的目标在这个函数中还没有被写, 可以并行执行</li><li>类似 <code>A</code>, 理由同上</li></ol><h2 id="5-11">5.11</h2><p>加法操作要依赖读操作, 写操作要依赖加法操作, 关键路径就是这个三个操作之和, 9</p><h2 id="5-12">5.12</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">psum1</span><span class="params">(<span class="type">float</span> a[], <span class="type">float</span> p[], <span class="type">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> i;</span><br><span class="line">    p[<span class="number">0</span>] = a[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> sum = a[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        sum += a[i];</span><br><span class="line">        p[i] = sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-13-5-19">5.13 ~ 5.19</h2><p>暂时跳过</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP 学习笔记 (第九章)</title>
      <link href="/2023/08/26/9csapp/"/>
      <url>/2023/08/26/9csapp/</url>
      
        <content type="html"><![CDATA[<h1>Chapter 9: 虚拟内存</h1><p>虚拟内存是一种对主存的抽象概念</p><ol><li>将主存看作存储在磁盘上的地址空间的高速缓存</li><li>为每个进程提供一致的地址空间, 简化内存管理</li><li>保护每个进程的地址空间不被其他进程破坏</li></ol><h2 id="9-1-物理和虚拟寻址">9.1 物理和虚拟寻址</h2><p>物理寻址: 通过主存中字节的编号读取  <br>虚拟寻址: CPU 生成虚拟地址, 通过内存管理单元翻译成 物理地址</p><h2 id="9-2-地址空间">9.2 地址空间</h2><p>地址空间是一个非负整数地址的有序集合, 如果地址空间中的整数是连续的, 则称为线性地址空间</p><p>CPU 从一个有 $N = 2^n$ 个地址的地址空间中生成虚拟地址, 这个地址空间称为虚拟地址空间 <br>物理地址空间对应系统中物理内存的 $M$ 个字节</p><h2 id="9-3-虚拟内存作为缓存的工具">9.3 虚拟内存作为缓存的工具</h2><p>VM 把虚拟内存分割成大小一定的块, 称为虚拟页, 大小为 $P = 2^p$ 字节 <br>物理内存也被分割成物理页(页帧), 大小也为 $P$</p><p>虚拟页面的集合有如下三种不相交的子集</p><ol><li>未分配的: 不占用磁盘空间</li><li>缓存的, 分配到物理内存中的已分配页</li><li>未缓存的: 未缓存到物理内存中的已分配页</li></ol><h3 id="9-3-1-DRAM-缓存的组织结构">9.3.1 DRAM 缓存的组织结构</h3><p>SRAM 缓存 指的是 CPU 和主存之间 L1, L2, L3 高速缓存 <br>DRAM 缓存 指的是 虚拟内存系统的缓存, 在主存中缓存虚拟页</p><p>DRAM 缓存的不命中处罚很大, 所以使用很高的相联度 <br>减少缓存行之间的竞争, 所以 DRAM 缓存使用全相联</p><p>同时虚拟页往往很大, 因为较大的页可以覆盖更多的内存区域, 提高地址转换的命中率</p><h3 id="9-3-2-页表">9.3.2 页表</h3><p>页表将虚拟地址映射到物理地址, 是一个页表条目 (Page Table Entry, PTE) 的数组</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.434aowhbij00.webp" alt=""></p><p>如果有效位为 1, 地址字段就指向 DRAM 中相应的物理页的起始地址 <br>如果有效位为 0, 地址字段就指向 该虚拟页在磁盘上的起始位置</p><h3 id="9-3-3-页命中">9.3.3 页命中</h3><p>现在要读取 VP2 中虚拟内存的一个字</p><ol><li>地址翻译硬件将虚拟地址作为页表的索引来定位 PTE2</li><li>有效位是 1, 证明该虚拟页已经被缓存在 DRAM 中</li><li>在后面的地址字段获取 VP2 对应的 PP2 在 DRAM 的物理地址</li></ol><h3 id="9-3-4-缺页">9.3.4 缺页</h3><p>DRAM 缓存不命中 被称为 缺页</p><p>CPU 引用了 VP3 中的一个字</p><ol><li>地址翻译硬件定位 PTE3</li><li>有效位是 0, VP3 在磁盘中, 触发缺页异常</li><li>调用内核中的缺页异常处理程序, 选择一个牺牲页, VP4</li><li>如果 VP4 被修改了, 它就会被写回到磁盘中</li><li>PTE3 的地址字段 指向 DRAM 中 PP3 的起始地址</li><li>PTE4 的地址字段 指向 虚拟内存中 VP4 的起始地址</li></ol><p>现代操作系统都使用的 按需页面调度, 即当有不命中发生时才换入页面</p><h3 id="9-3-5-分配页面">9.3.5 分配页面</h3><p>现在分配 VP5, 在磁盘上创建一个页面, 更新 页表使得 PTE5 指向该页的起始地址</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6icphhrha5g0.png" alt=""></p><h3 id="9-3-6-又是局部性救了我们">9.3.6 又是局部性救了我们</h3><p>局部性会让程序趋向于在一个较小的活动页面集合上工作, 这个集合称为工作集</p><p>好的时间局部性会让虚拟内存系统工作得很好 <br>但如果工作集的大小超过了物理内存的大小, 那么程序就会抖动, 页面不断地换进换出</p><h2 id="9-4-虚拟内存作为内存管理的工具">9.4 虚拟内存作为内存管理的工具</h2><p>实际上操作系统为每个进程都提供了一个独立的页表</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.57mnaz61bq80.webp" alt=""></p><ol><li>简化链接</li><li>简化加载</li><li>简化共享</li><li>简化内存分配</li></ol><h2 id="9-5-虚拟内存作为内存保护的工具">9.5 虚拟内存作为内存保护的工具</h2><p>在每个 PTE 上增加一些许可位</p><ol><li><code>SUP</code> 表示程序是否必须在管理员模式下才能运行</li><li><code>READ</code> 表示是否可读</li><li><code>WRITE</code> 表示是否可写</li></ol><p>如果一些指令违反了许可条件, CPU 触发一般保护保障 <br>一般称为 段错误 <code>Segmentation Fault</code></p><h2 id="9-6-地址翻译">9.6 地址翻译</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6rc9dte9fqo0.png" alt=""></p><p>有一个页表基址寄存器, 指向页表第一项<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.27msntc6vfwg.webp" alt=""></p><p>如果有效位为 1</p><ol><li>虚拟地址被分为两半, $n-1 到 p$ 位是虚拟页号, $0 到 p-1$ 位是虚拟页偏移量</li><li>MMU 根据虚拟页号找到对应的 PTE, 从高速缓存 / 主存中找到 PTE</li><li>根据 PTE 的地址字段找到对应的物理页号, 后面跟上虚拟页号就是真正的物理地址</li></ol><p>因为物理页和虚拟页是一样大的, 所以偏移量也相同<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3vae7c31oqw0.webp" alt=""><br>如果有效位为 0</p><ol><li>调用缺页异常处理程序</li><li>确定牺牲页, 如果它被修改了就写回到磁盘</li><li>更新相应的 PTE, 重新解析虚拟地址</li></ol><h3 id="9-6-1-结合高速缓存和虚拟内存">9.6.1 结合高速缓存和虚拟内存</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6g7t2lbr8eo0.png" alt=""></p><h3 id="9-6-2-使用-TLB-加速地址翻译">9.6.2 使用 TLB 加速地址翻译</h3><p>MMU 中包括一个小缓存, 称作翻译后备缓冲器 (Translation Lookaside Buffer, TLB)</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4iq8bgkq99y0.png" alt=""></p><h3 id="9-6-3-多级页表">9.6.3 多级页表</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.2j4jiaujx3g0.png" alt=""></p><p>一级页表有 $1024$ 项, 总大小是 $4KB$ <br>二级页表同理, 这跟一页的大小正好相等, 减少了内存需求</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5wdqvl8ylbg0.webp" alt=""></p><h3 id="9-6-4-综合-端到端的地址翻译">9.6.4 综合: 端到端的地址翻译</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.2v2c540qo1e0.webp" alt=""></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3u6wrzimc9g0.webp" alt=""></p><h2 id="9-7-案例研究-Intel-Core-i7-Linux-内存系统">9.7 案例研究: Intel Core i7 / Linux 内存系统</h2><h3 id="9-7-1-Core-i7-地址翻译">9.7.1 Core i7 地址翻译</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.33lg2o7p3gu0.png" alt=""></p><h3 id="9-7-2-Linux-虚拟内存系统">9.7.2 Linux 虚拟内存系统</h3><p><strong>虚拟内存区域</strong><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.62fnb2wg1q40.png" alt=""><br><strong>Linux 虚拟内存处理</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1tzyb7hm9y8w.png" alt=""></p><h2 id="9-8-内存映射">9.8 内存映射</h2><p>Linux 把一个虚拟内存区域和一个磁盘上的 对象关联到一起, 来初始化虚拟内存区域的内容 <br>对象有两种</p><ol><li>Linux 文件系统中的普通文件: 文件以页大小切片, 等到用到的时候再交换到内存中</li><li>匿名文件: 全是二进制 0</li></ol><h3 id="9-8-1-再看共享对象">9.8.1 再看共享对象</h3><p><strong>共享对象</strong></p><p>多个进程共享同一个对象, 每个进程对该对象的写操作其他进程也可见</p><p><strong>私有对象</strong></p><p>一个进程对该对象的写操作其他进程不可见 <br>使用写时复制技术, 当该进程对这个对象进行写操作时复制一份副本从而不干扰其他进程 <br>同时对复制的对象进行保护, 防止其他进程访问</p><h3 id="9-8-2-再看-fork-函数">9.8.2 再看 fork 函数</h3><p><code>fork</code> 函数创建了一个副本, 把当前进程的所有对象变成私有对象, 使用写时复制</p><h3 id="9-8-3-再看-execve-函数">9.8.3 再看 execve 函数</h3><ol><li>删除已存在的用户区域</li><li>为新程序创建新的区域, 都是私有的, 写时复制的</li><li>映射共享区域</li><li>设置 PC 指向新代码入口</li></ol><h3 id="9-8-4-使用-mmap-函数的用户级内存映射">9.8.4 使用 mmap 函数的用户级内存映射</h3><p>用户使用 <code>mmap</code> 创建一个新的虚拟内存区域</p><h2 id="9-9-动态内存分配">9.9 动态内存分配</h2><p>当需要额外虚拟内存时, 使用动态内存分配器更方便, 可移植性更高</p><p>动态内存分配器维护一个堆, 紧接着未初始化的数据后, 并向上生长 <br>分配器将堆视为一组大小不同的块的集合, 每个块是连续的虚拟内存片 <br>可能是已分配的, 也可能是空闲的</p><p><strong>显式分配器</strong></p><p>要求应用程序显式释放已分配的块 <br>C 语言: <code>malloc</code>, <code>free</code><br>Cpp: <code>new</code>, <code>delete</code></p><p><strong>隐式分配器</strong> (垃圾收集器)</p><p>分配器检测一个块已经不再被使用, 那么就释放这个块, 这个过程叫做垃圾收集</p><h3 id="9-9-1-free-和-malloc-函数">9.9.1 <code>free</code> 和 <code>malloc</code> 函数</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3bubcv07gde0.png" alt=""></p><h3 id="9-9-2-为什么要使用动态内存分配">9.9.2 为什么要使用动态内存分配</h3><p>直接使用 <code>int arr[MAXN]</code> 这种硬编码不具有广泛的适用性</p><p>更好的方法是 使用动态内存分配 <code>arr = (int *)malloc(n * 4)</code></p><h3 id="9-9-3-分配器的要求和目标">9.9.3 分配器的要求和目标</h3><p>要求</p><ol><li>处理任意请求序列: 满足释放请求之前有分配请求即可</li><li>立即响应请求</li><li>只使用堆</li><li>地址要对齐</li><li>不修改已分配的块</li></ol><p>目标</p><ol><li>最大化吞吐率: 每个单位时间内完成的请求数</li><li>最大化内存利用率: 尽量减少碎片</li></ol><h3 id="9-9-4-碎片">9.9.4 碎片</h3><p><strong>内部碎片</strong>: 分配了很多, 但是没全用上 <br><strong>外部碎片</strong>: 分配内存剩下的小块加起来足够满足需求, 但是他们不连续</p><h3 id="9-9-5-实现问题">9.9.5 实现问题</h3><ol><li>如何记录空闲块</li><li>如何选择空闲块来放置新分配的块</li><li>如何处理放置新块之后剩下的空闲块</li><li>如何处理刚刚被释放的块</li></ol><h3 id="9-9-6-隐式空闲链表">9.9.6 隐式空闲链表</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.7qkkgeijc58.webp" alt=""></p><p>强加一个双字的对齐条件, 就是块大小一定是 8 的倍数, 这样二进制表示的后三位全是 0</p><h3 id="9-9-7-放置已分配的块">9.9.7 放置已分配的块</h3><p>应用请求大小为 $k$ 的块时, 分配器搜索链表找到一个足够大的空闲块 <br>搜索的方式是由 <strong>放置策略</strong> 决定的</p><ol><li>首次适配: 搜索到第一个足够大的空闲块就分配</li><li>下一次适配: 顾名思义</li><li>最佳适配: 搜索整个堆, 找到最合适的放置位置</li></ol><h3 id="9-9-8-分割空闲块">9.9.8 分割空闲块</h3><ol><li>直接使用整个空闲块: 内部碎片较多</li><li>第一部分变成分配块, 第二部分还是空闲块</li></ol><h3 id="9-9-9-获取额外的堆内存">9.9.9 获取额外的堆内存</h3><p>找不到合适的空闲块的时候</p><ol><li>合并在内存中物理相邻的空闲块</li><li>调用 <code>sbrk</code> 函数申请更大的堆空间</li></ol><h3 id="9-9-10-合并空闲块">9.9.10 合并空闲块</h3><p>分配器释放空闲块的时候, 可能有其他空闲块与之相邻</p><p><strong>假碎片</strong> 空闲块被切割成许多小的空闲块从而无法使用</p><p>合并策略</p><ol><li>立即合并: 每个块被释放时就合并相邻块</li><li>推迟合并: 如在分配失败的时候扫描整个堆从而合并空闲块</li></ol><h3 id="9-9-11-带边界标记的合并">9.9.11 带边界标记的合并</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4gfwy1lm55e0.png" alt=""></p><p>释放当前块之后, 检查本块头部之前的 上一块的尾部, 如果为 $f$ 则合并 <br>检查本块尾部 之后的 下一块的头部, 如果为 $f$ 则合并</p><h3 id="9-9-12-综合-实现一个简单的分配器">9.9.12 综合: 实现一个简单的分配器</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6qh599fznw00.webp" alt=""></p><p>设置序言块和结尾块作为哨兵, 他们只包含头脚</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *mem_heap;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *mem_brk;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *mem_max_addr;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> MAX_HEAP = (<span class="type">unsigned</span>)<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mem_init</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    mem_heap = (<span class="type">char</span> *)<span class="built_in">malloc</span>(MAX_HEAP);</span><br><span class="line">    mem_brk = (<span class="type">char</span> *)mem_heap;</span><br><span class="line">    mem_max_addr = (<span class="type">char</span> *)(mem_heap + MAX_HEAP);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">mem_sbrk</span><span class="params">(<span class="type">int</span> incr)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> *old_brk = mem_brk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((incr &lt; <span class="number">0</span>) || ((mem_brk + incr) &gt; mem_max_addr)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;mem_sbrk error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">void</span> *)(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mem_brk += incr;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">void</span> *) old_brk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a, b) ((a) &gt; (b) ? a : b)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WSIZE 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DSIZE 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHUNKSIZE (1 &lt;&lt; 12)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PACK(size, alloc) ((size) | (alloc))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET(p) (*(unsigned int *)(p))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PUT(p, val) (*(unsigned int *)(p) = (val))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_SIZE(p) (GET(p) &amp; ~0x7)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_ALLOC(p) (GET(p) &amp; 0x1)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HDRP(bp) ((char *)(bp) - WSIZE)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FTRP(bp) ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NEXT_BLKP(bp) ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PREV_BLKP(bp) ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE)))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> *<span class="title">coalesce</span><span class="params">(<span class="type">void</span> *bp)</span> </span>&#123;</span><br><span class="line">    <span class="type">size_t</span> prev_alloc = <span class="built_in">GET_ALLOC</span>(<span class="built_in">FTRP</span>(<span class="built_in">PREV_BLKP</span>(bp)));</span><br><span class="line">    <span class="type">size_t</span> next_alloc = <span class="built_in">GET_ALLOC</span>(<span class="built_in">HDRP</span>(<span class="built_in">NEXT_BLKP</span>(bp)));</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> size = <span class="built_in">GET_SIZE</span>(<span class="built_in">HDRP</span>(bp));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prev_alloc &amp;&amp; next_alloc) <span class="keyword">return</span> bp;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (prev_alloc &amp;&amp; !next_alloc) &#123;</span><br><span class="line"></span><br><span class="line">        size += <span class="built_in">GET_SIZE</span>(<span class="built_in">HDRP</span>(<span class="built_in">NEXT_BLKP</span>(bp)));</span><br><span class="line">        <span class="built_in">PUT</span>(<span class="built_in">HDRP</span>(bp), <span class="built_in">PACK</span>(size, <span class="number">0</span>));</span><br><span class="line">        <span class="built_in">PUT</span>(<span class="built_in">FTRP</span>(bp), <span class="built_in">PACK</span>(size, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!prev_alloc &amp;&amp; next_alloc) &#123;</span><br><span class="line"></span><br><span class="line">        size += <span class="built_in">GET_SIZE</span>(<span class="built_in">HDRP</span>(<span class="built_in">PREV_BLKP</span>(bp)));</span><br><span class="line">        <span class="built_in">PUT</span>(<span class="built_in">FTRP</span>(bp), <span class="built_in">PACK</span>(size, <span class="number">0</span>));</span><br><span class="line">        <span class="built_in">PUT</span>(<span class="built_in">HDRP</span>(<span class="built_in">PREV_BLKP</span>(bp)), <span class="built_in">PACK</span>(size, <span class="number">0</span>));</span><br><span class="line">        bp = <span class="built_in">PREV_BLKP</span>(bp);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        size += <span class="built_in">GET_SIZE</span>(<span class="built_in">HDRP</span>(<span class="built_in">NEXT_BLKP</span>(bp)));</span><br><span class="line">        size += <span class="built_in">GET_SIZE</span>(<span class="built_in">HDRP</span>(<span class="built_in">PREV_BLKP</span>(bp)));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">PUT</span>(<span class="built_in">FTRP</span>(<span class="built_in">NEXT_BLKP</span>(bp)), <span class="built_in">PACK</span>(size, <span class="number">0</span>));</span><br><span class="line">        <span class="built_in">PUT</span>(<span class="built_in">HDRP</span>(<span class="built_in">PREV_BLKP</span>(bp)), <span class="built_in">PACK</span>(size, <span class="number">0</span>));</span><br><span class="line">        bp = <span class="built_in">PREV_BLKP</span>(bp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *heap_listp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> *<span class="title">extend_heap</span><span class="params">(<span class="type">size_t</span> words)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> *bp;</span><br><span class="line">    <span class="type">size_t</span> size;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    size = (words % <span class="number">2</span>) ? (words + <span class="number">1</span>) * WSIZE : words * WSIZE;</span><br><span class="line">    </span><br><span class="line">    bp = (<span class="type">char</span> *)<span class="built_in">mem_sbrk</span>(size);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">long</span>)bp == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PUT</span>(<span class="built_in">HDRP</span>(bp), <span class="built_in">PACK</span>(size, <span class="number">0</span>));</span><br><span class="line">    <span class="built_in">PUT</span>(<span class="built_in">FTRP</span>(bp), <span class="built_in">PACK</span>(size, <span class="number">0</span>));</span><br><span class="line">    <span class="built_in">PUT</span>(<span class="built_in">HDRP</span>(<span class="built_in">NEXT_BLKP</span>(bp)), <span class="built_in">PACK</span>(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">coalesce</span>(bp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mm_init</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">mem_init</span>();</span><br><span class="line">    <span class="keyword">if</span> ((heap_listp = (<span class="type">char</span> *)<span class="built_in">mem_sbrk</span>(<span class="number">4</span> * WSIZE)) == (<span class="type">void</span> *)<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PUT</span>(heap_listp, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">PUT</span>(heap_listp + (<span class="number">1</span> * WSIZE), <span class="built_in">PACK</span>(DSIZE, <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">PUT</span>(heap_listp + (<span class="number">2</span> * WSIZE), <span class="built_in">PACK</span>(DSIZE, <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">PUT</span>(heap_listp + (<span class="number">3</span> * WSIZE), <span class="built_in">PACK</span>(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">    heap_listp += (<span class="number">2</span> * WSIZE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mm_free</span><span class="params">(<span class="type">void</span> *bp)</span> </span>&#123;</span><br><span class="line">    <span class="type">size_t</span> size = <span class="built_in">GET_SIZE</span>(<span class="built_in">HDRP</span>(bp));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PUT</span>(<span class="built_in">HDRP</span>(bp), <span class="built_in">PACK</span>(size, <span class="number">0</span>));</span><br><span class="line">    <span class="built_in">PUT</span>(<span class="built_in">FTRP</span>(bp), <span class="built_in">PACK</span>(size, <span class="number">0</span>));</span><br><span class="line">    <span class="built_in">coalesce</span>(bp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> *<span class="title">find_fit</span><span class="params">(<span class="type">size_t</span> asize)</span> </span>&#123;</span><br><span class="line">    <span class="type">void</span> *cur_listp = heap_listp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">GET_SIZE</span>(cur_listp) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">GET_SIZE</span>(cur_listp) &gt;= asize &amp;&amp;</span><br><span class="line">            !<span class="built_in">GET_ALLOC</span>(cur_listp))</span><br><span class="line">            <span class="keyword">return</span> cur_listp;</span><br><span class="line"></span><br><span class="line">        cur_listp = <span class="built_in">NEXT_BLKP</span>(cur_listp);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">place</span><span class="params">(<span class="type">void</span> *bp, <span class="type">size_t</span> asize)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> rest_size = <span class="built_in">GET_SIZE</span>(<span class="built_in">HDRP</span>(bp)) - asize;</span><br><span class="line">    <span class="type">char</span> *cur_bp = (<span class="type">char</span> *)bp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rest_size &gt;= <span class="number">2</span> * DSIZE) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">PUT</span>(<span class="built_in">HDRP</span>(bp), <span class="built_in">PACK</span>(asize, <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">PUT</span>(<span class="built_in">FTRP</span>(bp), <span class="built_in">PACK</span>(asize, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        bp = <span class="built_in">NEXT_BLKP</span>(bp);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">PUT</span>(<span class="built_in">HDRP</span>(bp), <span class="built_in">PACK</span>(rest_size, <span class="number">0</span>));</span><br><span class="line">        <span class="built_in">PUT</span>(<span class="built_in">FTRP</span>(bp), <span class="built_in">PACK</span>(rest_size, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">        asize = <span class="built_in">GET_SIZE</span>(<span class="built_in">HDRP</span>(bp));</span><br><span class="line">        <span class="built_in">PUT</span>(<span class="built_in">HDRP</span>(cur_bp), <span class="built_in">PACK</span>(asize, <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">PUT</span>(<span class="built_in">FTRP</span>(cur_bp), <span class="built_in">PACK</span>(asize, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">mm_malloc</span><span class="params">(<span class="type">size_t</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="type">size_t</span> asize;</span><br><span class="line">    <span class="type">size_t</span> extendsize;</span><br><span class="line">    <span class="type">char</span> *bp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size &lt;= DSIZE) asize = <span class="number">2</span> * DSIZE;</span><br><span class="line">    <span class="keyword">else</span> asize = DSIZE * ((size + (DSIZE) + (DSIZE - <span class="number">1</span>)) / DSIZE);</span><br><span class="line"></span><br><span class="line">    bp = (<span class="type">char</span> *)<span class="built_in">find_fit</span>(asize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">place</span>(bp, asize);</span><br><span class="line">        <span class="keyword">return</span> bp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    extendsize = <span class="built_in">MAX</span>(asize, CHUNKSIZE);</span><br><span class="line"></span><br><span class="line">    bp = (<span class="type">char</span> *)<span class="built_in">extend_heap</span>(extendsize / WSIZE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bp == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">place</span>(bp, asize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *mem_heap;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *mem_brk;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *mem_max_addr;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> MAX_HEAP = (<span class="type">unsigned</span>)<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mem_init</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    mem_heap = (<span class="type">char</span> *)<span class="built_in">malloc</span>(MAX_HEAP);</span><br><span class="line">    mem_brk = (<span class="type">char</span> *)mem_heap;</span><br><span class="line">    mem_max_addr = (<span class="type">char</span> *)(mem_heap + MAX_HEAP);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">mem_sbrk</span><span class="params">(<span class="type">int</span> incr)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> *old_brk = mem_brk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((incr &lt; <span class="number">0</span>) || ((mem_brk + incr) &gt; mem_max_addr)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;mem_sbrk error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">void</span> *)(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mem_brk += incr;</span><br><span class="line">    <span class="keyword">return</span> mem_brk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a, b) ((a) &gt; (b) ? a : b)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WSIZE 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DSIZE 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHUNKSIZE (1 &lt;&lt; 12)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PACK(size, alloc) ((size) | (alloc))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET(p) (*(unsigned int *)(p))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PUT(p, val) (*(unsigned int *)(p) = (val))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_SIZE(p) (GET(p) &amp; ~0x7)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_ALLOC(p) (GET(p) &amp; 0x1)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HDRP(bp) ((char *)(bp) - WSIZE)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FTRP(bp) ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NEXT_BLKP(bp) ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PREV_BLKP(bp) ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE)))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> *<span class="title">coalesce</span><span class="params">(<span class="type">void</span> *bp)</span> </span>&#123;</span><br><span class="line">    <span class="type">size_t</span> prev_alloc = <span class="built_in">GET_ALLOC</span>(<span class="built_in">FTRP</span>(<span class="built_in">PREV_BLKP</span>(bp)));</span><br><span class="line">    <span class="type">size_t</span> next_alloc = <span class="built_in">GET_ALLOC</span>(<span class="built_in">HDRP</span>(<span class="built_in">NEXT_BLKP</span>(bp)));</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> size = <span class="built_in">GET_SIZE</span>(<span class="built_in">HDRP</span>(bp));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prev_alloc &amp;&amp; next_alloc) <span class="keyword">return</span> bp;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (prev_alloc &amp;&amp; !next_alloc) &#123;</span><br><span class="line"></span><br><span class="line">        size += <span class="built_in">GET_SIZE</span>(<span class="built_in">HDRP</span>(<span class="built_in">NEXT_BLKP</span>(bp)));</span><br><span class="line">        <span class="built_in">PUT</span>(<span class="built_in">HDRP</span>(bp), <span class="built_in">PACK</span>(size, <span class="number">0</span>));</span><br><span class="line">        <span class="built_in">PUT</span>(<span class="built_in">FTRP</span>(bp), <span class="built_in">PACK</span>(size, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!prev_alloc &amp;&amp; next_alloc) &#123;</span><br><span class="line"></span><br><span class="line">        size += <span class="built_in">GET_SIZE</span>(<span class="built_in">HDRP</span>(<span class="built_in">PREV_BLKP</span>(bp)));</span><br><span class="line">        <span class="built_in">PUT</span>(<span class="built_in">FTRP</span>(bp), <span class="built_in">PACK</span>(size, <span class="number">0</span>));</span><br><span class="line">        <span class="built_in">PUT</span>(<span class="built_in">HDRP</span>(<span class="built_in">PREV_BLKP</span>(bp)), <span class="built_in">PACK</span>(size, <span class="number">0</span>));</span><br><span class="line">        bp = <span class="built_in">PREV_BLKP</span>(bp);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        size += <span class="built_in">GET_SIZE</span>(<span class="built_in">HDRP</span>(<span class="built_in">NEXT_BLKP</span>(bp)));</span><br><span class="line">        size += <span class="built_in">GET_SIZE</span>(<span class="built_in">HDRP</span>(<span class="built_in">PREV_BLKP</span>(bp)));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">PUT</span>(<span class="built_in">FTRP</span>(<span class="built_in">NEXT_BLKP</span>(bp)), <span class="built_in">PACK</span>(size, <span class="number">0</span>));</span><br><span class="line">        <span class="built_in">PUT</span>(<span class="built_in">HDRP</span>(<span class="built_in">PREV_BLKP</span>(bp)), <span class="built_in">PACK</span>(size, <span class="number">0</span>));</span><br><span class="line">        bp = <span class="built_in">PREV_BLKP</span>(bp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *heap_listp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> *<span class="title">extend_heap</span><span class="params">(<span class="type">size_t</span> words)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> *bp;</span><br><span class="line">    <span class="type">size_t</span> size;</span><br><span class="line"></span><br><span class="line">    size = (words % <span class="number">2</span>) ? (words + <span class="number">1</span>) * WSIZE : words * WSIZE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">long</span>)(bp = (<span class="type">char</span> *)<span class="built_in">mem_sbrk</span>(size)) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PUT</span>(<span class="built_in">HDRP</span>(bp), <span class="built_in">PACK</span>(size, <span class="number">0</span>));</span><br><span class="line">    <span class="built_in">PUT</span>(<span class="built_in">FTRP</span>(bp), <span class="built_in">PACK</span>(size, <span class="number">0</span>));</span><br><span class="line">    <span class="built_in">PUT</span>(<span class="built_in">HDRP</span>(<span class="built_in">NEXT_BLKP</span>(bp)), <span class="built_in">PACK</span>(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">coalesce</span>(bp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mm_init</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((heap_listp = (<span class="type">char</span> *)<span class="built_in">mem_sbrk</span>(<span class="number">4</span> * WSIZE)) == (<span class="type">void</span> *)<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PUT</span>(heap_listp, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">PUT</span>(heap_listp + (<span class="number">1</span> * WSIZE), <span class="built_in">PACK</span>(DSIZE, <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">PUT</span>(heap_listp + (<span class="number">2</span> * WSIZE), <span class="built_in">PACK</span>(DSIZE, <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">PUT</span>(heap_listp + (<span class="number">3</span> * WSIZE), <span class="built_in">PACK</span>(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">    heap_listp += (<span class="number">2</span> * WSIZE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mm_free</span><span class="params">(<span class="type">void</span> *bp)</span> </span>&#123;</span><br><span class="line">    <span class="type">size_t</span> size = <span class="built_in">GET_SIZE</span>(<span class="built_in">HDRP</span>(bp));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PUT</span>(<span class="built_in">HDRP</span>(bp), <span class="built_in">PACK</span>(size, <span class="number">0</span>));</span><br><span class="line">    <span class="built_in">PUT</span>(<span class="built_in">HDRP</span>(bp), <span class="built_in">PACK</span>(size, <span class="number">0</span>));</span><br><span class="line">    <span class="built_in">coalesce</span>(bp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> *<span class="title">find_fit</span><span class="params">(<span class="type">size_t</span> asize)</span> </span>&#123;</span><br><span class="line">    <span class="type">void</span> *cur_listp = heap_listp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">GET_SIZE</span>(cur_listp) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">GET_SIZE</span>(cur_listp) &gt;= asize &amp;&amp;</span><br><span class="line">            !<span class="built_in">GET_ALLOC</span>(cur_listp))</span><br><span class="line">            <span class="keyword">return</span> cur_listp;</span><br><span class="line"></span><br><span class="line">        cur_listp = <span class="built_in">NEXT_BLKP</span>(cur_listp);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">place</span><span class="params">(<span class="type">void</span> *bp, <span class="type">size_t</span> asize)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> rest_size = <span class="built_in">GET_SIZE</span>(<span class="built_in">HDRP</span>(bp)) - asize;</span><br><span class="line">    <span class="type">char</span> *cur_bp = (<span class="type">char</span> *)bp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rest_size &gt;= <span class="number">2</span> * DSIZE) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">PUT</span>(<span class="built_in">HDRP</span>(bp), <span class="built_in">PACK</span>(asize, <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">PUT</span>(<span class="built_in">FTRP</span>(bp), <span class="built_in">PACK</span>(asize, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        bp = <span class="built_in">NEXT_BLKP</span>(bp);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">PUT</span>(<span class="built_in">HDRP</span>(bp), <span class="built_in">PACK</span>(rest_size, <span class="number">0</span>));</span><br><span class="line">        <span class="built_in">PUT</span>(<span class="built_in">FTRP</span>(bp), <span class="built_in">PACK</span>(rest_size, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">        asize = <span class="built_in">GET_SIZE</span>(<span class="built_in">HDRP</span>(bp));</span><br><span class="line">        <span class="built_in">PUT</span>(<span class="built_in">HDRP</span>(cur_bp), <span class="built_in">PACK</span>(asize, <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">PUT</span>(<span class="built_in">FTRP</span>(cur_bp), <span class="built_in">PACK</span>(asize, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">mm_malloc</span><span class="params">(<span class="type">size_t</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="type">size_t</span> asize;</span><br><span class="line">    <span class="type">size_t</span> extendsize;</span><br><span class="line">    <span class="type">char</span> *bp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size &lt;= DSIZE) asize = <span class="number">2</span> * DSIZE;</span><br><span class="line">    <span class="keyword">else</span> asize = DSIZE * ((size + (DSIZE) + (DSIZE - <span class="number">1</span>)) / DSIZE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((bp = (<span class="type">char</span> *)<span class="built_in">find_fit</span>(asize)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">place</span>(bp, asize);</span><br><span class="line">        <span class="keyword">return</span> bp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    extendsize = <span class="built_in">MAX</span>(asize, CHUNKSIZE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((bp = (<span class="type">char</span> *)<span class="built_in">extend_heap</span>(extendsize / WSIZE)) == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">place</span>(bp, asize);</span><br><span class="line">    <span class="keyword">return</span> bp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-9-13-显式空闲链表">9.9.13 显式空闲链表</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.p0o0bqo03eo.png" alt=""></p><p>将空闲块组织成显式的双向链表</p><ol><li>分配时间从 所有块数量的线性时间 减少到了 空闲块数量的线性时间</li><li>释放一个块的时间取决于所使用的排序策略<ul><li>LIFO, 把每个新的空闲块放在第一位, 释放一个块可在常数时间内完成, 加上边界标记之后合并也是常数</li><li>地址顺序: 释放一个块需要线性时间来定位前驱, 优点是内存利用率更高</li></ul></li></ol><h3 id="9-9-14-分离的空闲链表">9.9.14 分离的空闲链表</h3><p>一般的思路是把块按大小分类, 然后类似邻接表 <br>每一类作为相邻的链表头, 后面跟着一系列符合大小规格的空闲块</p><p><strong>简单分离存储</strong> <br>每个页被分成相同大小的若干块, 比如第一页每一个字节是一块, 第二页每两个字节是一块, 第三页每四个字节是一块…依此类推</p><ol><li>每次请求分配内存时, 就使用满足要求的最小块, 不分割直接分配</li><li>剩余空间不足时, 请求一个新页, 分成若干块挂在相应大小的链表上, 继续分配</li><li>释放块的时候, 直接挂在相应大小的链表上, 释放的时候不会合并</li></ol><p>优点如下:</p><ol><li>每页中的块大小相同, 所以查询地址就可以知道该块大小</li><li>没有合并, 所以就不需要 $a/f$ 标记, 头脚部可以省略</li><li>分配和释放都在链表开始操作, 所以不需要双向链表</li></ol><p>缺点: 会造成极多的内部和外部碎片</p><p><strong>分离适配</strong></p><p>划定某大小区间的块为一个类</p><ol><li>请求分配内存时, 寻找当前类中合适的块, 找不到就换块大小区间更大的类 <br>分割是可选的, 分割之后剩下的块放到适合的类中</li><li>释放时, 可以合并, 合并之后的块也放到合适的类中</li></ol><p><strong>伙伴系统</strong></p><p>与分离适配大致相同, 每个大小类都是 2 的幂</p><h2 id="9-10-垃圾收集">9.10 垃圾收集</h2><p>垃圾收集器就是隐式分配器</p><h3 id="9-10-1-垃圾收集器的基本知识">9.10.1 垃圾收集器的基本知识</h3><p>垃圾收集器将内存视为一张有向可达图, 分为一组根节点和一组堆节点</p><p>设一个节点为 $p$ 当从根节点有一条路径可以到达 $p$ 的时候, $p$ 就是可达的 <br>垃圾收集器维护可达图, 释放不可达节点到空闲链表从而实现回收功能</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.2osnohf0xi00.png" alt=""></p><p><code>ML</code>, <code>Java</code> 这些语言的垃圾收集器能够维护可达图的精确表示, 能够回收所有垃圾</p><p><code>C</code>, <code>Cpp</code> 这些语言的垃圾收集器不能维护可达图的精确表示, 所以被称为保守的垃圾收集器 <br>可达的块一定被标记为可达, 不可达的块不一定被标记不可达</p><h3 id="9-10-2-Mark-Sweep-垃圾收集器">9.10.2 Mark &amp; Sweep 垃圾收集器</h3><p><code>Mark</code> 阶段遍历可达图, 把可达块做好标记 <br><code>Sweep</code> 阶段遍历堆中的块, 把没标记过的块释放</p><h3 id="9-10-3-C-程序的保守-Mark-Sweep">9.10.3 C 程序的保守 Mark &amp; Sweep</h3><p>C 语言不会在内存中标记类型, 所以无法判断这个数据是不是指针</p><p>在 <code>Mark</code> 阶段, 无法判断指针是否有效, 所以就只能全都标记为有效块</p><h2 id="9-11-C-程序中常见的与内存有关的错误">9.11 C 程序中常见的与内存有关的错误</h2><h3 id="9-11-1-间接引用坏指针">9.11.1 间接引用坏指针</h3><p>访问无意义的地址空间, 引发段错误 <br>第二句把 <code>val</code> 的值当作地址, 非常容易引发错误</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;val);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, val);</span><br></pre></td></tr></table></figure><h3 id="9-11-2-读未初始化的内存">9.11.2 读未初始化的内存</h3><p>全局变量总是被设置为 0, 但是在堆中的变量不一定 <br>需要显式设定变量, 或者使用 <code>calloc</code></p><h3 id="9-11-3-允许栈缓冲区溢出">9.11.3 允许栈缓冲区溢出</h3><p>写入超过字符数组大小的字符串, 造成缓冲区溢出</p><h3 id="9-11-4-假设指针和他们指向的对象是相同大小的">9.11.4 假设指针和他们指向的对象是相同大小的</h3><p>指针的大小跟所指向的对象大小不一定相同</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> **A = (<span class="type">int</span> **)<span class="built_in">malloc</span>(n * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="type">int</span> **A = (<span class="type">int</span> **)<span class="built_in">malloc</span>(n * <span class="built_in">sizeof</span>(<span class="type">int</span> *));</span><br></pre></td></tr></table></figure><p>第一句话可能在释放这个块时产生错误, 并且很难找出来</p><h3 id="9-11-5-造成错位错误">9.11.5 造成错位错误</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>]&#123;&#125;;</span><br><span class="line"><span class="type">int</span> b[<span class="number">10</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">a[<span class="number">12</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; b[<span class="number">0</span>] &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>可能修改 <code>b</code> 数组</p><h3 id="9-11-6-引用指针-而不是它指向的对象">9.11.6 引用指针, 而不是它指向的对象</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> *y = &amp;x;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">*y--;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">y = &amp;x;</span><br><span class="line">(*y)--;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; y &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>注意运算符优先级</p><h3 id="9-11-7-误解指针运算">9.11.7 误解指针运算</h3><p>指针的算数操作是相对于它们所指向的对象的大小为单位来进行的</p><h3 id="9-11-8-引用不存在的变量">9.11.8 引用不存在的变量</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> *<span class="title">stackref</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="keyword">return</span> &amp;val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用完这个函数的时候, 栈帧已经被修改, <code>&amp;val</code> 指向的不再是 <code>val</code></p><p>当后面在对 这个地址上的值进行修改时, 可能会对另一个函数造成影响</p><h3 id="9-11-9-引用空闲堆块中的数据">9.11.9 引用空闲堆块中的数据</h3><p>再次访问已经被释放了的内存</p><h3 id="9-11-10-引起内存泄漏">9.11.10 引起内存泄漏</h3><p>分配了一些空间而没有正确释放, 导致系统可用内存逐渐减少, 最终导致系统性能下降或者崩溃</p><h3 id="9-12-小结">9.12 小结</h3><p>虚拟内存是对主存的一个抽象, 处理器使用虚拟地址来引用主存 <br>有硬件使用页表来把 虚拟地址翻译成 物理地址</p><p>程序使用动态内存分配器来操作内存, 有显式分配器和隐式分配器两种</p><h1>练习</h1><h2 id="9-1">9.1</h2><p>略</p><h2 id="9-2">9.2</h2><p>$PTE 数量 = 2^n / P$</p><h2 id="9-3">9.3</h2><p>虚拟页偏移量和物理页偏移量位数相同 <br>根据页大小确定 偏移量的位数, 用总位数减去即可</p><h2 id="9-4">9.4</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4lsph5f37do0.webp" alt=""></p><h2 id="9-5">9.5</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mmapcopy</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *bufp = (<span class="type">char</span> *)<span class="built_in">mmap</span>(<span class="literal">NULL</span>, size, PROT_READ, MAP_PRIVATE, fd, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">write</span>(STDOUT_FILENO, bufp, size);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">munmap</span>(bufp, size);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd = <span class="built_in">open</span>(argv[<span class="number">1</span>], O_RDONLY, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">stat</span> st;</span><br><span class="line">    <span class="built_in">fstat</span>(fd, &amp;st);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mmapcopy</span>(fd, st.st_size);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-6">9.6</h2><p>请求的字节再加上 4(头部), 向上取最接近 8 倍数的数, 即为块大小</p><h2 id="9-7">9.7</h2><p>有头有脚 8 + 1, 有头无脚 4 + 1 <br>单字舍入 4, 双字舍入 8</p><h2 id="9-8-9-9">9.8 ~ 9.9</h2><p>见正文</p><h2 id="9-10">9.10</h2><p>每次请求和释放不同大小的块</p><h2 id="9-11-9-13">9.11 ~ 9.13</h2><p>略</p><h2 id="9-14">9.14</h2><p>注意 <code>open</code> 和 <code>mmap</code> 函数的各种参数变化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *bufp = (<span class="type">char</span> *)<span class="built_in">mmap</span>(<span class="literal">NULL</span>, size, PROT_WRITE, MAP_SHARED, fd, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    *bufp = <span class="string">&#x27;J&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">munmap</span>(bufp, size);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd = <span class="built_in">open</span>(argv[<span class="number">1</span>], O_RDWR, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">stat</span> st;</span><br><span class="line">    <span class="built_in">fstat</span>(fd, &amp;st);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">change</span>(fd, st.st_size);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-15">9.15</h2><p>块大小是原 <code>size + 4</code> 向上 8 的倍数取整, <code>head</code> 是十进制大小转换为二进制再 或 <code>0x1</code></p><h2 id="9-16">9.16</h2><p>空闲块头脚都有, 所以最小都是 16</p><h2 id="9-17">9.17</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> *<span class="title">find_fit</span><span class="params">(<span class="type">size_t</span> asize)</span> </span>&#123;</span><br><span class="line">    <span class="type">void</span> *save_ptr = last_find;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">GET_SIZE</span>(last_find) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">GET_SIZE</span>(last_find) &gt;= asize &amp;&amp;</span><br><span class="line">            !<span class="built_in">GET_ALLOC</span>(last_find))</span><br><span class="line">                <span class="keyword">return</span> last_find;</span><br><span class="line">        last_find = <span class="built_in">NEXT_BLKP</span>(last_find);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (last_find &lt; save_ptr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">GET_SIZE</span>(last_find) &gt;= asize &amp;&amp;</span><br><span class="line">            !<span class="built_in">GET_ALLOC</span>(last_find))</span><br><span class="line">                <span class="keyword">return</span> last_find;</span><br><span class="line">        last_find = <span class="built_in">NEXT_BLKP</span>(last_find);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-18">9.18</h2><p>跳过</p><h2 id="9-19-9-20">9.19 ~ 9.20</h2><p>略</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP 学习笔记 (第六章)</title>
      <link href="/2023/08/24/6csapp/"/>
      <url>/2023/08/24/6csapp/</url>
      
        <content type="html"><![CDATA[<h1>Chapter 6: 存储器层次结构</h1><h2 id="6-1-存储技术">6.1 存储技术</h2><h3 id="6-1-1-随机访问存储器">6.1.1 随机访问存储器</h3><p><code>Random-Access Memory (RAM)</code> 分两类<br><strong>静态RAM(SRAM): 快, 贵</strong></p><p>SRAM 把每个位存储在 一个双稳态的存储器单元里, 使用一个六晶体管电路实现 <br>它可以无限期地保持在两个不同的电压状态之一, 其他任何状态都是不稳定的</p><p>由于这种双稳态特性, 只要有电他就会永远保持他的值 <br>即使有干扰扰动电压, 干扰消除时电路也会恢复到稳定值</p><p><strong>动态RAM(DRAM):</strong></p><p>DRAM 把每个位存储为 对一个电容的充电, 电容大概是 $30\times 10^{-15}F$ <br>电容的电压被扰乱之后, 它就永远不会恢复了</p><p>很多原因导致的漏电会让 DRAM 在 $10ms$ 到 $100ms$ 失去电荷 <br>所以内存系统必须周期性地通过读出, 重写来刷新每一位 <br>也可以使用纠错码, 其中计算机的字会被多编码几个位, 这样电路可以发现并纠正一个字中任何单个的错误位</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4ky32n0snko0.webp" alt=""></p><p><strong>传统的 DRAM</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5ish8q9gmic0.png" alt=""></p><p>工作方式:</p><ol><li>内存控制器 通过 <code>addr</code> 引脚向 DRAM 芯片传入两位的行地址 $Row Access Strobe (RAS)$</li><li>内部行缓冲区存储行号所在的行</li><li>内存控制器 通过 <code>addr</code> 引脚向 DRAM 芯片传入两位的列地址 $Column Access Strobe (CAS)$</li><li>DRAM 芯片从内部行缓冲区取出一个字节的数据通过 <code>data</code> 返回到内存控制器</li></ol><p>内部组成:</p><p>DRAM 中有 $d$ 个超单元, $r$ 行 $w$ 列, $r \times w = d$  <br>每个超单元由 $w$ 个 DRAM 单元组成, 总共存储 $rcw = dw$ 位的信息</p><p>二维阵列的优点: 传入的地址引脚可以是 2 位, 否则 16 个线性排列的单元需要 4 位寻址 <br>二维阵列的缺点: 两次传入地址, 增加访问时间</p><p><strong>内存模块</strong></p><p>八个 DRAM 芯片组合在一起, 通过地址引脚获取行地址和列地址 <br>把八个 DRAM 芯片的八位结果组合在一起得到存储的 64 位值</p><p><strong>增强的 DRAM</strong></p><p>一些厂商为了跟上 CPU 处理速度而做出的一些优化</p><p><strong>非易失型存储器</strong></p><p>断电之后, RAM 会失去它的存储信息, 是 易失的 <br>现在的很多种 非易失性存储器 因为历史原因被称为 $Read-Only \ Memory (ROM)$</p><ol><li>$PROM$ 可编程 ROM, 只能被编程一次, 它的每个存储器单元有一种 熔丝, 只能用高电流熔断一次</li><li>$EPROM$ 可擦写可编程 ROM, 大概能编程 1000 次</li><li>$EEPROM$, 电子可擦除 ROM, 大概能编程 10000 次</li><li>$flash \ memory$ 闪存, 基于 $EEPROM$ 的存储技术</li></ol><p>存储在 ROM 中的程序通常被称为固件, 计算机系统通电之后就运行这些固件</p><p><strong>访问主存</strong></p><p>数据流通过 总线 的共享电子电路在处理器和 DRAM 主存之间来回 <br>CPU 和主存之间的数据传送通过一系列步骤来完成的, 称为总线事务, 分为读事务和写事务<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.qaqxhwuiqao.webp" alt=""></p><h3 id="6-1-2-磁盘存储">6.1.2 磁盘存储</h3><p>比 DRAM 慢了十万倍, 比 SRAM 慢了百万倍</p><p><strong>磁盘构造</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.2ansnd0kwj6s.png" alt=""></p><p><strong>磁盘容量</strong></p><ol><li>记录密度: 一英寸磁道可以放入的位数</li><li>磁道密度: 盘片中心半径一英寸有多少磁道</li><li>面密度: 上两者相乘</li></ol><p>$$<br>磁盘容量 = 每扇区字节 \times 每磁道扇区 \times 每面磁道数(柱面数) \times 每盘面数 \times 盘片数<br>$$</p><p><strong>磁盘操作</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.71wfhieyq2c0.png" alt=""></p><ol><li>寻道时间: 传动臂到特定磁道的时间 $T_{seek}$</li><li>旋转时间: 找扇区 $T_{max \ rotation} = \frac{60}{RPM}$, 也是转一圈需要的时间 <br>$T_{avg \ rotation} = T_{max \ rotation} / 2$</li><li>传送时间: $T_{avg \ transfer} = T_{max \ rotation} / 每磁道扇区数$</li></ol><p>访问一个扇区的平均时间是上三者之和</p><p><strong>逻辑磁盘块</strong></p><p>磁盘中有个磁盘控制器, 维护编号和实际扇区的关系 <br>编号会被翻译成 (盘面, 磁道, 扇区) 的三元组</p><p><strong>连接IO设备</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4vml55dce7w0.png" alt=""></p><p><strong>访问磁盘</strong></p><p>CPU 使用 内存映射 技术来向 IO 设备发射命令 <br>磁盘控制器将内容直接传送到主存, 不需要CPU 干涉, 这叫直接内存访问(DMA)</p><h3 id="6-1-3-固态硬盘">6.1.3 固态硬盘</h3><p>$Solid \ State \ Disk (SSD)$</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5vqb8k86e300.webp" alt=""></p><p>数据是以页为单位读写的, 只有擦除一个块才能对块里的页进行写</p><h3 id="6-1-4-存储技术趋势">6.1.4 存储技术趋势</h3><p>增加密度比减少访问时间容易得多</p><h2 id="6-2-局部性">6.2 局部性</h2><p>局部性原理: 程序倾向于引用临近其他使用过的数据的数据, 或者使用过的数据本身 \</p><h3 id="6-2-1-对程序数据引用的局部性">6.2.1 对程序数据引用的局部性</h3><p>空间局部性常见和主要的来源是步长为 $k$ 的引用模式 ($k=1$) <br>$k$ 增大时, 空间局部性变差</p><h3 id="6-2-2-取指令的局部性">6.2.2 取指令的局部性</h3><p>程序指令存放在内存中, 可以评价程序取指令的局部性</p><h3 id="6-2-3-局部性小结">6.2.3 局部性小结</h3><ol><li>重复引用相同变量的程序有良好的时间局部性</li><li>步长为 $k$ 的引用程序, 步长越小空间局部性越好</li><li>取指令: 循环有好的时间和空间局部性, 循环体越小, 迭代次数越多, 局部性越好</li></ol><h2 id="6-3-存储器层次结构">6.3 存储器层次结构</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4fsrxudu8080.png" alt=""></p><h3 id="6-3-1-存储器结构层次中的缓存">6.3.1 存储器结构层次中的缓存</h3><p>高速缓存 <code>cache</code></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.319gfw72dnm0.png" alt=""></p><p><strong>缓存命中</strong><br>当程序需要 $k+1$ 层的数据 $d$ 时, 会在 $k$ 层查找 $d$, 找到了就是缓存命中 <br>良好时间局部性的程序缓存命中的机会较多</p><p><strong>缓存不命中</strong></p><p>从 $k+1$ 层 取出 $d$ 放到 $k$ 层, 可能替代 $k$ 层中的一个块, 被驱逐的块有时称为牺牲块 <br>替换策略有 随机替换, 最近最少被使用替换</p><p><strong>缓存不命中的种类</strong></p><p>强制性不命中/冷不命中: $k$ 层缓存为空</p><p>只要发生不命中, $k$ 层的缓存就要执行某个放置策略</p><ol><li>允许 $k+1$ 层的块放到 $k$ 层的任何位置: 速度快, 代价高</li><li>允许 $k+1$ 层的块放到 $k$ 层的一个子集: $k+1$ 层第 $x$ 块被放到 $k$ 层第 $x \ mod \ 4$ 块中</li></ol><p>冲突不命中: 访问 0, 4, 8, 12… 总是不命中</p><p>容量不命中, 要访问的对象太多 $k$ 层装不下</p><p><strong>缓存管理</strong></p><p>在大多时候, 缓存都是自动运行的, 不要程序采用显式行动</p><h3 id="6-3-2-存储器层次结构概念小结">6.3.2 存储器层次结构概念小结</h3><p>为实现更多的缓存命中, 需要程序具有良好的时间和空间局部性</p><h2 id="6-4-高速缓存存储器">6.4 高速缓存存储器</h2><h3 id="6-4-1-通用的高速缓存存储器组织结构">6.4.1 通用的高速缓存存储器组织结构</h3><p>有 $m$ 位表示存储器地址, 形成 $M = 2^m$ 个不同地址</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3xr0fqxfdn20.png" alt=""></p><p>元组 $(S, E, B, m)$ 可以描述高速缓存的结构 <br>高速缓存的大小 $C = S \times B \times E$, 其中去除了标记位和有效位</p><h3 id="6-4-2-直接映射高速缓存">6.4.2 直接映射高速缓存</h3><p>$E=1$ 的高速缓存被称为直接映射高速缓存</p><ol><li>抽出组索引, 选择组</li><li>抽出地址中的标记, 与组中行的标记位相匹配, 并且行中有效位为 1</li><li>抽出块偏移, 表示所需要的字从行中块的第几个字节开始</li></ol><p><strong>不命中时的行替换</strong></p><p>对于直接映射告诉缓存, 直接组索引下的一行即可</p><p><strong>直接映射高速缓存中的冲突不命中</strong></p><p>填充可以消除冲突不命中</p><h3 id="6-4-3-组相联高速缓存">6.4.3 组相联高速缓存</h3><p>$1 &lt; E &lt; \frac CB$ 的高速缓存被称为 $E$ 路高速缓存</p><ol><li>组选择相同</li><li>行匹配使用相连存储器, 输入 $key$ 来找到 $value$ <br>搜索组中的每一行, 与地址中的标记匹配</li></ol><p><strong>不命中时的行替换</strong></p><p>优先替换空行, 其次有 最不常使用策略, 最近最少使用策略</p><h3 id="6-4-4-全相联高速缓存">6.4.4 全相联高速缓存</h3><p>$E = C / B$ 只有一个组</p><ol><li>组选择: 直接砍掉组索引位</li><li>行匹配和字选择与 组相联高速缓存相同</li></ol><h3 id="6-4-5-有关写的问题">6.4.5 有关写的问题</h3><p><strong>写命中</strong></p><ol><li>直写: 写到下一层中, 但每次写都会引起总线流量</li><li>写回: 当这个块要被驱逐时, 把它写到下一层中, 但要维护一个修改位</li></ol><p><strong>写不命中</strong></p><ol><li>写分配: 加载低一层的块到高速缓存中, 之后更新</li><li>非写分配: 直接写到低一层中</li></ol><p>直写通常是非写分配, 写回通常是写分配</p><h3 id="6-4-6-一个真实的高速缓存层次结构的解剖">6.4.6 一个真实的高速缓存层次结构的解剖</h3><p>只保存指令的高速缓存: $i-cache$, 只保存数据的高速缓存: $d-cache$</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.31znbzd2lx40.png" alt=""></p><h3 id="6-4-7-高速缓存参数的性能影响">6.4.7 高速缓存参数的性能影响</h3><ol><li>不命中率: 不命中数量 / 引用数量</li><li>命中率: 1 - 不命中率</li><li>命中时间: 高速缓存传到 CPU 的时间</li><li>不命中处罚: 由于不命中所需要的额外时间</li></ol><p><strong>cache大小</strong>: 较大的高速缓存可能会提高命中率, 但也会增加命中时间 <br><strong>块大小</strong>: 过大提高命中率, 但增加不命中处罚, 过小反之 <br><strong>相联度</strong>: 相联度高则增加命中时间和不命中处罚, 所以不命中处罚越低, 使用越低的相联度 <br><strong>写策略</strong>: 层次越低越容易使用写回策略</p><h2 id="6-5-编写高速缓存友好的代码">6.5 编写高速缓存友好的代码</h2><ol><li><p>注意力集中在核心函数核心循环上</p></li><li><p>减小每个循环内部的缓存不命中数量</p></li><li><p>对局部变量反复引用是好的</p></li><li><p>步长为 1 的引用模式是好的</p></li></ol><h2 id="6-6-综合-高速缓存对程序性能的影响">6.6 综合: 高速缓存对程序性能的影响</h2><h3 id="6-6-1-存储器山">6.6.1 存储器山</h3><p>读的速度: 读吞吐量 / 读带宽</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3bqykm96gjc.webp" alt=""></p><h3 id="6-6-2-重新排列循环以提高时间局部性">6.6.2 重新排列循环以提高时间局部性</h3><p>通过分析数组步长从而确认效率</p><h3 id="6-6-3-在程序中利用局部性">6.6.3 在程序中利用局部性</h3><ol><li>注意力集中在内循环上</li><li>按照数据对象存储在内存中的顺序, 步长为 1 读取内存, 增大空间局部性</li><li>存储器中读入数据对象, 就尽可能多地使用, 增大空间局部性</li></ol><h2 id="6-6-小结">6.6 小结</h2><p>RAM, ROM, 磁盘, 硬盘 <br>注意程序编写的局部性</p><h1>练习</h1><h2 id="6-1">6.1</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.2wz2cfmsutm0.webp" alt=""></p><h2 id="6-2">6.2</h2><p>$2 * 2 * 10000 * 400 * 512 = 8192000000$</p><h2 id="6-3">6.3</h2><p>$8 + 2 + 0.008 = 10.008ms$</p><h2 id="6-4">6.4</h2><p>估计有两千个扇区</p><ol><li>$5 + 3 + 0.006 * 2000 = 20ms$</li><li>$2000 \times (5 + 3 + 0.006) \approx 16000ms$</li></ol><h2 id="6-5">6.5</h2><ol><li>8 年</li><li>13 年</li><li>17535 年</li></ol><h2 id="6-6">6.6</h2><p>大概每 一年半 价格减半, 大概到 2025 年</p><h2 id="6-7">6.7</h2><p>循环次序 $k$, $i$, $j$</p><h2 id="6-8">6.8</h2><p><code>clear1 &gt; clear2 &gt; clear3</code></p><h2 id="6-9">6.9</h2><p>略</p><h2 id="6-10">6.10</h2><p>$75%$</p><h2 id="6-11">6.11</h2><ol><li>$2^s$ 个块是一组</li><li>前 $2^18$ 是一组, 这样 <code>array</code> 所有的元素只能放在一个组里</li></ol><h2 id="6-12">6.12</h2><ol><li>12 ~ 5: CT</li><li>4 ~ 2: CI</li><li>1 ~ 0: CO</li></ol><h2 id="6-13-6-16">6.13 ~ 6.16</h2><p>略</p><h2 id="6-17">6.17</h2><p>一步一步往 cache 里面塞即可</p><ol><li><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.d7slzagpcp4.webp" alt=""><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3q791xywxvc0.webp" alt=""></p></li><li><p>32 个字节足够容纳两个数组, 所以当每个块开始的时候会有不命中<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3tffsz4tjk40.webp" alt=""></p></li></ol><h2 id="6-18-6-20">6.18 ~ 6.20</h2><p>原本的 cache 只能容得下一半的 <code>grid</code> 数组</p><ol><li>每次都是不命中, 命中, 不命中, 命中循环, 答案: 512, 256, 0.5</li><li>同上次, 扩容后只有在第一次的时候会不命中, 答案: 512, 256, 0.5, 0.25</li><li>连续读 x, y, 一次不命中后接三个命中, 扩容也没有影响, 答案: 512, 128, 0.25, 0.25</li></ol><h2 id="6-21">6.21</h2><p>$2100 / 12000 * 8 \approx 1.5 周期$</p><h2 id="6-22">6.22</h2><p>基本不等式可得 $x = 0.5$</p><h2 id="6-23">6.23</h2><p>$4 + (60000/15000) / 2 + (60000/15000) / 800 = 6.005ms$</p><h2 id="6-24">6.24</h2><ol><li>$4 + 2 + 0.004 * 4000 = 22ms$</li><li>$4000 \times (4 + 2 + 0.004) \approx 24000ms$</li></ol><h2 id="6-25-6-33">6.25 ~ 6.33</h2><p>略</p><h2 id="6-34">6.34</h2><p><code>src[0], src[2], dst[0], dst[2]</code> 在块 1, 其余在块 2, 剩下模拟即可</p><h2 id="6-35">6.35</h2><p>128 字节所有的数组都能放下, 每行第一个是 m, 其他是 h</p><h2 id="6-36">6.36</h2><ol><li>100%</li><li>25%</li><li>由于 LRU 策略, 被替换的块以后都不会用了, 25%</li><li>不能, 扩大总容量跟情况2一样, 25%</li><li>可以, 同样是被替换的块不会再用, $\frac 18$ 12.5%</li></ol><h2 id="6-37">6.37</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> S = <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> pre[S];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> id = x * N + y;</span><br><span class="line">    <span class="type">int</span> which_s = (id / <span class="number">4</span>) % S;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> tmp = id / <span class="number">4</span> * <span class="number">4</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="built_in">int</span>(pre[which_s] != tmp);</span><br><span class="line"></span><br><span class="line">    pre[which_s] = tmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">sumA</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> vacant = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="keyword">sizeof</span> pre);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">            vacant += <span class="built_in">get</span>(i, j, N);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span> * vacant / (N * N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">sumB</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> vacant = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="keyword">sizeof</span> pre);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            vacant += <span class="built_in">get</span>(i, j, N);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span> * vacant / (N * N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">sumC</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> vacant = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="keyword">sizeof</span> pre);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j += <span class="number">2</span>) </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i += <span class="number">2</span>) </span><br><span class="line">            vacant += <span class="built_in">get</span>(i, j, N) + <span class="built_in">get</span>(i + <span class="number">1</span>, j, N) +</span><br><span class="line">                      <span class="built_in">get</span>(i, j + <span class="number">1</span>, N) + <span class="built_in">get</span>(i + <span class="number">1</span>, j + <span class="number">1</span>, N);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span> * vacant / (N * N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;N: &quot;</span> &lt;&lt; N &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sumA</span>(N) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sumB</span>(N) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sumC</span>(N) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>(<span class="number">64</span>);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">test</span>(<span class="number">60</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用程序模拟即可</p><h2 id="6-38">6.38</h2><ol><li>1024</li><li>128</li><li>12.5%</li></ol><h2 id="6-39">6.39</h2><ol><li>1024</li><li>256, 有256次循环</li><li>25%</li></ol><h2 id="6-40">6.40</h2><ol><li>1024</li><li>128 + 128, 第一个循环 16 * 16 / 2, 第二个循环一样</li><li>25%</li></ol><h2 id="6-41">6.41</h2><p>类似 6.39, 25%</p><h2 id="6-42">6.42</h2><p>类似 6.41, 25%</p><h2 id="6-43">6.43</h2><p>每次都不命中, 100%</p><h2 id="6-44">6.44</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Clock frequency is approx. 2495.3 MHz</span><br><span class="line">Memory mountain (MB/sec)</span><br><span class="line">        s1      s2      s3      s4      s5      s6      s7      s8      s9      s10     s11     s12     s13     s14    s15</span><br><span class="line">128m    48812   26028   17525   13319   10529   7781    5952    4623    3946    3485    3909    3591    3341    3140   3011</span><br><span class="line">64m     57490   31492   20983   16559   13554   11475   9621    7352    6988    6282    5846    5287    5044    4868   4319</span><br><span class="line">32m     60452   41773   28792   25183   19910   16338   13622   11359   10196   9620    9651    9963    9768    11949  12536</span><br><span class="line">16m     67178   58971   45000   35361   27445   22549   19164   16285   15586   14616   14368   14219   14118   14115  14517</span><br><span class="line">8m      68021   60963   46108   36517   27876   22910   19264   16563   15795   14827   14410   14153   14108   14068  14476</span><br><span class="line">4m      68550   63219   49625   36302   27798   22959   19255   16502   15848   14751   14383   14073   14124   13954  14334</span><br><span class="line">2m      68026   62334   48622   35940   27816   23165   19544   16740   15897   15026   14728   14560   14978   15366  16417</span><br><span class="line">1024k   65208   54567   43391   34113   27290   23413   20342   18045   18170   18622   19378   20049   20330   20882  20890</span><br><span class="line">512k    68494   65086   56633   42613   33437   28502   24430   21307   21298   21272   21333   21376   21411   21359  21272</span><br><span class="line">256k    68315   65412   57003   42753   33544   28501   24591   21101   21376   21272   21237   21376   21410   21237  21534</span><br><span class="line">128k    68137   65412   56633   42475   33544   27953   24590   21238   21376   21446   21623   21375   21410   20765  21804</span><br><span class="line">64k     68137   64129   55907   41931   33544   27952   24590   21517   22022   21802   21235   20964   21876   23361  43607</span><br><span class="line">32k     68137   62896   64125   58403   59460   60563   58401   51103   51901   65396   59447   54496   62880   46711  54496</span><br><span class="line">16k     65412   68137   68133   58403   54496   54496   77852   51103   60552   54496   49539   45414   62880   38926  54496</span><br></pre></td></tr></table></figure><h2 id="6-45-6-46">6.45 ~ 6.46</h2><p>主要使用分块的一些想法</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP 学习笔记 (第四章) (暂跳过流水线实现)</title>
      <link href="/2023/08/21/4csapp/"/>
      <url>/2023/08/21/4csapp/</url>
      
        <content type="html"><![CDATA[<h1>Chapter 4: 处理器体系结构</h1><p>一个处理器支持的指令和指令的字节级编码称为它的 <strong>指令集体系结构(ISA)</strong></p><h2 id="4-1-Y86-64-指令集体系结构">4.1 Y86-64 指令集体系结构</h2><h3 id="4-1-1-程序员可见的状态">4.1.1 程序员可见的状态</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.2jxl71rlhei0.png" alt=""><br>15 个寄存器 (省略 <code>%r15</code>) 以简化指令的编码 \</p><h3 id="4-1-2-Y86-64-指令">4.1.2 Y86-64 指令</h3><p>Y86-64 只包含八字节的整数操作</p><ol><li><code>movq</code> 被分解成了四个指令<ul><li><code>irmovq</code> 立即数到寄存器</li><li><code>rrmovq</code> 寄存器到寄存器</li><li><code>mrmovq</code> 内存到寄存器</li><li><code>rmmovq</code> 寄存器到内存</li></ul></li><li>四个整数操作指令: <code>addq</code>, <code>subq</code>, <code>andq</code>, <code>xorq</code> <br>这些指令设置三个条件码 <code>ZF</code>, <code>SF</code>, <code>OF</code></li><li>七个跳转指令: <code>jmp</code>, <code>je</code>, <code>jne</code>, <code>jg</code>, <code>jge</code>, <code>jl</code>, <code>jle</code></li><li>六个条件传送指令: <code>cmove</code>, <code>cmovne</code>, <code>cmovg</code>, <code>cmovge</code>, <code>cmovl</code>, <code>cmovle</code></li><li><code>call</code> 将返回地址入栈, 跳转到目的地址 <br><code>ret</code> 把返回地址出栈, 跳转到返回地址</li><li><code>pushq</code>, <code>popq</code> 入栈出栈</li><li><code>halt</code> 指令停止指令的执行, 并将状态码设置成 <code>HLT</code></li></ol><h3 id="4-1-3-指令编码">4.1.3 指令编码</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.2dv3hwhumk00.png" alt=""></p><p>每条指令的第一个字节表明指令的类型, 高四位是代码部分, 低四位是功能部分</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6965wwbntzs0.webp" alt=""></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.71p8q0sfgug0.webp" alt=""></p><p><code>RISC</code> 和 <code>CISC</code> 的区别:<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.29lao3kl50is.png" alt=""></p><h3 id="4-1-4-Y86-64-异常">4.1.4 Y86-64 异常</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.pzpx8rvb528.webp" alt=""></p><p>正常的处理器遇到错误时会调用异常处理程序, 在这里只是简单地让程序终止</p><h3 id="4-1-5-Y86-64-程序">4.1.5 Y86-64 程序</h3><p>Y86-64 将常数加载到寄存器, 因为它不能在算数指令中使用立即数</p><h3 id="4-1-6-一些-Y86-64-指令的详情">4.1.6 一些 Y86-64 指令的详情</h3><p><code>pushq %rsp</code> 压入原始值, 之后再把 <code>%rsp</code> 减去 8</p><h2 id="4-2-逻辑控制语言和硬件控制语言-HDL">4.2 逻辑控制语言和硬件控制语言 <code>HDL</code></h2><p>逻辑 1 使用 1.0V 左右的电压表示, 逻辑 0 使用 0.0V 左右的电压表示</p><p>实现一个数字系统需要三个主要的组成部分</p><ol><li>计算对位进行操作的函数的组合逻辑</li><li>存储位的存储器单元</li><li>控制存储器单元更新的时钟信号</li></ol><p><code>HCL</code> 硬件控制语言, 用于描述处理器的控制逻辑</p><h3 id="4-2-1-逻辑门">4.2.1 逻辑门</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.hj9p4vcwrug.webp" alt=""></p><h3 id="4-2-2-组合电路和-HCL-布尔表达式">4.2.2 组合电路和 HCL 布尔表达式</h3><p>很多的逻辑门组合成的网可以构建一个计算块, 称为组合电路, 构建有如下限制</p><ol><li>输入来源: 一个系统输入 / 某个存储器单元的输出 / 某个逻辑门的输出</li><li>多个逻辑门的输出不能连接在一起, 否则信号可能冲突</li><li>逻辑门组合的网不能有环, 否则会产生歧义</li></ol><hr><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool out = (s &amp;&amp; a) || (!s &amp;&amp; b);</span><br></pre></td></tr></table></figure><p>这是多路复用器 (<code>MUX</code>), <code>s = 0</code> 时输出 <code>b</code>, 否则输出 <code>a</code></p><p>注意 <code>HCL</code> 和 <code>C</code> 的区别:</p><ol><li>电路的输入变化了, 经过延迟之后输出也会变化</li><li>参数只能是 0 / 1</li><li>没有短路效果</li></ol><h3 id="4-2-3-字级的组合电路和-HCL-整数表达式">4.2.3 字级的组合电路和 HCL 整数表达式</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.38bhs0bw8bm0.png" alt=""></p><p>字级相等操作: <code>bool Eq = (A == B)</code></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.fuwslqxadgw.png" alt=""></p><p>字级多路复用器: <br>这种格式按顺序求 冒号之前的值, 到第一个结果为 1 的位置再执行冒号之后的代码 <br>结尾的 1 表示 <code>else</code></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">word Out = [</span><br><span class="line">    s: A;</span><br><span class="line">    <span class="number">1</span>: B;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">word Out = [</span><br><span class="line">    !s0 &amp;&amp; !s1: A;</span><br><span class="line">    !s0       : B;</span><br><span class="line">    !s1       : C;</span><br><span class="line">    1         : D;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.12bozstdokds.webp" alt=""></p><h3 id="4-2-4-集合关系">4.2.4 集合关系</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1l9updfx4oow.webp" alt=""></p><p>拆解 <code>code</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bool s1 = (code == 2) || (code == 3);</span><br><span class="line">bool s0 = (code == 1) || (code == 3);</span><br></pre></td></tr></table></figure><p>也可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bool s1 = code in &#123; 2, 3 &#125;;</span><br><span class="line">bool s0 = code in &#123; 1, 3 &#125;;</span><br></pre></td></tr></table></figure><h3 id="4-2-5-存储器和时钟">4.2.5 存储器和时钟</h3><p>考虑两类存储设备:</p><ol><li>寄存器: 时钟信号控制寄存器加载输入值</li><li>内存(随机访问存储器): 用地址来决定读写哪个字</li></ol><p>硬件寄存器: 时钟是低电位则输出不变, 时钟变成高电位的时候, 输出变为输入</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.22uac83gf2ao.webp" alt=""></p><h2 id="4-3-Y86-64-的顺序实现">4.3 Y86-64 的顺序实现</h2><h3 id="4-3-1-将处理组织成阶段">4.3.1 将处理组织成阶段</h3><p>各个阶段:</p><ol><li>取指: 从内存中取出 PC 所指的代码</li><li>译码: 读入至多两个操作数</li><li>执行: 执行代码</li><li>访存: 将数据写入内存或从内存读出</li><li>写回: 最多写两个结果到寄存器文件</li><li>更新 PC: 下一条指令</li></ol><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.4daz640bsx40.png" alt=""><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.2t22bubmw7q0.png" alt=""><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1ki6n5ahao00.png" alt=""><br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.65xvm99mvko0.webp" alt=""></p><h3 id="4-3-2-SEQ-硬件结构">4.3.2 SEQ 硬件结构</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6ylve3dk4t0.png" alt=""></p><h3 id="4-3-3-SEQ-的时序">4.3.3 SEQ 的时序</h3><p>SEQ 的实现包括:</p><ol><li>组合逻辑</li><li>两种存储设备<ul><li>时钟寄存器: PC, 条件码寄存器</li><li>随机访问存储器: RAM, 寄存器</li></ul></li></ol><p>组合逻辑不需要时序控制, 只要输入变化就会结果变化</p><p>从不回读: 处理器不需要为了完成一条指令的执行而去读这个指令更新了的状态</p><p>当时钟开始下一个周期时, 所有状态才会更新</p><h3 id="4-3-4-SEQ-阶段的实现">4.3.4 SEQ 阶段的实现</h3><p>常数表:<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.252twoaililc.png" alt=""></p><p><code>imem_error</code> 指令地址不合法 <br><code>dmem_error</code> 内存地址不合法 <br><code>instr_valid</code> 指令是否合法 <br><code>need_regids</code> 是否需要寄存器 <br><code>need_valC</code> 是否需要 <code>valC</code></p><p><strong>取指阶段</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.73zd07zl3gw0.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bool need_regids = </span><br><span class="line">        icode in &#123; IRRMOVQ, IOPQ, IPUSHQ, IPOPQ, </span><br><span class="line">                   IIRMOVQ, IRMMOVQ, IMRMOVQ &#125;;</span><br><span class="line">bool need_valC = </span><br><span class="line">        icode in &#123; IRMMOVQ, IMRMOVQ, IIRMOVQ, IJXX, ICALL &#125;;</span><br></pre></td></tr></table></figure><p>新的指令地址: <code>valP = PC + 1 + need_regids + 8 * need_valC</code></p><p><strong>译码和写回阶段</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.35hadi9oyai0.webp" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">word srcA = [</span><br><span class="line">        icode in &#123; IRRMOVQ, IRMMOVQ, IOPQ, IPUSHQ &#125; : rA;</span><br><span class="line">        icode in &#123; IPOPQ, IRET &#125; : RRSP;</span><br><span class="line">        1 : RNONE;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">word srcB = [</span><br><span class="line">        icode in &#123; IOPQ, IRMMOVQ, IMRMOVQ &#125; : rB;</span><br><span class="line">        icode in &#123; IPUSHQ, IPOPQ, ICALL, IRET &#125; : RRSP;</span><br><span class="line">        1 : RNONE;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">word dstE = [</span><br><span class="line">        icode in &#123; IRRMOVQ &#125; : rB;</span><br><span class="line">        icode in &#123; IIRMOVQ, IOPQ &#125; : rB;</span><br><span class="line">        icode in &#123; IPUSHQ, IPOPQ, ICALL, IRET &#125; : RRSP;</span><br><span class="line">        1 : RNONE;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">word dstM = [</span><br><span class="line">        icode in &#123; IMRMOVQ, IPOPQ &#125; : rA;</span><br><span class="line">        1 : RNONE;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>执行阶段</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.f89igfzn714.webp" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">word aluA = [</span><br><span class="line">        icode in &#123; IRRMOVQ, IOPQ &#125; : valA;</span><br><span class="line">        icode in &#123; IIRMOVQ, IRMMOVQ, IMRMOVQ &#125; : valC;</span><br><span class="line">        icode in &#123; ICALL, IPUSHQ &#125; : -8;</span><br><span class="line">        icode in &#123; IRET, IPOPQ &#125; : 8;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">word aluB = [</span><br><span class="line">        icode in &#123; IOPQ, IRMMOVQ, IMRMOVQ, IPUSHQ, </span><br><span class="line">                   IPOPQ, ICALL, IRET &#125; : valB;</span><br><span class="line">        icode in &#123; IRRMOVQ, IIRMOVQ &#125; : 0;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">word alufun = [</span><br><span class="line">        icode == IOPQ : ifun;</span><br><span class="line">        1 : ALUADD;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">bool setCC = icode in &#123; IOPQ &#125;;</span><br></pre></td></tr></table></figure><p>在这里省略 <code>cond</code> 模块的设计</p><p><strong>访存阶段</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.32vg9spt8js0.webp" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">word mem_addr = [</span><br><span class="line">        icode in &#123; IRMMOVQ, IPUSHQ, ICALL, IMRMOVQ &#125; : valE;</span><br><span class="line">        icode in &#123; IPOPQ, IRET &#125; : valA;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">word mem_data = [</span><br><span class="line">        icode in &#123; IRMMOVQ, IPUSHQ &#125; : valA;</span><br><span class="line">        icode in &#123; ICALL &#125; : valP;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">bool mem_read = </span><br><span class="line">        icode in &#123; IMRMOVQ, IPOPQ, IRET &#125;;</span><br><span class="line"></span><br><span class="line">bool mem_write = </span><br><span class="line">        icode in &#123; IRMMOVQ, IPUSHQ, ICALL &#125;;</span><br><span class="line"></span><br><span class="line">word Stat = [</span><br><span class="line">        imem_error || dmem_error : SADR;</span><br><span class="line">        !instr_valid : SINS;</span><br><span class="line">        icode == IHALT : SHLT;</span><br><span class="line">        1 : SAOK;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>更新 PC 阶段</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.2si6ar556eq0.webp" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">word new_pc = [</span><br><span class="line">        icode == ICALL : valC;</span><br><span class="line">        icode == IJXX &amp;&amp; Cnd : valC;</span><br><span class="line">        icode == IRET : valM;</span><br><span class="line">        1 : valP;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>SEQ小结</strong></p><p>顺序执行使得每个时钟周期都必须完成这一系列操作, 所以时钟频率会非常低</p><h2 id="4-4-流水线的通用原理">4.4 流水线的通用原理</h2><h3 id="4-4-1-计算流水线">4.4.1 计算流水线</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6yys0oce0hc0.png" alt=""></p><p>$$<br>吞吐量 = \frac { 1 条指令 }{ (20 + 300)ps } \times \frac {1000ps}{lns} = 3.12GPS<br>$$<br>$lns = 10^{-9}s$</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.418nh9ufbak0.png" alt=""></p><p>把任务分成一些阶段, 在中间放上流水线寄存器</p><ol><li>时钟周期为 $120ps$</li><li>吞吐量大约是 $8.33GPS$</li><li>延迟是 $360ps$</li></ol><h3 id="4-4-2-流水线操作的详细说明">4.4.2 流水线操作的详细说明</h3><p>在时钟上升前, 前一个时钟周期的操作已经到了流水线寄存器的输入端, 但寄存器的状态还未改变 <br>在时钟上升时, 流水线寄存器更新 <br>如此循环往复</p><h3 id="4-4-3-流水线的局限性">4.4.3 流水线的局限性</h3><p><strong>不一致的划分</strong></p><p>时钟周期是按照最慢的阶段来划分的<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.yqlvy2soh28.png" alt=""></p><p><strong>流水线过深, 收益反而下降</strong></p><p>更多寄存器产生的延迟成为了时钟周期的限制因素</p><h3 id="4-4-4-带反馈的流水线系统">4.4.4 带反馈的流水线系统</h3><p>对于执行程序的系统, 相邻指令可能是相关的</p><ol><li>数据相关</li><li>控制相关</li></ol><p>应当正确处理反馈的影响</p><h2 id="4-5-Y86-64-的流水线实现">4.5 Y86-64 的流水线实现</h2><h3 id="4-5-1-SEQ-重新安排计算阶段">4.5.1 SEQ+: 重新安排计算阶段</h3><p>创建寄存器来保存上一条指令的状态从而计算 PC<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5eqgg2739kg0.webp" alt=""></p><p>这种改进称作电路重定时, 可以用来平衡流水线中各个阶段的延迟</p><h3 id="4-5-2-插入流水线寄存器">4.5.2 插入流水线寄存器</h3><p>流水线寄存器按照如下标号</p><ol><li>$F$, 保存 PC 的预测值</li><li>$D$, 取指和译码阶段间, 保存最新取出的指令信息</li><li>$E$, 译码和执行阶段间, 保存译码的指令和寄存器读出的值</li><li>$M$, 执行和访存阶段间, 保存最新执行的指令的结果, 保存分支条件和目标</li><li>$W$, 访存和反馈路径之间, 提供给寄存器文件写, 向 PC 选择逻辑提供返回地址</li></ol><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3knykm65sz60.webp" alt=""></p><h3 id="4-5-3-对信号进行重新排列和标号">4.5.3 对信号进行重新排列和标号</h3><p>在信号前面加上大写的流水线寄存器名字 <br>在信号名前面加上小写的阶段首字母</p><p>注意 <code>SelectA</code> 模块</p><ol><li><code>call</code> 在访存阶段需要 valP</li><li><code>jxx</code> 指令在执行阶段可能需要 valP</li></ol><p>但这些指令都不需要 valA, 所以这两者合并</p><h2 id="4-5-4-预测下一个-PC">4.5.4 预测下一个 PC</h2><p>每个时钟周期都发射一条指令, 每个时钟周期都要有一条新指令 <br>所以在取出当前指令时, 需要马上取出下一条指令 <br>如果取出的时条件分支指令, 那么到执行阶段才会知道是否跳转, <code>ret</code> 同理</p><p>所以对于指令进行分支预测, 当错误的时候再有错误处理</p><p>Y86-64 采用 valP 作为预测结果, 这是非常简单的处理方式</p><h2 id="4-5-5-流水线冒险">4.5.5 流水线冒险</h2><ol><li>数据冒险</li><li>控制冒险</li></ol><p>这与之前的反馈处理相似</p><p><strong>暂停</strong></p><p>停止流水线中的指令, 使其处于译码状态, 直到指令后 产生源操作数的指令 到写回阶段</p><p>实际操作是动态地插入 <code>nop</code> 指令, 称作插入气泡</p><p>这样会严重降低处理器效率</p><p><strong>转发</strong></p><p>保存 <code>e_valE</code>, <code>m_valM</code>, <code>M_valE</code>, <code>W_valM</code>, <code>W_valE</code> 作为转发源 <br>以及两个转发目的 <code>valA</code>, <code>valB</code></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.70wvuj6utr80.png" alt=""></p><p><strong>加载/使用数据冒险</strong></p><p>暂停处理 加载/使用冒险 的方法称为 <strong>加载互锁</strong> <br>加载互锁和转发结合起来可以处理所有可能的数据冒险</p><p><strong>避免控制冒险</strong></p><p>处理器无法根据取指阶段的指令来确定下一条指令的地址时会出现控制冒险</p><p>在 Y86-64 中, 只有 <code>ret</code> 和 <code>jxx</code> 指令(预测错误)会造成控制冒险</p><p>在分支逻辑到了执行阶段, 发现之前预测的指令不对时, 已经有两条错误的指令进入流水线 <br>此时只需要在下一个周期往译码和执行之间插入气泡, 并同时取出跳转指令之后的指令, 这样就能取消两条错误指令</p><h3 id="4-5-6-异常处理">4.5.6 异常处理</h3><ol><li>在流水线中, 可能引发多个异常, 一般返回流水线最深的指令引起的异常</li><li>由于错误的分支预测, 将被取消的指令产生的异常</li><li>一条指令导致了异常, 后面的指令在异常指令完成前改变了部分状态</li></ol><p>当处于访存或写回阶段中的指令导致异常时, 流水线必须禁止更新条件码寄存器或者数据内存</p><h3 id="4-5-7-PIPE-各阶段的实现">4.5.7 PIPE 各阶段的实现</h3><p><strong>PC 选择和取指阶段</strong></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1t1hnxiuehfk.webp" alt=""></p><p><strong>译码和写回阶段</strong></p><h1>练习</h1><h2 id="4-1-4-2">4.1 ~ 4.2</h2><p>体力活</p><h2 id="4-3">4.3</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sum:</span><br><span class="line">    xorq %rax,%rax # sum = 0</span><br><span class="line">    andq %rsi,%rsi # Set CC</span><br><span class="line">    jmp test # Goto test</span><br><span class="line">loop:</span><br><span class="line">    mrmovq (%rdi),%r10 # Get *start</span><br><span class="line">    addq %r10,%rax # Add to sum</span><br><span class="line">    iaddq $8,%rdi # start++</span><br><span class="line">    iaddq $-1,%rsi # count--. Set CC</span><br><span class="line">test:</span><br><span class="line">    jne loop # Stop when 0</span><br><span class="line">    ret # Return</span><br></pre></td></tr></table></figure><h2 id="4-4">4.4</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">rsum:</span><br><span class="line">    andq %rsi, %rsi</span><br><span class="line">    jle .L3</span><br><span class="line">    pushq %rbx</span><br><span class="line">    mrmovq (%rdi), %rbx</span><br><span class="line">    irmovq $1, %r10</span><br><span class="line">    subq %r8, %rsi</span><br><span class="line">    irmovq $8, %r10</span><br><span class="line">    subq %r9, %rdi</span><br><span class="line">    call rsum</span><br><span class="line">    addq %rbx, %rax</span><br><span class="line">    popq %rbx</span><br><span class="line">    ret</span><br><span class="line">.L3:</span><br><span class="line">    irmovq $0, %rax</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure><h2 id="4-5">4.5</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">absSum:</span><br><span class="line">    irmovq $8, %r8</span><br><span class="line">    irmovq $1, %r9</span><br><span class="line"></span><br><span class="line">    xorq %rax, %rax</span><br><span class="line"></span><br><span class="line">    andq %rsi, %rsi</span><br><span class="line"></span><br><span class="line">    jmp test</span><br><span class="line"></span><br><span class="line">loop:</span><br><span class="line">    mrmovq (%rdi), %r10</span><br><span class="line">    xorq %r11, %r11</span><br><span class="line">    subq %r10, %r11</span><br><span class="line">     </span><br><span class="line">    jle pos</span><br><span class="line">    rrmovq %r11, %r10</span><br><span class="line"></span><br><span class="line">pos:</span><br><span class="line">    addq %r10, %rax</span><br><span class="line">    addq %r8, %rdi</span><br><span class="line">    subq %r9, %rsi</span><br><span class="line"></span><br><span class="line">test:</span><br><span class="line">    jne loop</span><br><span class="line">    ret</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-6">4.6</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">absSum:</span><br><span class="line">    irmovq $8, %r8</span><br><span class="line">    irmovq $1, %r9</span><br><span class="line"></span><br><span class="line">    xorq %rax, %rax</span><br><span class="line"></span><br><span class="line">    andq %rsi, %rsi</span><br><span class="line"></span><br><span class="line">    jmp test</span><br><span class="line"></span><br><span class="line">loop:</span><br><span class="line">    mrmovq (%rdi), %r10</span><br><span class="line">    xorq %r11, %r11</span><br><span class="line">    subq %r10, %r11</span><br><span class="line"></span><br><span class="line">    cmovg %r11, %r10</span><br><span class="line"></span><br><span class="line">    addq %r10, %rax</span><br><span class="line">    addq %r8, %rdi</span><br><span class="line">    subq %r9, %rsi</span><br><span class="line"></span><br><span class="line">test:</span><br><span class="line">    jne loop</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure><h2 id="4-7">4.7</h2><p>压入原始值</p><h2 id="4-8">4.8</h2><p>把栈顶的值弹出给栈指针 <br>Y86-64 中, <code>mrmovq (%rsp), %rsp</code></p><h2 id="4-9">4.9</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool <span class="keyword">xor</span> = (!a &amp;&amp; b) || (!b &amp;&amp; a);</span><br></pre></td></tr></table></figure><h2 id="4-10">4.10</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6xh7p6q5sqs0.webp" alt=""></p><h2 id="4-11">4.11</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">word MIN3 = [</span><br><span class="line">    A &lt;= B &amp;&amp; A &lt;= C: A;</span><br><span class="line">    B &lt;= C          : B;</span><br><span class="line">    1               : C;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="4-12">4.12</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">word MID3 = [</span><br><span class="line">    B &lt;= A &amp;&amp; A &lt;= C: A;</span><br><span class="line">    C &lt;= A &amp;&amp; A &lt;= B: A;</span><br><span class="line">    A &lt;= B &amp;&amp; B &lt;= C: B;</span><br><span class="line">    C &lt;= B &amp;&amp; B &lt;= A: B;</span><br><span class="line">    1               : C;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="4-13">4.13</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.1ki6n5ahao00.png" alt=""></p><h2 id="4-14">4.14</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.f82f8hmm6x4.webp" alt=""></p><h2 id="4-15">4.15</h2><p>压入栈原始值, 一致</p><h2 id="4-16">4.16</h2><p>最终结果是把 栈指针 所指的值 $\rightarrow$ 栈指针</p><h2 id="4-17">4.17</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.397ht1qwqzs0.png" alt=""></p><h2 id="4-18">4.18</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.62suaq2o9780.webp" alt=""></p><h2 id="4-19">4.19</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bool need_valC = </span><br><span class="line">        icode in &#123; IRMMOVQ, IMRMOVQ, IIRMOVQ, IJXX, ICALL &#125;;</span><br></pre></td></tr></table></figure><h2 id="4-20">4.20</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">word srcB = [</span><br><span class="line">        icode in &#123; IOPQ, IRMMOVQ, IMRMOVQ &#125; : rB;</span><br><span class="line">        icode in &#123; IPUSHQ, IPOPQ, ICALL, IRET &#125; : RRSP;</span><br><span class="line">        1 : RNONE;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="4-21">4.21</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">word dstM = [</span><br><span class="line">        icode in &#123; IMRMOVQ, IPOPQ &#125; : rA;</span><br><span class="line">        1 : RNONE;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="4-22">4.22</h2><p><code>dstM</code> 优先级更高</p><h2 id="4-23">4.23</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">word aluB = [</span><br><span class="line">        icode in &#123; IOPQ, IRMMOVQ, IMRMOVQ, IPUSHQ, </span><br><span class="line">                   IPOPQ, ICALL, IRET &#125; : valB;</span><br><span class="line">        icode in &#123; IRRMOVQ, IIRMOVQ &#125; : 0;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="4-24">4.24</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">word dstE = [</span><br><span class="line">        icode in &#123; IRRMOVQ &#125; &amp;&amp; Cnd : rB;</span><br><span class="line">        icode in &#123; IIRMOVQ, IOPQ &#125; : rB;</span><br><span class="line">        icode in &#123; IPUSHQ, IPOPQ, ICALL, IRET &#125; : RRSP;</span><br><span class="line">        1 : RNONE;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="4-25">4.25</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">word mem_data = [</span><br><span class="line">        icode in &#123; IRMMOVQ, IPUSHQ &#125; : valA;</span><br><span class="line">        icode in &#123; ICALL &#125; : valP;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="4-26">4.26</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bool mem_write = </span><br><span class="line">        icode in &#123; IRMMOVQ, IPUSHQ, ICALL &#125;;</span><br></pre></td></tr></table></figure><h2 id="4-27">4.27</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">word Stat = [</span><br><span class="line">        imem_error || dmem_error : SADR;</span><br><span class="line">        !instr_valid : SINS;</span><br><span class="line">        icode == IHALT : SHLT;</span><br><span class="line">        1 : SAOK;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="4-28">4.28</h2><ol><li>ABC, DEF</li><li>AB, CD, EF</li><li>A, BC, D, EF</li><li>五个阶段, A, B, C, D, EF, 周期时长 $100ps$</li></ol><h2 id="4-29">4.29</h2><ol><li>延迟 $(300+20k)ps$, 吞吐量 $\frac {1000}{\frac{300}{k}+20} = \frac{1000k}{300+20k}$</li><li>$k$ 趋近于无穷大, 吞吐量为 $50$, 延迟也为无穷大</li></ol><h2 id="4-30">4.30</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">word f_stat = [</span><br><span class="line">        imem_error : SADR;</span><br><span class="line">        !instr_valid : SINS;</span><br><span class="line">        f_icode == IHALT : SHLT;</span><br><span class="line">        1 : SAOK;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="4-31">4.31</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">word d_valA = [</span><br><span class="line">        D_icode in &#123; ICALL, IJXX &#125; : D_valP;</span><br><span class="line">        d_srcA == e_dstE : e_valE;</span><br><span class="line">        d_srcA == M_dstM : m_valM;</span><br><span class="line">        d_srcA == M_dstE : M_valE;</span><br><span class="line">        d_srcA == W_dstM : W_valM;</span><br><span class="line">        d_srcA == W_dstE : W_valE;</span><br><span class="line">        1 : d_rvalA;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="4-32">4.32</h2>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GDB 学习笔记</title>
      <link href="/2023/08/15/gdb/"/>
      <url>/2023/08/15/gdb/</url>
      
        <content type="html"><![CDATA[<h1>1. 常见调试策略</h1><h2 id="1-1-确认">1.1 确认</h2><ol><li>你相信某个变量有某个确定的值</li><li>你相信在给定的 <code>if-then-else</code> 语句中, <code>else</code> 语句是被执行的部分</li><li>你相信当你调用某个函数的时候, 该函数会正确接收其参数<br>找 bug 的过程就是确认上述所有事情</li></ol><h2 id="1-2-二分">1.2 二分</h2><p>根据代码行数二分, 在 <code>mid</code> 的位置确认上述事情, 进而缩小范围</p><h2 id="1-3-甚至无法通过编译">1.3 甚至无法通过编译</h2><p>删除代码直到不产生编译错误, 再逐步缩小删除的代码范围, 进而确认错误的具体位置</p><h1>2. 使用调试工具和一个好的文本编辑器</h1><h2 id="2-1-不要使用-print-大法作为主要调试手段">2.1 不要使用 <code>print</code> 大法作为主要调试手段</h2><p>你可能在代码中间添加 <code>print</code> 语句从而检查变量的值 <br>这样很不方便, 你需要重新编译所有文件, 改完 bug 还要逐一删除</p><p>调试工具不需要重新编译, 而且还可以自动追踪所有变量 <br>而且它还可以告诉你段错误等致命错误发生的位置</p><h2 id="2-2-工具">2.2 工具</h2><ol><li>调试工具<ol><li><code>gdb</code> 最常用的调试工具, 并不一定是最好</li><li><code>ddd</code> 是基于 $GUI$ 界面的 <code>gdb</code> <br>不过建议先使用 $TUI$ 界面的 <code>gdb</code></li></ol></li><li>编辑器: 最好支持 <code>undo</code>, <code>redo</code> , 多窗口等功能</li><li><code>IDE</code>: 有时, 调试器会集成在 <code>IDE</code> 中</li></ol><h1>3. 如何使用 <code>gdb</code></h1><p>基本策略: 设置断点, 然后往下逐步执行代码, 并随时检测变量的值</p><h2 id="3-1-常用命令">3.1 常用命令</h2><p>首先确认编译的时候使用 <code>-g</code> 命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -g file.c</span><br></pre></td></tr></table></figure><ol><li>开始和结束调试:<ul><li>开始调试 <code>gdb &lt;可执行文件&gt;</code></li><li>退出调试 <code>q</code></li></ul></li><li><code>r</code>(<code>run</code>), 正常运行程序后面要加的参数也要加进来 <code>r &lt; a.in &gt; a.out</code></li><li><code>l</code>(<code>list</code>)<ul><li>单个文件后面加行号表示列出某行, 回车键继续向下滚动</li><li>多个文件 <code>l a.b.c:55</code></li><li>可以指定函数名从而列出函数</li></ul></li><li><code>b</code> (<code>breakpoint</code>), <code>c</code>(<code>continue</code>)<ul><li><code>b</code><ul><li>第一参数是位置, 表示在哪行或者哪个函数位置打断点, 同 <code>l</code></li><li>第二参数是条件, 条件断点: <code>b main if x &gt; 0</code></li></ul></li><li><code>c</code> 表示断点过后继续执行</li><li><code>disable &lt;断点编号&gt;</code> 表示取消断点</li></ul></li><li><code>disp</code>(<code>display</code>), <code>p</code>(<code>print</code>)<ul><li><code>disp &lt;变量名&gt;</code> 表示每次运行都要显示这个变量, 用 <code>undisp &lt;编号&gt;</code> 取消</li><li><code>p &lt;变量名&gt;</code> 只打印一次, <code>p /x &lt;变量名&gt;</code> 表示使用十六进制输出</li><li><code>printf &quot;X = %d, Y = %d\n&quot;, X, Y</code>, 相当于 <code>C</code> 的 <code>printf</code> 去掉括号</li></ul></li><li><code>x/nfu &lt;地址&gt;</code><ul><li>n 表示多少内存单元</li><li>f 表示输出格式(同 C 语言)</li><li>u 表示多少个字节组成一个内存单元, 默认为 4</li></ul></li><li><code>n</code>(<code>next</code>), <code>s</code>(<code>step</code>)<ul><li><code>n</code> 向下执行一步, 但不会进入调用的函数内部</li><li><code>s</code> 向下执行一步, 如果调用了函数就会跳转到函数第一行</li><li><code>si</code>, <code>ni</code> 执行汇编代码</li></ul></li><li><code>bt</code> (<code>backtrace</code>): 查看堆栈信息, 可能会在未知问题上生效</li><li><code>set</code> 改变程序中变量的值: <code>set variable x = 12</code></li><li><code>call func()</code> 调用程序中的函数, 通常是调试目的的函数</li><li><code>define &lt;宏名称&gt;</code>, 在接下来的行中描述宏命令, 以新一行的 <code>end</code> 结尾</li></ol><p>更改代码之后, 重新编译, 不需要退出 <code>gdb</code>, 它会自动检测到二进制文件更改</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> GDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP 学习笔记 (第三章)</title>
      <link href="/2023/08/04/3csapp/"/>
      <url>/2023/08/04/3csapp/</url>
      
        <content type="html"><![CDATA[<h1>Chapter 3: 程序的机器级表示</h1><p>编译器把高级语言代码换算成汇编语言, 之后再经过汇编器和编译器生成机器代码</p><p>学习汇编语言的好处: 理解编译器的优化能力, 分析代码中隐含的低效率</p><h2 id="3-1-历史观点">3.1 历史观点</h2><p>$Intel$ 处理器俗称 $x86$, 本节介绍芯片指令集发展的历史</p><h2 id="3-2-程序编码">3.2 程序编码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -Og -o p p1.c p2.c</span><br></pre></td></tr></table></figure><p><code>gcc</code> 表示 <code>GCC C</code> 编译器 <br>编译选项 <code>-Og</code> 告诉编译器使用符合原始代码结构的机器代码的优化等级 <br>(使用较高级别的优化会使得代码严重变形, 不利于梳理汇编和源代码的关系, 不利于学习) <br><code>-o p</code> 表示生成可执行文件 <code>p</code></p><p>实际上 <code>gcc</code> 调用了一整套程序, 包括预处理器, 编译器, 汇编器, 链接器</p><h2 id="3-2-1-机器级代码">3.2.1 机器级代码</h2><p>对于机器级编程, 有两种抽象尤为重要</p><ol><li>由指令集架构来定义机器级程序的格式和行为</li><li>使用虚拟地址, 也就是一个非常大的字节数组<br>操作系统负责把虚拟地址翻译成实际的物理地址</li></ol><p>一些在 C 中对程序员隐藏的寄存器状态:</p><ol><li><code>%rip</code> 表示 PC, 给出将要执行的下一条指令在内存中的地址</li><li>整数寄存器包含 16 个命名的位置, 存储 64 位的值</li><li>条件码寄存器保存最近执行的算数或逻辑指令的状态信息, 来实现条件变化</li><li>一组向量寄存器可以存放一个或多个整数或浮点值</li></ol><h2 id="3-2-2-代码示例">3.2.2 代码示例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -Og -S mstore.c</span><br></pre></td></tr></table></figure><p><code>-S</code> 参数可以生成一个 <code>.s</code> 文件, 包含汇编代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -Og -c mstore.c</span><br></pre></td></tr></table></figure><p><code>-c</code> 参数编译并汇编此代码, 生成 <code>.o</code> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb mstore.o</span><br><span class="line">(gdb) x/14xb multstore</span><br></pre></td></tr></table></figure><p>展示程序的字节表示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -d mstore.o</span><br></pre></td></tr></table></figure><p>反汇编器, 根据机器码生成相应的汇编代码</p><p>关于机器代码和反汇编表示的特性:</p><ol><li><code>x86-64</code> 的指令长度 x 字节, <code>1 &lt;= x &lt;= 15</code>, 操作越常用, 所需字节数越少</li><li>设计指令格式的方式是: 从某个给定位置开始, 可以将字节唯一解码成机器指令</li><li>反汇编器不需要访问源代码</li><li>反汇编器产生的汇编代码跟编译器产生的汇编代码有所区别</li></ol><h3 id="3-2-3-关于格式的注解">3.2.3 关于格式的注解</h3><p>所有以 <code>.</code> 开头的行都是指导汇编器和链接器工作的伪指令, 通常可以忽略</p><p><code>ATT</code> 汇编格式与 <code>Intel</code> 有所不同, 本书使用 <code>ATT</code> 格式</p><h2 id="3-3-数据格式">3.3 数据格式</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.7jkwgbr684w0.webp" alt=""></p><p>由于系统从 16 位发展而来, 所以 16 位被称为 字 <br>32 位被称为双字, 64 位为四字</p><p>大多数 GCC 生成的汇编指令代码都有一个字符后缀, 表明操作数的大小</p><p><code>movb</code> 传送字节, <code>movw</code> 传送字, <code>movl</code> 传送双字, <code>movq</code> 传送四字</p><h2 id="3-4-访问信息">3.4 访问信息</h2><p>一组 <code>x86-64</code> 的 CPU 包含一组 16 个存储 64 位的 <strong>通用目的寄存器</strong>, 存储整数和指针</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5js7ywj3kcw0.webp" alt=""></p><p>指令可以对这些寄存器的低位字节进行访问</p><h3 id="3-4-1-操作数指示符">3.4.1 操作数指示符</h3><p>大多数指令由一个或多个操作数, 操作数被分为三种类型</p><ol><li>立即数: 表示常数, <code>$</code> 后加 C 格式的常数</li><li>寄存器: 表示某个寄存器的内容, 用 $r_a$ 表示任意寄存器, $R[r_a]$ 表示它的值</li><li>内存引用: $M_b[Addr]$ 表示从 $Addr$ 开始的 $b$ 个字节的引用, 通常省略下标 $b$</li></ol><p>多种不同的寻址模式</p><ol><li>$$x$ 即 $x$</li><li>$r_a$ 即 $R[r_a]$</li><li>$Imm(r_a, r_i, s)$ 即 $M[Imm + R[r_a] + R[r_i] * s)]$<ul><li>$r_a$ 基址寄存器</li><li>$r_i$ 变址寄存器</li><li>$s$ 比例因子, 值只能为 1, 2, 4, 8</li></ul></li></ol><h3 id="3-4-2-数据传送指令">3.4.2 数据传送指令</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5h8n3yati90.png" alt=""></p><blockquote><p>注意 <code>movl</code> 指令会把最高四个字节设置为 0, 这是惯例</p></blockquote><blockquote><p>常规的 <code>movq</code> 只能以表示为 32 位补码数字的立即数作为操作数, 并进行符号扩展得到 64 位值<br><code>movabsq</code> 能以任意 64 位立即数作为操作数, 并且只能以寄存器作为目的</p></blockquote><p>传送指令的两个操作数不能都是内存引用, 需要先将源内存引用传送到寄存器, 再传送到目标内存引用</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.69cyhxhnmc00.png" alt=""></p><p>数据传送改变寄存器的方式<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.2z8sg6a88xk0.webp" alt=""></p><h3 id="3-4-3-数据传送示例">3.4.3 数据传送示例</h3><p>代码和汇编的互相转化</p><h3 id="3-4-4-压入和弹出栈数据">3.4.4 压入和弹出栈数据</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.443ubut3zz40.webp" alt=""></p><p>根据惯例, 栈顶地址最小</p><h2 id="3-5-算数和逻辑操作">3.5 算数和逻辑操作</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5nkw0oiuw380.png" alt=""></p><h3 id="3-5-1-加载有效地址">3.5.1 加载有效地址</h3><p><code>leaq</code> 的第一个操作数是内存引用, 第二个操作数是寄存器 <br>效果就是把寄存器存储上第一个操作数</p><p><code>leaq</code> 有时与地址无关, 用它来实现简单的乘法操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="title">scale</span><span class="params">(<span class="type">long</span> x, <span class="type">long</span> y, <span class="type">long</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> t = x + <span class="number">4</span> * y + <span class="number">12</span> * z;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scale:</span><br><span class="line">    leaq (%rdi, %rsi, 4), %rax  // x + 4 * y</span><br><span class="line">    leaq (%rdx, %rdx, 2), %rdx  // z + 2 * z = 3z</span><br><span class="line">    leaq (%rax, %rdx, 4), %rax  // x + 4 * y + 4 * 3z = x + 4y + 12z</span><br></pre></td></tr></table></figure><h3 id="3-5-2-一元和二元操作">3.5.2 一元和二元操作</h3><p>第二组的操作是一元操作 <code>INC (寄存器, 内存引用)</code> <br>第三组是二元操作, <code>subq (立即数, 寄存器, 内存引用), (寄存器, 内存引用)</code></p><h3 id="3-5-3-移位操作">3.5.3 移位操作</h3><p>先给出移位量(必须使用八位寄存器, 通常是 <code>%cl</code>), 第二项给出要移位的数</p><h3 id="3-5-4-讨论">3.5.4 讨论</h3><p>函数会返回寄存器 <code>%rax</code> 的值</p><h3 id="3-5-5-特殊的算数操作">3.5.5 特殊的算数操作</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.7drv1ofepjo0.webp" alt=""></p><p>128 位的数称为 八字(oct word)</p><p>乘法指令:  <br><code>mul</code> 无符号乘法, <code>imul</code> 有符号乘法 <br>这些是单操作数的指令, 跟之前的 <code>mul</code> 有所不同 <br><code>imulq</code> 和 <code>mulq</code> 都要求 一个参数必须在 <code>%rax</code> 中, 另一个参数是操作数 <br>结果存储在 <code>%rdx</code> (高 64 位, <code>%rax</code> (低 64 位)</p><p>除法指令:<br><code>div</code> 无符号除法, <code>idiv</code> 有符号除法 <br>被除数存储在 <code>%rdx</code> (高 64 位, <code>%rax</code> (低 64 位) 中, 除数是操作数 <br>商存储在 <code>%rax</code> 中, 余数存储在 <code>%rdx</code> 中</p><p>被除数如果是 64 位的值, 存储在 <code>%rax</code> 中, <code>%rdx</code> 应该设置成 全0 或者 <code>%rax</code> 的符号位 <br>设置符号位可以由 <code>cqto</code> 指令来完成</p><h2 id="3-6-控制">3.6 控制</h2><p>机器代码提供两种方式来实现有条件的行为:</p><ol><li>条件控制</li><li>条件传送</li></ol><h3 id="3-6-1-条件码">3.6.1 条件码</h3><p>CPU 不仅维护整数寄存器, 还维护一组单个位的 <strong>条件码寄存器</strong></p><ol><li><code>CF</code>: 进位标志, 最近的操作是否产生进位</li><li><code>ZF</code>: 零标志, 最近的操作得出的结果为 0</li><li><code>SF</code>: 符号标志, 最近的操作得出的结果为负数</li><li><code>OF</code>: 溢出标志, 最近的操作导致一个补码溢出</li></ol><blockquote><p><code>leaq</code> 指令不改变条件码, 图 <code>3-10</code> 中所有的操作都会改变条件码</p></blockquote><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.28ycgvvihkp.webp" alt=""></p><h3 id="3-6-2-访问条件码">3.6.2 访问条件码</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.36ttwwgcbb40.png" alt=""></p><p><code>set</code> 命令把一个字节设置成 0 或者 1</p><h3 id="3-6-3-跳转指令">3.6.3 跳转指令</h3><p>跳转由两种方法</p><ol><li>直接跳转, <code>jmp .L1</code></li><li>间接跳转, <code>jmp *%rax</code></li></ol><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.55kb1waancc0.webp" alt=""></p><h3 id="3-6-4-跳转指令的编码">3.6.4 跳转指令的编码</h3><p>跳转指令编码方式:</p><ol><li>PC相对: 目标指令的地址与紧跟在跳转指令后面那条指令的地址之间的差作为编码</li><li>绝对地址: 用四个字节直接指定目标</li></ol><h3 id="3-6-5-用条件控制来实现条件分支">3.6.5 用条件控制来实现条件分支</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (text_expr) </span><br><span class="line">    then-statement;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">else</span>-statement;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">t = test-expr</span><br><span class="line">if (!t)</span><br><span class="line">    goto false;</span><br><span class="line">then-statement;</span><br><span class="line">goto done;</span><br><span class="line"></span><br><span class="line">false:</span><br><span class="line">    else-statement;</span><br><span class="line">done:</span><br></pre></td></tr></table></figure><h3 id="3-6-6-用条件传送来实现条件分支">3.6.6 用条件传送来实现条件分支</h3><p>处理器使用流水线来获得高性能, 通过重叠连续指令的步骤获得高性能 <br>当机器遇到条件分支的时候, 会使用分支预测逻辑来猜测跳转指令是否会执行 <br>错误预测一个跳转会让处理器丢掉跳转指令后所有的工作, 重新开始</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6v82v2jsq400.png" alt=""></p><p>条件传送指令可以根据操作数来推断类型, 所以不用限定类型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v = test-expr ? then-expr : <span class="keyword">else</span>-expr;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!test-expr)</span><br><span class="line">    <span class="keyword">goto</span> <span class="literal">false</span>;</span><br><span class="line">    v = then-expr;</span><br><span class="line">    <span class="keyword">goto</span> done;</span><br><span class="line"><span class="literal">false</span>:</span><br><span class="line">    v = <span class="keyword">else</span>-expr;</span><br><span class="line">done:</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v = then-expr;</span><br><span class="line">ve = <span class="keyword">else</span>-expr;</span><br><span class="line">t = test-expr;</span><br><span class="line"><span class="keyword">if</span> (!t) v = ve;</span><br></pre></td></tr></table></figure><p>条件传送的缺点:</p><ol><li>两个表达式需要提前求值, 如果在条件不满足的情况下求值可能会出现错误</li><li>表达式如果需要很长时间来计算, 反而得不偿失</li></ol><h3 id="3-6-7-循环">3.6.7 循环</h3><p><code>do-while</code> 循环转换后</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">loop:</span><br><span class="line">    body_statement;</span><br><span class="line">    t = test_expr;</span><br><span class="line">    <span class="keyword">if</span> (t) <span class="keyword">goto</span> loop;</span><br></pre></td></tr></table></figure><p><code>while</code> 循环法一</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">goto</span> test;</span><br><span class="line">loop:</span><br><span class="line">    body_statement;</span><br><span class="line">test:</span><br><span class="line">    t = test_expr;</span><br><span class="line">    <span class="keyword">if</span> (t) <span class="keyword">goto</span> loop;</span><br></pre></td></tr></table></figure><p><code>while</code> 循环法二</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">t = test_expr;</span><br><span class="line"><span class="keyword">if</span> (!t) <span class="keyword">goto</span> done;</span><br><span class="line"></span><br><span class="line">loop:</span><br><span class="line">    body_statement;</span><br><span class="line">    t = test_expr;</span><br><span class="line">    <span class="keyword">if</span> (t) <span class="keyword">goto</span> loop;</span><br><span class="line">done:</span><br></pre></td></tr></table></figure><p><code>for</code> 循环:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (init_expr; test_expr; update_expr)</span><br><span class="line">    body_statement;</span><br></pre></td></tr></table></figure><p>转换成</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">init_expr;</span><br><span class="line"><span class="keyword">while</span> (test_expr) &#123;</span><br><span class="line">    body_statement;</span><br><span class="line">    update_expr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-8-switch-语句">3.6.8 <code>switch</code> 语句</h3><p><code>switch</code> 语句的优点:</p><ol><li>提高代码可读性</li><li>使用跳转表使得数据结构实现高效, 执行 <code>switch</code> 的语句和情况呢数量无关</li></ol><p>新的运算符 <code>&amp;&amp;</code> 得到指向代码位置的指针</p><h2 id="3-7-过程">3.7 过程</h2><p>假设过程 $P$ 调用过程 $Q$, 执行之后回到 $P$, 包括如下机制</p><ol><li>传递控制: 进入 $Q$ 时, PC 要设置成 $Q$ 的起始地址, 返回时要设置成调用 $Q$ 下面指令的地址</li><li>传递数据: $P$ 向 $Q$ 传递若干参数, $Q$ 向 $P$ 返回一个值</li><li>分配和释放内存: $Q$ 为变量分配空间, 返回前释放</li></ol><h3 id="3-7-1-运行时栈">3.7.1 运行时栈</h3><p>栈指针 <code>%rsp</code> 指向栈顶元素, 用 <code>pushq</code> 和 <code>popq</code> 入栈出栈 <br>减小栈指针可以为一组没有初始值的变量分配空间, 增大栈指针可以释放空间</p><p>过程所需空间超出寄存器能存放的大小时, 就会在栈上分配空间, 这个部分称为 <strong>栈帧</strong></p><p>$P$ 调用 $Q$ 时, 会把返回地址压入栈中, $Q$ 返回时从这个地址开始继续执行</p><h3 id="3-7-2-转移控制">3.7.2 转移控制</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.78ygtm5gl3c0.webp" alt=""></p><h3 id="3-7-3-数据传送">3.7.3 数据传送</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.53r8048unb80.webp" alt=""></p><p>大于六个的参数会放在栈中, 第七个参数位置是 <code>(%rsp)</code>, 第八个参数位置是 <code>8(%rsp)</code> <br>无论多出的参数是什么类型, 都会在栈中使用 8 位存储</p><h3 id="3-7-4-栈上的局部存储">3.7.4 栈上的局部存储</h3><p>局部数据必须放在内存中的常见情况</p><ol><li>寄存器不够用</li><li>使用取址运算符</li><li>局部变量是数组或结构体</li></ol><h3 id="3-7-5-寄存器中的局部存储空间">3.7.5 寄存器中的局部存储空间</h3><p><code>%rbx</code>, <code>%rbp</code>, <code>%r12 ~ %r15</code> 是 <strong>被调用者保存寄存器</strong>, 调用 $Q$ 时这些寄存器的值不变 <br><code>%rsp</code> 是栈指针 <br>其他寄存器是 <strong>调用者保存寄存器</strong></p><h2 id="3-8-数组分配与访问">3.8 数组分配与访问</h2><h3 id="3-8-1-基本原则">3.8.1 基本原则</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5tsehwm671s0.png" alt=""></p><h3 id="3-8-2-指针运算">3.8.2 指针运算</h3><p>介绍 $C$ 中的指针运算</p><h3 id="3-8-3-嵌套的数组">3.8.3 嵌套的数组</h3><p>对于 $T D[R][C];$, 数据类型 $T$ 的大小为 $L$, $D[i][j]$ 的内存地址为<br>$$<br>&amp;D[i][j] = x_D + L(C \times i + j)<br>$$</p><h3 id="3-8-4-定长数组">3.8.4 定长数组</h3><p>程序使用常数作为数组的维度或者缓冲区的大小时, 最好设置一个常量 <br>使得修改时不用处处修改反而只需修改一步</p><p>定长数组在编译器优化的时候可以使用相对地址而不是绝对地址, 这样效率更高</p><h3 id="3-8-5-变长数组">3.8.5 变长数组</h3><p>以变量作为数组维度大小</p><p>这样的数组不能使用移位和加法来计算乘法, 只能直接使用乘法运算, 效率低</p><h2 id="3-9-异质的数据结构">3.9 异质的数据结构</h2><h3 id="3-9-1-结构体">3.9.1 结构体</h3><p>结构体中的变量在内存中紧密排列在一起</p><h3 id="3-9-2-联合">3.9.2 联合</h3><p>联合的总大小等于它的最大字段的大小</p><ol><li>事先知道一个数据结构中两个不同字段的使用时互斥的 \</li><li>访问不同数据类型的位模式</li></ol><h3 id="3-9-3-数据对齐">3.9.3 数据对齐</h3><p>结构体的大小一定是对齐值的整数倍 <br>对齐值是结构体里占用字节数最大的类型的字节数, 结构体则继续递归定义 <br>结构体每个数据起始的字节位置一定是本数据的类型所占字节数的整数倍, 结构体除外</p><h2 id="3-10-在机器级程序中将控制和数据结合起来">3.10 在机器级程序中将控制和数据结合起来</h2><h3 id="3-10-1-理解指针">3.10.1 理解指针</h3><ol><li>每个指针都对应一种类型 (<code>void *</code> 代表通用指针)</li><li>每个指针都有一个值 (<code>NULL(0)</code> 表示空指针)</li><li>指针使用 <code>&amp;</code> 运算符创建</li><li><code>*</code> 操作符用于间接引用指针</li><li>数组和指针紧密联系</li><li>指针强制转换不改变它的值只改变它的类型</li><li>指针可以指向函数</li></ol><h3 id="3-10-2-应用-使用-GDB-调试器">3.10.2 应用: 使用 GDB 调试器</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.fyuaz0a60o.webp" alt=""></p><h3 id="3-10-3-内存越界引用和缓冲区溢出">3.10.3 内存越界引用和缓冲区溢出</h3><p>C 对数组引用不进行任何边界检查, 局部变量和状态信息都存放在栈中 <br>所以对越界的数组进行写入操作会破坏掉状态信息, 程序使用状态信息的时候就会出现严重错误</p><p>缓冲区溢出可以让程序执行它原本不愿意执行的函数 <br>输入给程序一个字符串, 包含一些可执行代码的字节码 (攻击代码) <br>还有一些字节会用一个指向攻击代码的指针覆盖返回地址, 执行 <code>ret</code> 之后直接跳转到 攻击代码</p><h3 id="3-10-4-对抗缓冲区溢出攻击">3.10.4 对抗缓冲区溢出攻击</h3><p><strong>栈随机化</strong>:  <br>过去栈的位置十分容易预测, 许多系统容易受到同一种病毒的攻击, 这种现象称为安全单一化<br>栈随机化的方式是在程序开始的时候, 在栈上分配一些内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> local;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;local at %p\n&quot;</span>, &amp;local);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段内存不能太大也不能太小, 否则会造成空间浪费或者没有足够多的地址变化</p><p>栈随机化是 <strong>地址空间布局随机化</strong> 的一种, 每次运行程序的不同部分 <br>如程序代码, 库代码, 栈, 全局变量和堆, 这些都会被加载到内存的不同区域</p><p>暴力破解栈随机化: 插入一段 <code>no op</code> 序列, 对 <code>PC</code> 加一, 最终到达攻击代码 <br>这段 <code>no op</code> 序列如果有 256 个字节长, 那么程序返回到 <br><code>no op</code> 的地址时, 就会顺着 <code>no op</code> 序列继续操作, 最终到达攻击代码 <br>32 位系统栈随机化范围一般是 $2^{23}$, 只需要枚举 $\frac{2^{23}}{256}$ 次即可 <br>64 位系统栈随机化范围一般是 $2^{32}$, 只需要枚举 $\frac{2^{32}}{256}$ 次即可(很多)</p><p><strong>栈破坏检测</strong>: <br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5wuhh5wgw740.webp" alt=""><br>通过设置金丝雀值(随即生成), 返回时检测金丝雀值是否被改变从而确认栈是否异常</p><p><strong>限制可执行代码区域</strong>: <br>限制哪部分内存可以存储可执行代码</p><h3 id="3-10-5-支持变长栈帧">3.10.5 支持变长栈帧</h3><p>在函数中使用变长数组的时候, 外部函数无法确定应该分配多少栈空间 <br><code>%rbp</code> 为基指针, 在函数内部修改栈指针分配空间之后, 再把栈指针设置成基指针</p><h2 id="3-11-浮点代码">3.11 浮点代码</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3w4ivs5wv880.webp" alt=""></p><h3 id="3-11-1-浮点传送和转换操作">3.11.1 浮点传送和转换操作</h3><p>保存在内存中的数据 $M_{32}$ 和 $M_{64}$, 保存在 $XMM$ 寄存器中的数据 $X$</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.592c9ve19r80.png" alt=""></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.459e70calhu0.png" alt=""></p><h3 id="3-11-2-过程中的浮点代码">3.11.2 过程中的浮点代码</h3><p><code>%xmm0 ~ %xmm7</code> 存储 7 个参数, 多余的参数可以使用栈空间 <br><code>%xmm0</code> 为返回值 <br>所有的 <code>xmm</code> 寄存器都是调用者保存的, 被调用者可以直接覆盖</p><p>当参数中整数和浮点数混合时, 分别使用两套寄存器保存 <br>第一个整数参数, 第二个… 保存在 <code>%rdi</code>, <code>%rsi</code>… <br>第一个浮点数参数, 第二个… 保存在 <code>%xmm0</code>, <code>%xmm1</code> …</p><h3 id="3-11-3-浮点运算操作">3.11.3 浮点运算操作</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3v0ud7q19qm0.png" alt=""></p><h3 id="3-11-4-定义和使用浮点常数">3.11.4 定义和使用浮点常数</h3><p>浮点数不能以立即数形式出现, 需要保存在内存中, 代码再读入</p><h3 id="3-11-5-在浮点代码中使用位级操作">3.11.5 在浮点代码中使用位级操作</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.61garb5k7ug0.webp" alt=""></p><h3 id="3-11-6-浮点比较操作">3.11.6 浮点比较操作</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.72g4fdc2qa40.webp" alt=""></p><p>浮点比较指令有三个条件码</p><ol><li>零标志位 <code>ZF</code></li><li>进位标志位 <code>CF</code></li><li>奇偶标志位 <code>PF</code>, 两个操作数任意一个是 <code>nan</code> 该位为 1</li></ol><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6x72lf3o49s0.webp" alt=""></p><h3 id="3-11-7-对浮点代码的观察讨论">3.11.7 对浮点代码的观察讨论</h3><p>类似整数的寄存器和汇编代码风格</p><h2 id="3-12-小结">3.12 小结</h2><ol><li>了解机器, 数据类型, 指令集</li><li>程序如何将数据存储在不同的区域中</li><li>机器级程序和汇编代码表示</li></ol><h1>练习</h1><h2 id="3-1">3.1</h2><p>根据规则算数</p><h2 id="3-2">3.2</h2><p>根据操作数中字数最小的来确定</p><h2 id="3-3">3.3</h2><ol><li><code>()</code> 中只能是四个字的数据</li><li><code>%rax</code> 是四个字, 不是两个字</li><li>两个操作数不能都是内存引用</li><li>没有寄存器叫 <code>%sl</code></li><li>立即数不能做 <code>mov</code> 的第二个操作数</li><li>从 32 位复制到 64 位, 可能会出现数据截断的问题</li><li><code>%si</code> 是一个字而不是字节</li></ol><h2 id="3-4">3.4</h2><p>强制类型转换:</p><ol><li><p>先全读进来, 该扩展的扩展,</p></li><li><p>截断或者直接赋值</p></li><li><p><code>char -&gt; int</code> 一字节变双字</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movsbl (%rdi), %eax</span><br><span class="line">movl %eax, (%rsi)</span><br></pre></td></tr></table></figure></li><li><p><code>char -&gt; unsigned</code>同上</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movsbl (%rdi), %eax</span><br><span class="line">movl %eax, (%rsi)</span><br></pre></td></tr></table></figure></li><li><p><code>unsigned char -&gt; long</code></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movzbl (%rdi), %eax</span><br><span class="line">movl %eax, (%rsi)</span><br></pre></td></tr></table></figure></li><li><p><code>int -&gt; char</code> 截断</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movl (%rdi), %eax</span><br><span class="line">movb %al, (%rsi)</span><br></pre></td></tr></table></figure></li><li><p><code>unsigned -&gt; unsigned char</code></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movl (%rdi), %eax</span><br><span class="line">movb %al, (%rsi)</span><br></pre></td></tr></table></figure></li><li><p><code>char -&gt; short</code></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movsbw (%rdi), %ax</span><br><span class="line">movw %ax, (%rsi)</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-5">3.5</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">decode1</span><span class="params">(<span class="type">long</span> *xp, <span class="type">long</span> *yp, <span class="type">long</span> *zp)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = *xp, b = *yp, c = *zp;</span><br><span class="line">    *yp = a, *zp = b, *xp = c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-6">3.6</h2><p>算数题</p><h2 id="3-7">3.7</h2><p><code>5 * x + 2 * y + 8 * z</code></p><h2 id="3-8">3.8</h2><p>算数题</p><h2 id="3-9">3.9</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">movq %rdi, %rax</span><br><span class="line">sal $4, $rax</span><br><span class="line">movl %esi, %ecx</span><br><span class="line">sar %cl, %rax</span><br></pre></td></tr></table></figure><h2 id="3-10">3.10</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="title">arith2</span><span class="params">(<span class="type">long</span> x, <span class="type">long</span> y, <span class="type">long</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> t1 = x | y;</span><br><span class="line">    <span class="type">long</span> t2 = t1 &gt;&gt; <span class="number">3</span>;</span><br><span class="line">    <span class="type">long</span> t3 = ~t2;</span><br><span class="line">    <span class="type">long</span> t4 = z - t3;</span><br><span class="line">    <span class="keyword">return</span> t4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-11">3.11</h2><ol><li>把 <code>%rdx</code> 设置为 0</li><li><code>movq $0, %rdx</code></li><li><code>xorq %rdx, %rdx</code> 使用三个字节 <br><code>movq $0, %rdx</code> 使用七个字节 (立即数占用四个)</li></ol><h2 id="3-12">3.12</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">uremdiv:</span><br><span class="line">    movq %rdx, %r8</span><br><span class="line">    movq %rdi, %rax</span><br><span class="line">    movl $0, $edx</span><br><span class="line">    divq %rsi</span><br><span class="line">    movq %rax, (%r8)</span><br><span class="line">    movq %rdx, (%rcx)</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure><h2 id="3-13">3.13</h2><ol><li><code>int</code>, <code>&lt;</code></li><li><code>short</code>, <code>&gt;=</code></li><li><code>unsigned char</code>, <code>&lt;=</code></li><li><code>long / unsigned long / 指针</code>, <code>!=</code></li></ol><h2 id="3-14">3.14</h2><ol><li><code>long</code>, <code>&lt;</code></li><li><code>short / unsigned short</code>, <code>==</code></li><li><code>unsigned char</code>, <code>&gt;</code></li><li><code>int</code>, <code>&lt;</code></li></ol><h2 id="3-15">3.15</h2><ol><li>4003fe</li><li>400425</li><li>400543, 400545</li><li>400560</li></ol><h2 id="3-16">3.16</h2><ol><li></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">cond</span><span class="params">(<span class="type">long</span> a, <span class="type">long</span> *p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> L1;</span><br><span class="line">    <span class="keyword">if</span> (*p &gt;= a)</span><br><span class="line">        <span class="keyword">goto</span> L1;</span><br><span class="line"></span><br><span class="line">    *p = a;</span><br><span class="line"></span><br><span class="line">L1:</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>源代码中有 <code>&amp;&amp;</code>, 如果 第一个条件为假, 直接跳过</li></ol><h2 id="3-17">3.17</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="title">gotodiff_se_alt</span><span class="params">(<span class="type">long</span> x, <span class="type">long</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> result;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; y)</span><br><span class="line">        <span class="keyword">goto</span> L1;</span><br><span class="line">    result = x - y;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">L1:</span><br><span class="line">    result = y - x;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有 <code>else</code> 语句, 之前的那种会简洁一些</p><h2 id="3-18">3.18</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="title">test</span><span class="params">(<span class="type">long</span> x, <span class="type">long</span> y, <span class="type">long</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> val = x + y + z;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">-3</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &lt; z)</span><br><span class="line">            val = x * y;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            val = y * z;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">2</span>) </span><br><span class="line">        val = x * z;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-19">3.19</h2><ol><li>$2 \times (31 - 16) = 30$</li><li>$16 + 30 = 46$</li></ol><h2 id="3-20">3.20</h2><ol><li><code>/</code></li><li></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="title">arith</span><span class="params">(<span class="type">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp = <span class="number">7</span> + x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) tmp = x;</span><br><span class="line">    <span class="keyword">return</span> tmp &gt;&gt; <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-21">3.21</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="title">test</span><span class="params">(<span class="type">long</span> x, <span class="type">long</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> t1 = <span class="number">8</span> * x;</span><br><span class="line">    <span class="keyword">if</span> (y &gt; <span class="number">0</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span> (x &lt; y) t1 = y - x;</span><br><span class="line">        <span class="keyword">else</span> t1 = y - x;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y &lt;= <span class="number">-2</span>) t1 = x + y;</span><br><span class="line">    <span class="keyword">return</span> t1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-22">3.22</h2><ol><li>13</li><li>20</li></ol><h2 id="3-23">3.23</h2><ol><li><code>%rax</code>, <code>%rcx</code>, <code>%rdx</code></li><li>$p$ 永远指向 $x$, 所以编译器优化 <code>x += 1 + y</code>, <code>leaq 1(%rcx, %rax), %rax</code></li><li>略去</li></ol><h2 id="3-24">3.24</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="title">loop_while</span><span class="params">(<span class="type">long</span> a, <span class="type">long</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (a &lt; b) &#123;</span><br><span class="line">        result *= a + b;</span><br><span class="line">        a += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-25">3.25</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="title">loop_while2</span><span class="params">(<span class="type">long</span> a, <span class="type">long</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> result = b;</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        result *= a;</span><br><span class="line">        b -= a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-26">3.26</h2><ol><li><code>while</code> 的第二种方法</li><li></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">fun_a</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> val = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">        val ^= x;</span><br><span class="line">        x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>返回 $x$ 中 1 的个数的奇偶性</li></ol><h2 id="3-27">3.27</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="title">fact_for</span><span class="params">(<span class="type">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> i = <span class="number">2</span>;;</span><br><span class="line">    <span class="type">long</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; n) <span class="keyword">goto</span> done;</span><br><span class="line">loop:</span><br><span class="line">    result *= i;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= n) <span class="keyword">goto</span> loop;</span><br><span class="line">done:</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-28">3.28</h2><ol><li></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="title">fun_b</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> val = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">64</span>; i != <span class="number">0</span>; i--) &#123;</span><br><span class="line">        val = (val + val) | (x &amp; <span class="number">1</span>);</span><br><span class="line">        x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>初始测试不可能失败</li><li>反转 $x$ 中的位</li></ol><h2 id="3-29">3.29</h2><ol><li><code>i++</code> 未执行</li><li></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">goto</span> update;</span><br><span class="line">    sum += i;</span><br><span class="line">update:</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-30">3.30</h2><ol><li>-1, 0, 1, 2, 4, 5, 7</li><li>0 和 7, 2 和 4</li></ol><h2 id="3-31">3.31</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">switcher</span><span class="params">(<span class="type">long</span> a, <span class="type">long</span> b, <span class="type">long</span> c, <span class="type">long</span> *dest)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> val;</span><br><span class="line">    <span class="keyword">switch</span> (a) &#123;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            c = b ^ <span class="number">15</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            val = <span class="number">112</span> + c;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            val = (b + c) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            val = a;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            val = b;</span><br><span class="line">    &#125;</span><br><span class="line">    *dest = val;</span><br><span class="line">    <span class="keyword">return</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-32">3.32</h2><p>模拟</p><h2 id="3-33">3.33</h2><ol><li>把 $a$ 强制转换成 <code>long</code>, 所以 $a$ 是 <code>int</code>, $u$ 是 <code>long *</code></li><li>把 $b$ 的低位字节 放到 $v$ 上, 所以 $v$ 是 <code>char *</code></li><li>返回值是 6, <code>sizeof(a)</code> 是 4, 所以 <code>sizeof(b)</code> 是 2, $b$ 是 <code>short</code></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">procprob</span><span class="params">(<span class="type">int</span> a, <span class="type">short</span> b, <span class="type">long</span> *u, <span class="type">char</span> *v)</span> </span>&#123;</span><br><span class="line">    *u += a;</span><br><span class="line">    *v += b;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sizeof</span>(a) + <span class="built_in">sizeof</span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-34">3.34</h2><ol><li><code>a0 ~ a5</code></li><li><code>a6</code>, <code>a7</code></li><li>被调用者保存寄存器不够用</li></ol><h2 id="3-35">3.35</h2><ol><li><code>%rbx</code> 保存 $x$ 的值</li><li></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="title">rfun</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> nx = x &gt;&gt; <span class="number">2</span>; </span><br><span class="line">    <span class="type">long</span> rv = <span class="built_in">rfun</span>(nx);</span><br><span class="line">    <span class="keyword">return</span> x + rv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-36">3.36</h2><p>算数</p><h2 id="3-37">3.37</h2><ol><li><code>leaq 2(%rdx), %rax</code></li><li><code>movw 6(%rdx), %ax</code></li><li><code>leaq (%rdx, %rcx, 2), %rax</code></li><li><code>movw 2(%rdx, %rcx, 8), %ax</code></li><li><code>leaq -10(%rdx, %rcx, 2), %rax</code></li></ol><h2 id="3-38">3.38</h2><p>$M=5$, $N=7$</p><h2 id="3-39">3.39</h2><p>$M=4, N=16$</p><ul><li>$&amp;A[i][0] = x_a + 64i$</li><li>$&amp;B[0][k] = x_b + 4k$</li><li>$&amp;B[N][k] = x_b + 64N + 4k = x_b + 1024 + 4k$</li></ul><h2 id="3-40">3.40</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fix_set_diag</span><span class="params">(fix_matrix A, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> N = <span class="number">16</span>;</span><br><span class="line">    <span class="type">int</span> iend = N * (N + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        *(A + i) = val;</span><br><span class="line">        i += (N + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">while</span> (i != iend);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>A[k][k] = *(A + k * N + k)</code>, <code>A[k + 1][k + 1] = *(A + (k + 1) * N + k + 1</code> <br>$i_{old} = k * N + k$, $i_{new} = (k + 1) * N + k + 1$, $delta = N + 1$</li><li>$i_{end} = N * (N - 1) + (N - 1) + delta = N^2 - 1 + delta = N * (N + 1)$</li></ol><h2 id="3-41">3.41</h2><ul><li>8, 12, 16</li><li>24</li><li></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sp-&gt;s.x = sp-&gt;s.y;</span><br><span class="line">sp-&gt;p = &amp;(sp-&gt;s.x);</span><br><span class="line">sp-&gt;next = sp;</span><br></pre></td></tr></table></figure><h2 id="3-42">3.42</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ELE</span> &#123;</span><br><span class="line">    <span class="type">long</span> v;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ELE</span> *p;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">fun</span><span class="params">(<span class="keyword">struct</span> ELE *ptr)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ptr) &#123;</span><br><span class="line">        tmp += ptr-&gt;v;</span><br><span class="line">        ptr = ptr-&gt;p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算单链表中所有元素的值</p><h2 id="3-43">3.43</h2><ol><li><code>short char* int* int char</code></li><li></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">movw 8(%rdi), %ax</span><br><span class="line">movw %ax, (%rsi)</span><br><span class="line"></span><br><span class="line">addq $10, %rdi</span><br><span class="line">movq %rdi, (%rsi)</span><br><span class="line"></span><br><span class="line">movq %rdi (%rsi)</span><br><span class="line"></span><br><span class="line">movq (%rdi), %rax</span><br><span class="line">movl (%rdi, %rax, 4), %eax</span><br><span class="line">movl %eax, (%rsi)</span><br><span class="line"></span><br><span class="line">movq 8(%rdi), %rax</span><br><span class="line">movb (%rax), %al</span><br><span class="line">movb %al, (%rsi)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-44">3.44</h2><p>算数</p><h2 id="3-45">3.45</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.12ivr9wu089c.webp" alt=""><br>56 个字节大小 <br>一个策略是降序排列<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5tahd0a6qho0.webp" alt=""><br>40 个字节大小</p><h2 id="3-46">3.46</h2><ol><li><img src="https://github.com/lzlcs/image-hosting/raw/master/image.5v51kxh3oa80.webp" alt=""></li><li><img src="https://github.com/lzlcs/image-hosting/raw/master/image.2gowpyq4xsw0.webp" alt=""></li><li>试图返回到 <code>0x00 00 00 00 00 40 00 34</code></li><li><code>%rbx</code> 的值被破坏了</li><li><ul><li><code>malloc(strlen(buf) + 1)</code></li><li>检测返回值是否为 <code>NULL</code></li></ul></li></ol><h2 id="3-47">3.47</h2><ol><li>$2^{13}$</li><li>$\frac{2^{13}}{128} = 64$</li></ol><h2 id="3-48">3.48</h2><ol><li><code>buf -&gt; %rsp</code>, <code>v -&gt; 24(%rsp)</code></li><li><code>buf -&gt; 16(%rsp)</code>, <code>v -&gt; 8(%rsp)</code>, <code>金丝雀 -&gt; 40(%rsp)</code></li></ol><p>在有保护的代码中, 数组放在上面可以更好防护</p><h2 id="3-49">3.49</h2><ol><li><code>leaq</code> 计算 $8n+22$, 与上 16 之后 <br>如果 $n$ 为奇数, 那么结果为 $8n+8$, $n$ 为偶数则为 $8n+16$</li><li>整除 8 (向上取整)</li><li><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6ok0vhfnueg0.webp" alt=""></li><li>$s_2$ 是 $s_1 - e_1 - e_2 - 8n$, 是个相对于 $s_1$ 8 对齐的位置 <br>$p$ 是 $s_1 - e_1 - 8n$, 本身就是 8 对齐的位置</li></ol><h2 id="3-50">3.50</h2><p>$d$, $i$, $l$, $f$</p><h2 id="3-51">3.51</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.6argxj9soeg0.png" alt=""></p><h2 id="3-52">3.52</h2><ol><li><code>%xmm0</code>, <code>%rdi</code>, <code>%xmm1</code>, <code>%esi</code></li><li><code>%edi</code>, <code>%rsi</code>, <code>%rdx</code>, <code>%rcx</code></li><li><code>%rdi</code>, <code>%xmm0</code>, <code>%esi</code>, <code>%xmm1</code></li><li><code>%xmm0</code>, <code>%rdi</code>, <code>%xmm1</code>, <code>%xmm2</code></li></ol><h2 id="3-53">3.53</h2><p>根据加法的交换性, 中间两项可以交换</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">funct1</span><span class="params">(<span class="type">int</span> p, <span class="type">float</span> q, <span class="type">long</span> r, <span class="type">double</span> s)</span></span>;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">funct1</span><span class="params">(<span class="type">int</span> p, <span class="type">long</span> q, <span class="type">float</span> r, <span class="type">double</span> s)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="3-54">3.54</h2><p><code>x * y - w / z</code></p><h2 id="3-55">3.55</h2><p>指数字段是 1028, 减去偏移量 1023, 指数为 5 <br>$1.0 \times 2^5 = 32.0$</p><h2 id="3-56">3.56</h2><ol><li>常数 <code>LC1</code> 是除了符号位低位全为 1 的掩码, 与操作去掉符号位, 相当于 <code>fabs(x)</code></li><li><code>x = 0.0</code></li><li>符号位异或 1, 相当于 取反 <code>-x</code></li></ol><h2 id="3-57">3.57</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">funct3</span><span class="params">(<span class="type">int</span> *ap, <span class="type">double</span> b, <span class="type">long</span> c, <span class="type">float</span> *dp)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = *ap;</span><br><span class="line">    <span class="type">float</span> d = *dp;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) <span class="keyword">return</span> c * d;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> c + <span class="number">2</span> * d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-58">3.58</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="title">decode</span><span class="params">(<span class="type">long</span> x, <span class="type">long</span> y, <span class="type">long</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = y - z;</span><br><span class="line">    <span class="keyword">return</span> (res &lt;&lt; <span class="number">63</span> &gt;&gt; <span class="number">63</span>) ^ (x * res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-59">3.59</h2><p>设 $x_{63}$, $y_{63}$ 为 $x$, $y$ 的符号位 <br>$ux = x + x_{63}2^{64}$, 同理 $uy = y + y_{63}2^{64}$ <br>$ux \times uy = xy + (x_{63}y + y_{63}x) 2^{64} + x_{63}y_{64}2^{128}$ 最后一项溢出舍去</p><p>$xy = ux\times uy - (x_{63}y + y_{63}x)2^{64}$ <br>设 $s_x = -1$ 当 $x_{63}$ 为 1 时, $s_x = 0$ 当 $x_{63}$ 为 0 时, $s_y$ 同理 <br>$xy = ux\times uy + (s_xy + s_yx)2^{64}$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># void store_prod(int128_t* dest, int64_t x, int64_t y)</span><br><span class="line"># dest in %rdi, x in %rsi, y in %rdx</span><br><span class="line">store_prod:</span><br><span class="line">  # 这两行把 y 转换成 int_128</span><br><span class="line">  movq %rdx, %rax     </span><br><span class="line">  cqto # 此时 %rax 存着 y 的高位算数补全结果, 即 sy</span><br><span class="line">  # 这两行先把 x 算数右移, 得到 sx</span><br><span class="line">  movq %rsi, %rcx     </span><br><span class="line">  sarq $63, %rcx</span><br><span class="line"></span><br><span class="line">  # 这三行计算 (sx * y + sy * x)</span><br><span class="line">  imulq %rax, %rcx    </span><br><span class="line">  imulq %rsi, %rdx   </span><br><span class="line">  addq %rdx, %rcx   </span><br><span class="line">  # 这行计算 ux * uy, 低 64 位存储在 %rax, 高 64 位存储在 %rdx</span><br><span class="line">  mulq %rsi        </span><br><span class="line"></span><br><span class="line">  在高 64 位直接加上 (sx * y + sy * x)</span><br><span class="line">  addq %rcx, %rdx</span><br><span class="line"></span><br><span class="line">  # 存储</span><br><span class="line">  movq %rax, (%rdi)   # set lower 64bits</span><br><span class="line">  movq %rdx, 8(%rdi)  # set higher 64bits</span><br><span class="line">  ret</span><br></pre></td></tr></table></figure><h2 id="3-60">3.60</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="title">loop</span><span class="params">(<span class="type">long</span> x, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> mask;</span><br><span class="line">    <span class="keyword">for</span> (mask = <span class="number">1</span>; mask != <span class="number">0</span>; mask &lt;&lt;= n) </span><br><span class="line">        result |= x &amp; mask;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-61">3.61</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># long cread(long *xp)</span><br><span class="line"># xp in %rdi</span><br><span class="line">cread:</span><br><span class="line">  movq (%rdi), %rax</span><br><span class="line">  testq %rdi, %rdi</span><br><span class="line">  movl $0, %edx</span><br><span class="line">  cmove %rdx, %rax</span><br><span class="line">  ret</span><br></pre></td></tr></table></figure><p>第一行直接取数据, 可能会出现空指针错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cread_alt:</span><br><span class="line">  movl $0, %eax</span><br><span class="line">  testq %rdi, %rdi</span><br><span class="line">  cmovne (%rdi), %rax</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="title">cread_alt</span><span class="params">(<span class="type">long</span> *xp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (!xp ? <span class="number">0</span> : *xp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个分支可以合法计算, 第二个分支当指针不等于零的时候才会取数据 <br>这样不符合之前标准的条件传送的标准写法, 是一种取巧的做法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v = then-expr;</span><br><span class="line">ve = <span class="keyword">else</span>-expr;</span><br><span class="line">t = test-expr;</span><br><span class="line"><span class="keyword">if</span> (!t) v = ve;</span><br></pre></td></tr></table></figure><h2 id="3-62">3.62</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; MODE_A, MODE_B, MODE_C, MODE_D, MODE_E &#125; <span class="type">mode_t</span>;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">swith</span><span class="params">(<span class="type">long</span> *p1, <span class="type">long</span> *p2, <span class="type">mode_t</span> action)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">    <span class="keyword">case</span> MODE_A:</span><br><span class="line">        res = *p2;</span><br><span class="line">        *p2 = *p1;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MODE_B:</span><br><span class="line">        res = *p1 + *p2;</span><br><span class="line">        *p1 = res;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MODE_C:</span><br><span class="line">        *p1 = <span class="number">59</span>;</span><br><span class="line">        res = *p2;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MODE_D:</span><br><span class="line">        *p1 = *p2;</span><br><span class="line">        res = <span class="number">27</span>;</span><br><span class="line">    <span class="keyword">case</span> MODE_E:</span><br><span class="line">        res = <span class="number">27</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        res = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-63">3.63</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="title">switch_</span><span class="params">(<span class="type">long</span> x, <span class="type">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> result = x;</span><br><span class="line">    <span class="keyword">switch</span>(n) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">60</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">62</span>:</span><br><span class="line">        result = <span class="number">8</span> * x;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">63</span>:</span><br><span class="line">        result = x &gt;&gt; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">64</span>:</span><br><span class="line">        x = x * <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">65</span>:</span><br><span class="line">        x = x * x;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        result = x + <span class="number">73</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-64">3.64</h2><ol><li>$D[i][j][k] = x_D + iST + jT + k$</li><li></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">store_ele:</span><br><span class="line">  # t1 = 13j</span><br><span class="line">  leaq (%rsi, %rsi, 2), %rax</span><br><span class="line">  leaq (%rsi, %rax, 4), %rax</span><br><span class="line">  # t2 = 65i</span><br><span class="line">  movq %rdi, %rsi           </span><br><span class="line">  salq $6, %rsi           </span><br><span class="line">  # t3 = 65i + 13j + k</span><br><span class="line">  addq %rsi, %rdi        </span><br><span class="line">  addq %rax, %rdi       </span><br><span class="line">  addq %rdi, %rdx      </span><br><span class="line">  # t1 = *(A + 8 * t3)</span><br><span class="line">  movq A(,%rdx,8), %rax</span><br><span class="line">  movq %rax, (%rcx)   </span><br><span class="line">  movl $3640, %eax   </span><br><span class="line">  ret</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RST * 8 = 3640;</span><br><span class="line">ST = 65;</span><br><span class="line">T = 13;</span><br></pre></td></tr></table></figure><p>得到结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">R = 7;</span><br><span class="line">S = 5;</span><br><span class="line">T = 13;</span><br></pre></td></tr></table></figure><h2 id="3-65">3.65</h2><ol><li><code>%rdx</code></li><li><code>%rax</code></li><li><code>15</code></li></ol><h2 id="3-66">3.66</h2><ol><li><code>#define NR(n) (3 * n)</code></li><li><code>#define NC(n) (4 * n + 1)</code></li></ol><h2 id="3-67">3.67</h2><ol><li></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">104  +------------------+</span><br><span class="line">     |                  |</span><br><span class="line">     |                  |</span><br><span class="line">     |                  |</span><br><span class="line">     |                  |</span><br><span class="line">     |                  |</span><br><span class="line">     |                  |</span><br><span class="line">     |                  |</span><br><span class="line">     |                  |</span><br><span class="line"> 64  +------------------+ &lt;-- %rdi</span><br><span class="line">     |                  |</span><br><span class="line">     |                  |</span><br><span class="line">     |                  |</span><br><span class="line">     |                  |</span><br><span class="line">     |                  |</span><br><span class="line">     |                  |</span><br><span class="line"> 32  +------------------+</span><br><span class="line">     |         z        |</span><br><span class="line"> 24  +------------------+</span><br><span class="line">     |        &amp;z        |</span><br><span class="line"> 16  +------------------+</span><br><span class="line">     |         y        |</span><br><span class="line">  8  +------------------+</span><br><span class="line">     |         x        |</span><br><span class="line">  0  +------------------+ &lt;-- %rsp</span><br></pre></td></tr></table></figure><ol start="2"><li>传递了 <code>%rdi</code> 存储着新结构体应该放的位置</li><li>由于调用 <code>call</code>, 栈指针减去 8, 通过栈指针访问 <code>strA</code>, 通过 <code>%rdi</code> 访问 <code>strB</code></li><li>返回 <code>eval</code> 之后, 就直接使用 <code>%rsp + 偏移量</code> 的方式来访问 <code>r</code></li><li></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">104  +------------------+</span><br><span class="line">     |                  |</span><br><span class="line">     |                  |</span><br><span class="line">     |                  |</span><br><span class="line">     |                  |</span><br><span class="line">     |                  |</span><br><span class="line">     |                  |</span><br><span class="line"> 88  +------------------+</span><br><span class="line">     |        z         |</span><br><span class="line"> 80  +------------------+</span><br><span class="line">     |        x         |</span><br><span class="line"> 72  +------------------+</span><br><span class="line">     |        y         |</span><br><span class="line"> 64  +------------------+ &lt;-- %rdi(eval pass in)</span><br><span class="line">     |                  |  \</span><br><span class="line">     |                  |   -- %rax(process pass out)</span><br><span class="line">     |                  |</span><br><span class="line">     |                  |</span><br><span class="line">     |                  |</span><br><span class="line">     |                  |</span><br><span class="line"> 32  +------------------+</span><br><span class="line">     |         z        |</span><br><span class="line"> 24  +------------------+</span><br><span class="line">     |        &amp;z        |</span><br><span class="line"> 16  +------------------+</span><br><span class="line">     |         y        |</span><br><span class="line">  8  +------------------+</span><br><span class="line">     |         x        |</span><br><span class="line">  0  +------------------+ &lt;-- %rsp in eval</span><br><span class="line">     |                  |</span><br><span class="line"> -8  +------------------+ &lt;-- %rsp in process</span><br></pre></td></tr></table></figure><ol start="6"><li>调用者查找空间, 给被调用者传递地址, 被调用者将数据存储在此位置并返回该地址</li></ol><h2 id="3-68">3.68</h2><ol><li><code>p-&gt;y</code> 存储在 <code>184(%rdi)</code>, $176 &lt; 4AB \le 184$ 故 $AB = 45 或 46$</li><li><code>q-&gt;t</code> 存储在 <code>8(%rsi)</code>, $4 &lt; B \le 8$</li><li><code>q-&gt;u</code> 存储在 <code>32(%rsi)</code>, 数组 <code>s</code> 从 12 开始, 到 32 结束, $12 &lt; 2A \le 20$</li></ol><p>故 <code>AB</code> 有唯一解: <code>A = 9</code>, <code>B = 5</code></p><h2 id="3-69">3.69</h2><p><code>CNT = 7</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">long</span> idx;</span><br><span class="line">    <span class="type">long</span> x[<span class="number">4</span>];</span><br><span class="line">&#125; a_struct;</span><br></pre></td></tr></table></figure><p><code>first</code> 在 <code>(%rdi)</code>, <code>last</code> 在 <code>288(%rdi)</code> <br><code>bp-&gt;a[i]</code> 是 <code>(%rdi + 40i + 8)</code> 说明 <code>first</code> 占了八个字节, 每个 <code>a_struct</code> 大小为 40 <br><code>(288 - 8) / 40 = 7</code>, <code>CNT = 7</code></p><p>此时 <code>%rdx</code> 存储着 <code>ap-&gt;idx</code>, <code>%rcx</code> 是 <code>8 + (8 + %rsi + 40i) + 8 * idx</code> <br>第一个 8 只能是 <code>idx</code>, 第二个括号内是 <code>ap</code> 的地址, 第三项就是 寻找 <code>x</code>, 显然类型为 <code>long</code></p><h2 id="3-70">3.70</h2><ol><li>0, 8, 0, 8</li><li>16</li><li></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="title class_">ele</span> &#123;</span><br><span class="line">  <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">long</span> *p;</span><br><span class="line">    <span class="type">long</span> y;</span><br><span class="line">  &#125; e1;</span><br><span class="line">  <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">long</span> x;</span><br><span class="line">    <span class="keyword">union</span> <span class="title class_">ele</span> *next;</span><br><span class="line">  &#125; e2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">proc</span><span class="params">(<span class="keyword">union</span> ele *up)</span> </span>&#123;</span><br><span class="line">  up-&gt;e2.x = *(up-&gt;e2.next-&gt;e1.p) - up-&gt;e2.next-&gt;.e1.y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-71">3.71</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">good_echo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">char</span> *p = <span class="built_in">fgets</span>(buf, <span class="number">11</span>, stdin);</span><br><span class="line">        <span class="keyword">if</span> (!p) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-72">3.72</h2><ol><li>当 <code>n</code> 为偶数, $s_2 = s_1 - (8n + 24)$, 当 <code>n</code> 为奇数, $s_2 = s_1 - (8n + 16)$</li><li>大于等于 $s_2$ 的 16 的最小倍数</li><li><code>n</code> 为偶数, $e_1 + e_2 = 24$, <code>n</code> 为奇数, $e_1 + e_2 = 16$ <br>如果 $e_1=0$, 那么 $s_2 = p, e_2 = 0$ 与第一条不符合 <br>$e_1$ 最小值为 1, 此时 $n$ 为奇数 <br>$e_1$ 最大值为 24, 此时 $n$ 为偶数</li></ol><h2 id="3-73">3.73</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">find_range:</span><br><span class="line">    vxorps %xmm1, %xmm1, %xmm1</span><br><span class="line">    vucomiss %xmm1, %xmm0</span><br><span class="line">    jp .P</span><br><span class="line">    ja .A</span><br><span class="line">    jb .B</span><br><span class="line">    je .E</span><br><span class="line">.A:</span><br><span class="line">    movl $2, %eax</span><br><span class="line">    jmp .Done</span><br><span class="line">.B:</span><br><span class="line">    movl $0, %eax</span><br><span class="line">    jmp .Done</span><br><span class="line">.E:</span><br><span class="line">    movl $1, %eax</span><br><span class="line">    jmp .Done</span><br><span class="line">.P:</span><br><span class="line">    movl $3, %eax</span><br><span class="line">.Done</span><br></pre></td></tr></table></figure><h2 id="3-74">3.74</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vxorps %xmm1, %xmm1, %xmm1</span><br><span class="line">movq $1, %rax</span><br><span class="line">movq $2, %r8</span><br><span class="line">movq $0, %r9</span><br><span class="line">movq $3, %r10</span><br><span class="line">vucomiss %xmm1, %xmm0</span><br><span class="line">cmovaq %r8, %rax</span><br><span class="line">cmovbq %r9, %rax</span><br><span class="line">cmovpq %r10, %ra</span><br></pre></td></tr></table></figure><h2 id="3-75">3.75</h2><ol><li>按顺序来, <code>%xmm0</code> 第一个复数的实部, <code>%xmm1</code> 第一个复数的虚部 <br><code>%xmm2</code> 第二个复数的实部, <code>%xmm3</code> 第二个复数的虚部</li><li><code>%xmm0</code>, <code>%xmm1</code> 作为返回值的实部和虚部</li></ol>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP 学习笔记 (第二章)</title>
      <link href="/2023/08/01/2csapp/"/>
      <url>/2023/08/01/2csapp/</url>
      
        <content type="html"><![CDATA[<h1>Chapter 2: 信息的表示和处理</h1><p>二进制信号可以被更好地表示, 基于二值信号的电路简单又可靠</p><p>单独的位没有用处, 但是使用一串01序列以及某种解释, 就能表示任意有限集合的元素</p><p>这里考虑三种数字编码: 无符号整数, 二进制补码, 浮点数编码</p><h2 id="2-1-信息存储">2.1 信息存储</h2><p>大多数计算机使用 8 个比特为 1 字节来作为可寻址的存储最小单位 <br>程序把存储器视为一个非常大的字节数组, 也就是虚拟存储器</p><p>存储器的每一个字节都由一个唯一的数字表示, 这称为地址</p><p>所有可能地址的集合称为虚拟地址空间</p><h3 id="2-1-1-十六进制表示法">2.1.1 十六进制表示法</h3><p>二进制四合一</p><p>进制转换程序:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> <span class="title">number_to_char</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">10</span>) <span class="keyword">return</span> <span class="built_in">char</span>(<span class="string">&#x27;0&#x27;</span> + x);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;A&#x27;</span> + (x - <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">char_to_number</span><span class="params">(<span class="type">char</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;0&#x27;</span> &lt;= x &amp;&amp; x &lt;= <span class="string">&#x27;9&#x27;</span>) <span class="keyword">return</span> <span class="built_in">int</span>(x - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(x - <span class="string">&#x27;A&#x27;</span> + <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">base_transform</span><span class="params">(<span class="type">int</span> bef, <span class="type">int</span> aft, string str)</span> </span>&#123;</span><br><span class="line">    string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c: str)</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27; &#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> tmp *= bef, tmp += <span class="built_in">char_to_number</span>(c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (tmp)</span><br><span class="line">        res.<span class="built_in">insert</span>(res.<span class="built_in">begin</span>(), <span class="built_in">number_to_char</span>(tmp % aft)), </span><br><span class="line">        tmp /= aft;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-字">2.1.2 字</h3><p>(本节于第三版中与 2.1.3 合并)</p><p>对于一个字长为 n 位的机器, 虚拟地址的范围为 $2^n - 1$ <br>32 位机器限制内存为位 4GB, 但如今基本都是 64 位的机器</p><h3 id="2-1-3-数据大小">2.1.3 数据大小</h3><p>C语言中给每个数据类型的字节数随着机器和编译器的不同而不同</p><h3 id="2-1-4-寻址和字节顺序">2.1.4 寻址和字节顺序</h3><p>多字节对象被存储为连续的字节序列 <br>如一个 <code>int</code> 型变量 <code>x</code> 地址为 <code>0x100</code>, 那么 <code>int</code> 的四个字节就是 <code>0x100</code>, <code>0x101</code>, <code>0x102</code>, <code>0x103</code></p><p>由两种存储的方式</p><ol><li>大端法: 最高有效字节在前</li><li>小端法: 最低有效字节在前</li></ol><p>带来的问题:</p><ol><li>不同存储方式的机器的信息交流</li><li>阅读表示整数的字节序列</li><li>编写规避正常的类型系统的程序时</li></ol><p>字节表示程序:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span>* byte_pointer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show_bytes</span><span class="params">(byte_pointer start, <span class="type">size_t</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2x &quot;</span>, start[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show_int</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">show_bytes</span>((byte_pointer)(&amp;x), <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show_float</span><span class="params">(<span class="type">float</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">show_bytes</span>((byte_pointer)(&amp;x), <span class="built_in">sizeof</span>(<span class="type">float</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show_pointer</span><span class="params">(<span class="type">void</span> *x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">show_bytes</span>((byte_pointer)(&amp;x), <span class="built_in">sizeof</span>(<span class="type">void</span> *));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_show_bytes</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ival = val;</span><br><span class="line">    <span class="type">float</span> fval = (<span class="type">float</span>)val;</span><br><span class="line">    <span class="type">int</span>* pval = &amp;val;</span><br><span class="line">    <span class="built_in">show_int</span>(ival);</span><br><span class="line">    <span class="built_in">show_float</span>(fval);</span><br><span class="line">    <span class="built_in">show_pointer</span>(pval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-5-表示字符串">2.1.5 表示字符串</h3><p>C 中的字符串是以 00 为结尾的字符数组, 每个字符都由某个标准编码表示 (比如 <code>ASCII</code>)</p><h3 id="2-1-6-表示代码">2.1.6 表示代码</h3><p>不同的机器使用不同且不兼容的指令和编码格式, 二进制代码很少可以做移植</p><h3 id="2-1-7-布尔代数和环">2.1.7 布尔代数和环</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.jcndpw581w8.webp" alt=""></p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.2rfa517i1ok0.webp" alt=""></p><p>布尔 <code>and</code> 和 <code>xor</code> 分别表示模 2 的乘法和加法, 每个元素都是它自己的加法逆元 <code>a ^ a = 0</code></p><p>将这四种运算 (<code>&amp;</code>, <code>|</code>, <code>~</code>, <code>^</code>) 扩展到位向量上, 对于每一位都进行这些运算</p><p>位向量的一个有用的应用就是表示有限集合 <code>&amp;</code> 就是交集, <code>|</code> 就是并集, <code>~</code> 相当于补集</p><h3 id="2-1-8-C-中的位级运算">2.1.8 C 中的位级运算</h3><p>位运算的一个常见用法是实现掩码运算, 把掩码的特定位置设置成 1, 与 x 进行按位与运算<br>这样就会得到 x 在这些特定位的值, 其他位为 0</p><blockquote><p><code>~0</code> 是全为 1 的掩码, 这样的可移植性强于 <code>0xFFFFFFFF</code></p></blockquote><h3 id="2-1-9-C-中的逻辑运算">2.1.9 C 中的逻辑运算</h3><p><code>||</code>, <code>&amp;&amp;</code>, <code>!</code> 这些运算认为非零的参数都为 <code>true</code>, 0 为 <code>False</code> <br>当且仅当运算两边只有 ${0, 1}$ 时, 逻辑运算和位级运算等价 \</p><p>其次逻辑运算具有短路效应:</p><ol><li><code>||</code> 前若为 <code>true</code>, 直接返回 <code>true</code>,  <code>||</code> 后的表达式不计算</li><li><code>&amp;&amp;</code> 前若为 <code>false</code>, 直接返回 <code>false</code>,  <code>&amp;&amp;</code> 后的表达式不计算</li></ol><h3 id="2-1-10-C-中的移位运算">2.1.10 C 中的移位运算</h3><ol><li><code>x &lt;&lt; k</code> 丢弃 k 个最高位, 在最低位添加 k 个 0</li><li><code>x &gt;&gt; k</code> 丢弃 k 个最低位<ol><li>逻辑右移: 在最高位添加 k 个 0</li><li>算数右移: 符号位不变, 其后添加 k - 1 个零</li></ol></li></ol><p>几乎所有的编译器都采用算数右移</p><h2 id="2-2-整数表示">2.2 整数表示</h2><h3 id="2-2-1-整数数据类型">2.2.1 整数数据类型</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.77vyucib1bc0.webp" alt=""></p><h3 id="2-2-2-无符号和二进制补码编码">2.2.2 无符号和二进制补码编码</h3><p>$B2U_w$ 表示无符号的二进制, $B2U_w = \Sigma_{i = 0}^{w - 1} x_i 2^i$ <br>$B2T_w$ 表示二进制补码, $B2T_w = -x_{w-1}2^{w-1} +\Sigma_{i = 0}^{w - 2} x_i 2^i$ <br>$B2O_w$ 表示二进制反码, $B2O_w = -(x_{w-1}2^{w-1}-1) +\Sigma_{i = 0}^{w - 2} x_i 2^i$ <br>$B2S_w$ 表示符号数值, $B2S_w = (-1)^{x_{w-1}} \times \Sigma_{i = 0}^{w - 2} x_i 2^i$</p><p>二进制补码所能表示的值是不对称的</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3sv21t52zx60.webp" alt=""></p><h3 id="2-2-3-有符号和无符号数的转换">2.2.3 有符号和无符号数的转换</h3><p>注意强制类型转换:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">-1</span>;</span><br><span class="line">cout &lt;&lt; (<span class="type">unsigned</span>)x &lt;&lt; endl;</span><br><span class="line"><span class="comment">// 4294967295 = 2 ^ 32 - 1</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3ig3ten820c0.webp" alt=""></p><h3 id="2-2-4-C-中的有符号和无符号数">2.2.4 C 中的有符号和无符号数</h3><p>类型转换发生:</p><ol><li>显式类型转换 <code>int(12345u)</code></li><li>赋值时, 等号右边会被强制转换为等号左边</li><li><code>printf</code> 时, <code>%d</code>, <code>%u</code>, <code>%x</code>, 为有符号十进制, 无符号十进制, 十六进制</li><li>运算时若出现无符号数据, 则把运算中的所有数据转换为无符号再计算</li></ol><h3 id="2-2-5-扩展一个数字的位表示">2.2.5 扩展一个数字的位表示</h3><p>字长小的整数转换到字长大的整数:</p><ol><li>零扩展: 在最高位补 0</li><li>符号扩展(补码使用): 在最高位补最高有效位</li></ol><h3 id="2-2-6-截断数字">2.2.6 截断数字</h3><ol><li>对于无符号截断 k 位: $x \enspace mod \enspace 2^k$</li><li>对于有符号截断 k 位: 转成无符号之后同上操作, 之后把剩下的数字转成有符号</li></ol><h3 id="2-2-7-关于有符号和无符号数的建议">2.2.7 关于有符号和无符号数的建议</h3><p>在非必要的情况下不要使用无符号数</p><h2 id="2-3-整数运算">2.3 整数运算</h2><h3 id="2-3-1-无符号加法">2.3.1 无符号加法</h3><p>若当前整数由 w 位二进制位表示, 两个数加法就是 $(x+y)\enspace mod\enspace2^w$</p><p>模数加法形成一种数学结构, 称作阿贝尔群, 可交换可结合, 每个元素有一个加法逆元 <br>对于元素 $x$, 它的加法逆元就是 $2^w-x$</p><h3 id="2-3-2-二进制补码加法">2.3.2 二进制补码加法</h3><p>设 $x + y = z$</p><ol><li>正溢出: $z&gt;=2^{w-1}$, $sum = x + y - 2^w$</li><li>正常: $2^{w-1}&gt;z&gt;=-2^{w-1}$, $sum = x + y$</li><li>负溢出: $z&lt;-2^{w-1}$, $sum = x + y + 2^w$</li></ol><h3 id="2-3-3-二进制补码的非">2.3.3 二进制补码的非</h3><ol><li>$x != -2^{w-1}$, $x$ 的加法逆元是 $-x$</li><li>否则 $x$ 的加法逆元是它自己</li></ol><p>一种执行取非的技术时 <code>~x + 1</code></p><h3 id="2-3-4-无符号乘法">2.3.4 无符号乘法</h3><p>$x \times y = x \times y \enspace mod \enspace 2^w$</p><h3 id="2-3-5-二进制补码乘法">2.3.5 二进制补码乘法</h3><p>x, y 转成无符号进行乘法, 取后 w 位转成有符号整数</p><h3 id="2-3-6-乘以常数">2.3.6 乘以常数</h3><p>$2^w = 1u &lt;&lt; w$ (无符号整数) <br>$2^w = 1 &lt;&lt; w$ (二进制补码) <br>在不溢出的情况下成立</p><p>可以把乘的这个常数进行二进制拆分<br>对于拆分出的某段 111.111, 设最低位为 m, 最高位为 n</p><ol><li>FormA: <code>(x &lt;&lt; m) + (x &lt;&lt; m + 1) + ... + (x &lt;&lt; n)</code></li><li>FormB: <code>(x &lt;&lt; n + 1) - (x &lt;&lt; m)</code></li></ol><h3 id="2-3-7-除以-2-的幂">2.3.7 除以 2 的幂</h3><p>整数除法向 0 舍, 右移运算永远向下舍 <code>-5 / 2 = -2</code>, <code>-5 &gt;&gt; 1 = -3</code></p><p>以下代码等价于 $x / 2^k$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(x &lt; <span class="number">0</span> ? (x + (<span class="number">1</span> &lt;&lt; k) - <span class="number">1</span>) : x) &gt;&gt; k</span><br></pre></td></tr></table></figure><h3 id="2-3-8-关于整数运算的最后思考">2.3.8 关于整数运算的最后思考</h3><p>补码是一种很聪明的表示方法, 绝大多数运算都和无符号整数的位级操作类似 <br>数据溢出可能是造成难以调试的 bug 的一个原因</p><h2 id="2-4-浮点">2.4 浮点</h2><h3 id="2-4-1-二进制小数">2.4.1 二进制小数</h3><p>$b_mb_{m-1}\cdots b_0.b_{-1}b_{-2} \cdots b_n$ 表示 $d = \Sigma_{i = n}^{m} 2^i d_i$</p><p>若将分数转换为小数, 则分母不为 2 的幂 的分数不能被准确表示</p><h3 id="2-4-2-IEEE-浮点表示">2.4.2 IEEE 浮点表示</h3><p>使用 $V = (-1)^s \times M \times 2^E$ 的形式来表示一个数</p><ol><li>符号 <code>sign</code> 1 表示负数, 0 表示正数</li><li>有效数 <code>significand</code> M 是一个二进制小数</li><li>指数 <code>exponent</code> E, 对浮点数加权</li></ol><p>包括 1 位 <code>s</code>, $k$ 位 E,  $n$ 位 M</p><ol><li><code>float</code>: $s = 1$, $k = 8$, $n = 23$ 共 32 位</li><li><code>double</code>: $s = 1$, $k = 11$, $n = 52$ 共 64 位</li></ol><p>三种模式:</p><p>设 $Bias = 2^{k-1}-1$</p><ol><li><p>规格化值: 指数区域不是全 0 也不是全 1</p><ul><li>设 $k$ 位指数区域表示的数为 $e$, $E = e - Bias$ <br>单精度 $e \in [-126, 127]$, 双精度 $e \in [-1022, 1023]$</li><li>设 $f$ 为小数区域表示的数, $M = 1 + f$ 这样结合指数可以免费获得一个有效位</li></ul></li><li><p>非规格化值: 指数区域全零</p><ul><li>$E = 1 - Bias$</li><li>$M = f$</li></ul><p>非规格化值由两个目的</p><ol><li>保证能表示 0</li><li>用来表示非常接近 0 的数</li></ol></li><li><p>特殊数值: 指数区域全是 1</p><ul><li>$f = 0$, 根据符号位表示正无穷或者负无穷</li><li>$f \not= 0$, 表示 <code>NaN</code> 不是一个数字</li></ul></li></ol><h3 id="2-4-3-数值实例">2.4.3 数值实例</h3><p>非规格化值如此定义 $E$ 是为了和规格化值免费多出的一位相适配</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3x8snzo6zxq0.webp" alt=""><br>如此定义的非规格化值和规格化值是无缝衔接的</p><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3jvwbxeylxg0.webp" alt=""></p><h3 id="2-4-4-舍入">2.4.4 舍入</h3><p>浮点运算只能近似表示实数运算, <br>所以对于 $x$ 应该有一种系统的方法使它能被转换成浮点数, 这就是舍入</p><p>一般有四种舍入方式:<br><img src="https://github.com/lzlcs/image-hosting/raw/master/image.44qais3bbvo0.webp" alt=""></p><p>相似的, 这些舍入方法可以使用在二进制数上</p><h3 id="2-4-5-浮点运算">2.4.5 浮点运算</h3><p>浮点加法, 乘法没有结合律, 因为舍入的存在<br>浮点乘法没有分配律</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.14</span> + <span class="number">1e10</span> - <span class="number">1e10</span> = <span class="number">0</span> <span class="comment">// 3.14 被舍入</span></span><br><span class="line"><span class="number">3.14</span> + (<span class="number">1e10</span> - <span class="number">1e10</span>) = <span class="number">3.14</span></span><br></pre></td></tr></table></figure><p>浮点运算有单调性 \</p><ol><li>$a \geq b$, 则 $a + c \geq b + c$ \</li><li>$a \geq b$, 则<ul><li>$ac \geq bc \enspace (c &gt; 0)$</li><li>$ac \leq bc \enspace (c &lt; 0)$</li></ul></li><li>$a^2 \geq 0 \enspace (a \not= NaN)$</li></ol><p>之前的整数运算因为溢出的缘故没有单调性</p><h3 id="2-4-6-C-中的浮点">2.4.6 C 中的浮点</h3><p>类型转换:</p><p><code>int -&gt; float -&gt; double</code> 安全<br><code>double -&gt; float -&gt; int</code> 不安全</p><p>注意浮点数转换成整数的时候数值会向零截断</p><blockquote><p>第三版中删除了 IA32 的内容</p></blockquote><h2 id="2-5-小结">2.5 小结</h2><p>大多数机器使用二进制补码作为整数的表示, 使用 IEEE 标准作为浮点数的表示方式 <br>有限的编码长度可能导致溢出, 舍入和错误的发生</p><h1>练习选做</h1><h2 id="2-1-2-6">2.1 ~ 2.6</h2><p>简单的进制转换和运算</p><h2 id="2-7">2.7</h2><p>打印字符串中编码程序:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> *s = <span class="string">&quot;mnopqr&quot;</span>;</span><br><span class="line"><span class="built_in">show_bytes</span>((byte_pointer)s, <span class="built_in">strlen</span>(s));</span><br></pre></td></tr></table></figure><h2 id="2-8-2-9">2.8 ~ 2.9</h2><p>简单的代数运算</p><h2 id="2-10">2.10</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a                b</span><br><span class="line">a                a ^ b</span><br><span class="line">a ^ a ^ b = b    a ^ b</span><br><span class="line">b                b ^ a ^ b = a</span><br><span class="line">b                a</span><br></pre></td></tr></table></figure><h2 id="2-11">2.11</h2><p>A. $k$ (下标从 0 开始) <br>B. 根据上述代码, 如果 <code>*x</code> 和 <code>*y</code> 相同, 异或的结果只能为 0 <br>C. <code>&lt;=</code> 改成 <code>&lt;</code></p><h2 id="2-12">2.12</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">0x87654321</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// My solution</span></span><br><span class="line"><span class="comment">// int y = (1 &lt;&lt; 8) - 1;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> y = <span class="number">0xFF</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%.8x\n&quot;</span>, (y &amp; x));</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> z = ~y;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%.8x\n&quot;</span>, (z ^ x));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%.8x\n&quot;</span>, (y | x));</span><br></pre></td></tr></table></figure><h2 id="2-13">2.13</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">bis</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> result = x | m;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bic</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> result = x &amp; ~m;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bool_or</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> result = <span class="built_in">bis</span>(x, y);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bool_xor</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// x ^ y = (x &amp; ~y) | (y &amp; ~x)</span></span><br><span class="line">    <span class="type">int</span> result = <span class="built_in">bis</span>(<span class="built_in">bic</span>(x, y), <span class="built_in">bic</span>(y, x));</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-14">2.14</h2><p>注意分辨逻辑运算和位级运算</p><h2 id="2-15">2.15</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!(x ^ y)</span><br><span class="line"><span class="comment">// 此处不能写 ~</span></span><br></pre></td></tr></table></figure><h2 id="2-16">2.16</h2><p>注意算术右移和逻辑右移的区别</p><h2 id="2-17-2-22">2.17 ~ 2.22</h2><p>简单算数</p><h2 id="2-23">2.23</h2><p>A. 模拟<br>B. <code>fun1</code> 提取最后八位(无符号), <code>fun2</code> 提取最后八位(有符号)</p><h2 id="2-24">2.24</h2><p>算数</p><h2 id="2-25">2.25</h2><p><code>length - 1</code> 是 <code>11....11111</code> 运算两边出现无符号数时, 都转换为无符号数 <br>所以 <code>for (i = 0; i &lt; UMAX; i++)</code>, <code>i</code> 会超出数组范围</p><p>修改: <code>i &lt; length</code></p><h2 id="2-26">2.26</h2><p>A. 两者的减法可能为负数, 此时出现错误<br>B. 无符号中, 负数会被认为是很大的数, 大于零而产生错误<br>C. <code>strlen(s) &gt; strlen(t)</code></p><h2 id="2-27">2.27</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">uadd_ok</span><span class="params">(<span class="type">unsigned</span> x, <span class="type">unsigned</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt;= (x + y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-28-2-29">2.28 ~ 2.29</h2><p>简单算数</p><h2 id="2-30">2.30</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">tadd_ok</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !((x &gt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; x + y &lt; <span class="number">0</span>) ||</span><br><span class="line">             (x &lt; <span class="number">0</span> &amp;&amp; y &lt; <span class="number">0</span> &amp;&amp; x + y &gt; <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-31">2.31</h2><p>哈哈哈哈哈哈<br>就算溢出了该等式仍旧成立</p><h2 id="2-32">2.32</h2><p>$TMIN$ 的加法逆元是他自己, 要特判</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">tsub_ok</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> TMIN = <span class="number">-2147483648</span>;</span><br><span class="line">    <span class="keyword">if</span> (y == TMIN) <span class="keyword">return</span> x &lt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tadd_ok</span>(x, -y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-33-2-34">2.33 ~ 2.34</h2><p>简单计算</p><h2 id="2-35">2.35</h2><ol><li>当 $t=0$ 时, $p &lt; 2^w$, $x \times y = p$ 不会溢出</li><li>$p$ 除以 $x$ 等于 $q$, 余 $r$</li><li>$x \times y = x \times q + r + t 2^w$<ul><li>$q=y$, $0 = r + t2^w$, 又 $\lvert r \rvert &lt; 2^w$, 所以 $r = t = 0$</li><li>$r = t = 0$, $x \times y = x \times q$, 显然 $q=y$</li></ul></li></ol><h2 id="2-36">2.36</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">tmult_ok</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int64_t</span> tmp = (<span class="type">int64_t</span>)x * y;</span><br><span class="line">    <span class="keyword">return</span> tmp == (<span class="type">int</span>)tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-37">2.37</h2><p>A. 一点没用 <br>B. 不能改 <code>malloc</code> 的代码, 所以只能在溢出的时候返回空</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint64_t</span> required_size = ele_cnt * (<span class="type">uint64_t</span>) ele_size;</span><br><span class="line"><span class="type">size_t</span> request_size = (<span class="type">size_t</span>) required_size;</span><br><span class="line"><span class="keyword">if</span> (required_size != request_size)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h2 id="2-38">2.38</h2><p>对于任何值都可以</p><h2 id="2-39">2.39</h2><p>$n$ 是最高位时, <code>1 &lt;&lt; n + 1</code> 为 $0$, FormB 可以写成 <code>-x &lt;&lt; m</code></p><h2 id="2-40">2.40</h2><p>简单算数</p><h2 id="2-41">2.41</h2><p>当 $n = m$ 或者 $n = m + 1$ 时, 使用 FormA, 此时只需要做一次或者两次移位运算 <br>其他情况下, FormB 需要做两次移位运算, FormA 需要更多次移位运算</p><h2 id="2-42">2.42</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">div16</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 加的是 0 还是 15</span></span><br><span class="line">    <span class="type">int</span> bias = (x &gt;&gt; <span class="number">31</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">    <span class="keyword">return</span> (x + bias) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-43">2.43</h2><p>$M = 31, N = 8$</p><h2 id="2-44">2.44</h2><p>A. False, $x = TMIN_{32}$, <code>-2147483648 &gt; 0 || 2147483647 &lt; 0</code> 为 <code>false</code> <br>B. True, 如果 <code>(x &amp; 7) == 7</code>, 那么最低三位一定为 <code>111</code>, 右移 29 位之后成为符号位, 一定为负 <br>C. False, $x = 46341$ <br>D. True <br>E: False, $x = TMIN_{32}$ <br>F: True, 都会被转换成无符号再计算 <br>G: True, $x \times (-y - 1) + uy \times ux$, 也就是 $-x$</p><h2 id="2-45">2.45</h2><p>简单算数</p><h2 id="2-46">2.46</h2><p>A. $0.000000000000000000000001100[1100]\cdots$ <br>B. $2^{-10} \times \frac{1}{10}$ 约为 $9.54 \times 10_{-8} <br>C, D 简单算数</p><h2 id="2-47-2-48">2.47 ~ 2.48</h2><p>简单算数</p><h2 id="2-49">2.49</h2><p>在小数部分的最高位放上 1, 后面 $n-1$ 个 0 最后再放个 1 这样就超出范围了 <br>$2^{n+1}+1$, $n=23$ 时十进制表示为16777217</p><h2 id="2-50">2.50</h2><p>简单舍入</p><h2 id="2-51">2.51</h2><p>A. 题干中 23 位末尾 0 变 1<br>B. 只有最后一位 1, $2^{-22} \times \frac{1}{10}$, 约为 $2.38 * 10^{-8}<br>C. D. 简单算数</p><h2 id="2-52">2.52</h2><p>算数</p><h2 id="2-53">2.53</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> POS_INFINITY (1.9 * 1e308)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NEG_INFINITY (-POS_INFINITY)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NEG_ZERO (1.0 / NEG_INFINITY)</span></span><br></pre></td></tr></table></figure><h2 id="2-54">2.54</h2><ul><li>A. YES \</li><li>B. NO: <code>float</code> 中只有23位存储小数, 所以需要存储25位的数字时有时会出现问题 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">0x01000001</span>;</span><br><span class="line">cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; (<span class="type">int</span>)(<span class="type">float</span>)x &lt;&lt; endl;</span><br><span class="line">x = <span class="number">0x01FFFFFF</span>;</span><br><span class="line">cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; (<span class="type">int</span>)(<span class="type">float</span>)x &lt;&lt; endl;</span><br></pre></td></tr></table></figure></li><li>C. NO: <code>double</code> 范围更大</li><li>D. YES</li><li>E. YES</li><li>F. YES</li><li>G. YES</li><li>H. NO:  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="number">1e20</span>, d = <span class="number">3.14</span>;</span><br><span class="line">cout &lt;&lt; d &lt;&lt; endl &lt;&lt; (f + d) - f &lt;&lt; endl;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-55-2-57">2.55 ~ 2.57</h2><p>在正文中已经编译运行, 本机器使用小端法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span>* byte_pointer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show_bytes</span><span class="params">(byte_pointer start, <span class="type">size_t</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2x &quot;</span>, start[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show_int</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">show_bytes</span>((byte_pointer)(&amp;x), <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show_float</span><span class="params">(<span class="type">float</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">show_bytes</span>((byte_pointer)(&amp;x), <span class="built_in">sizeof</span>(<span class="type">float</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show_short</span><span class="params">(<span class="type">short</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">show_bytes</span>((byte_pointer)(&amp;x), <span class="built_in">sizeof</span>(<span class="type">short</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show_long</span><span class="params">(<span class="type">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">show_bytes</span>((byte_pointer)(&amp;x), <span class="built_in">sizeof</span>(<span class="type">long</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show_double</span><span class="params">(<span class="type">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">show_bytes</span>((byte_pointer)(&amp;x), <span class="built_in">sizeof</span>(<span class="type">double</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show_pointer</span><span class="params">(<span class="type">void</span> *x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">show_bytes</span>((byte_pointer)(&amp;x), <span class="built_in">sizeof</span>(<span class="type">void</span> *));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_show_bytes</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ival = val;</span><br><span class="line">    <span class="type">float</span> fval = (<span class="type">float</span>)val;</span><br><span class="line">    <span class="type">int</span>* pval = &amp;val;</span><br><span class="line">    <span class="type">short</span> sval = val;</span><br><span class="line">    <span class="type">long</span> lval = val;</span><br><span class="line">    <span class="type">double</span> dval = (<span class="type">double</span>)val;</span><br><span class="line">    <span class="built_in">show_int</span>(ival);</span><br><span class="line">    <span class="built_in">show_float</span>(fval);</span><br><span class="line">    <span class="built_in">show_pointer</span>(pval);</span><br><span class="line">    <span class="built_in">show_short</span>(sval);</span><br><span class="line">    <span class="built_in">show_long</span>(lval);</span><br><span class="line">    <span class="built_in">show_double</span>(dval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-58">2.58</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">is_little_endian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line">    byte_pointer y = (byte_pointer)&amp;x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)(y[<span class="number">0</span>] == <span class="number">0x01</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-59">2.59</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> _2_59(<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">    <span class="type">int</span> mask = <span class="number">0xFF</span>;</span><br><span class="line">    <span class="keyword">return</span> (x &amp; mask) | (y &amp; (~mask));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-60">2.60</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">replace_byte</span><span class="params">(<span class="type">unsigned</span> x, <span class="type">int</span> i, <span class="type">unsigned</span> <span class="type">char</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> mask = ~(<span class="number">0xFF</span> &lt;&lt; (i &lt;&lt; <span class="number">3</span>));</span><br><span class="line">    <span class="type">int</span> replace_value = (<span class="type">int</span>)b &lt;&lt; (i &lt;&lt; <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x &amp; mask | replace_value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-61">2.61</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">A</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(~x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">B</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> mask = <span class="number">0xFF</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">A</span>(x | ~mask);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">D</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mask = <span class="number">0xFF</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> shift_val = (<span class="built_in">sizeof</span>(<span class="type">int</span>) - <span class="number">1</span>) &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> xright = x &gt;&gt; shift_val;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">B</span>(xright &amp; mask);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-62">2.62</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">int_shifts_are_arithmetic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(~(<span class="number">-1</span> &gt;&gt; <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-63">2.63</h2><p>一个数不变: <code>x | 0</code>, <code>x &amp; -1</code> <br>-1 左移可以构造高位全为 1 的数字</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> <span class="title">srl</span><span class="params">(<span class="type">unsigned</span> x, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> xsra = (<span class="type">int</span>)x &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> w = (<span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mask = <span class="number">-1</span> &lt;&lt; (w - k);</span><br><span class="line">    <span class="keyword">return</span> xsra &amp; (~mask);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sra</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> xsrl = (<span class="type">unsigned</span>)x &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> w = (<span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; <span class="number">3</span>);</span><br><span class="line">    <span class="type">int</span> mask = <span class="number">-1</span> &lt;&lt; (w - k);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> sign = (x &amp; (<span class="number">1</span> &lt;&lt; (w - <span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line">    mask &amp;= (!sign) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> xsrl | mask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-64">2.64</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">any_odd_one</span><span class="params">(<span class="type">unsigned</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !!(<span class="number">0xAAAAAAAA</span> &amp; x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-65">2.65</h2><p>统计 1 个数的奇偶性, 根据异或不进位加法的特性 <br>把前 16 位和后 16 位异或起来, 这样后 16 位 1 的个数的奇偶性与先前相同 <br>依次到 8 位, 4 位, 2 位, 1 位, 这样只需要判断最后一位的奇偶性即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">odd_ones</span><span class="params">(<span class="type">unsigned</span> x)</span> </span>&#123;</span><br><span class="line">    x ^= (x &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    x ^= (x &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    x ^= (x &gt;&gt; <span class="number">4</span>);</span><br><span class="line">    x ^= (x &gt;&gt; <span class="number">2</span>);</span><br><span class="line">    x ^= (x &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> x &amp; <span class="number">0x1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-66">2.66</h2><ol><li>首先生成一个数字, 使得最高有效的 1 到最低位全是 1 <br><code>x |= x &gt;&gt; 1</code> 这样最高的两位都是 1 <br><code>x |= x &gt;&gt; 2</code> 这样最高的四位都是 1 <br>依此类推 <br><code>x |= x &gt;&gt; 16</code> 达成目标</li><li>右移一次再加一 (如果 <code>x = 0</code> 则加 0) <br>不加一再右移是为了防止溢出</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">leftmost_one</span><span class="params">(<span class="type">unsigned</span> x)</span> </span>&#123;</span><br><span class="line">    x |= x &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    x |= x &gt;&gt; <span class="number">2</span>;</span><br><span class="line">    x |= x &gt;&gt; <span class="number">4</span>;</span><br><span class="line">    x |= x &gt;&gt; <span class="number">8</span>;</span><br><span class="line">    x |= x &gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="comment">// x = 0 时加的数为 0</span></span><br><span class="line">    <span class="type">int</span> add_number = (x &amp;&amp; <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> (x &gt;&gt; <span class="number">1</span>) + add_number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-67">2.67</h2><p>A. 左移 32 位的行为未定义<br>B, C 如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">int_size_is_32</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> set_msb = <span class="number">1</span> &lt;&lt; <span class="number">31</span>;</span><br><span class="line">    <span class="type">int</span> beyond_msb = set_msb &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> set_msb &amp;&amp; !beyond_msb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">int_size_is_32_for_16_bit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> set_msb = <span class="number">1</span> &lt;&lt; <span class="number">15</span> &lt;&lt; <span class="number">15</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> beyond_msb = set_msb &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> set_msb &amp;&amp; !beyond_msb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-68">2.68</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lower_one_mask</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> w = <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span>)<span class="number">-1</span> &gt;&gt; (w - n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-69">2.69</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> <span class="title">rotate_left</span><span class="params">(<span class="type">unsigned</span> x, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> w = <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> offset = w - n;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> lower = x &gt;&gt; offset;</span><br><span class="line">    <span class="type">int</span> upper = x &lt;&lt; n;</span><br><span class="line">    <span class="keyword">return</span> lower | upper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-70">2.70</h2><p>如果 x 为正, 那么第 n-1 位直到第 w-1 位都必须为 0 <br>如果 x 为负, 那么第 n-1 位直到第 w-1 位都必须为 1</p><p>右移去掉 大于 n-1 位的数, 算数左移回来, 如果运算之后结果不变就是可以表示</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fits_bits</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> w = <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> offset = w - n;</span><br><span class="line">    <span class="keyword">return</span> (x &lt;&lt; offset &gt;&gt; offset) == x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-71">2.71</h2><p>原代码只提取了位, 并没有转换成 <code>signed</code> 形式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">xbyte</span><span class="params">(<span class="type">packed_t</span> word, <span class="type">int</span> bytenum)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> w = <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> bitnum = bytenum &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> delta = w - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>((word &gt;&gt; bitnum) &amp; <span class="number">0xFF</span>) &lt;&lt; delta &gt;&gt; delta;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-72">2.72</h2><p>A. <code>sizeof</code> 运算符返回 <code>unsigned</code> 值, <code>maxbytes - sizeof(val)</code> 结果为负数就会出错<br>B. <code>maxbytes &gt;= (int)sizeof(val)</code> 即可</p><h2 id="2-73">2.73</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">saturating_add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = x + y;</span><br><span class="line">    <span class="type">int</span> sig_mask = INT_MIN;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> pos_over = !(x &amp; sig_mask) &amp;&amp; !(y &amp; sig_mask) &amp;&amp; (sum &amp; sig_mask);</span><br><span class="line">    <span class="type">int</span> neg_over = (x &amp; sig_mask) &amp;&amp; (y &amp; sig_mask) &amp;&amp; !(sum &amp; sig_mask);</span><br><span class="line"></span><br><span class="line">    (pos_over &amp;&amp; (sum = INT_MAX)) || (neg_over &amp;&amp; (sum = INT_MIN));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-74">2.74</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">tadd_ok</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = x + y;</span><br><span class="line">    <span class="type">int</span> pos_over = (x &gt; <span class="number">0</span> &amp;&amp; y &gt; <span class="number">0</span> &amp;&amp; sum &lt; <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> neg_over = (x &lt; <span class="number">0</span> &amp;&amp; y &lt; <span class="number">0</span> &amp;&amp; sum &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> !(pos_over || neg_over);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">tsub_ok</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    (y == INT_MIN &amp;&amp; x &gt; <span class="number">0</span> &amp;&amp; (res = <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> res &amp;&amp; <span class="built_in">tadd_ok</span>(x, -y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-75">2.75</h2><p><code>signed</code>:<br>$$<br>\begin{align*}<br>&amp;(x - 2^{32}s_x)(y - 2^{32}s_y) \enspace mod \enspace 2^{32} \<br>= &amp;(xy -2^{32}s_xy - 2^{32}s_yx - s_xs_y2^{64}) \enspace mod \enspace 2^{32} \<br>= &amp;(xy - s_xy - s_yx) \enspace mod \enspace 2^{32}</p><p>\end{align*}<br>$$</p><p>所以转换回去只需要 $+ s_xy + s_yx$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">signed_high_prod</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> tmp = <span class="number">1ll</span> * x * y;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)(tmp &gt;&gt; <span class="number">32</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="title">unsigned_high_prod</span><span class="params">(<span class="type">unsigned</span> x, <span class="type">unsigned</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> sig_x = x &gt;&gt; <span class="number">31</span>;</span><br><span class="line">    <span class="type">int</span> sig_y = y &gt;&gt; <span class="number">31</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">signed_high_prod</span>(x, y) + sig_x * y + sig_y * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-76">2.76</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="title">another_calloc</span><span class="params">(<span class="type">size_t</span> nmemb, <span class="type">size_t</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nmemb == <span class="number">0</span> || size == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (nmemb * size / size != nmemb) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">void</span>* begin = <span class="built_in">malloc</span>(nmemb);</span><br><span class="line">    <span class="built_in">memset</span>(begin, <span class="number">0</span>, size * nmemb);</span><br><span class="line">    <span class="keyword">return</span> begin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-77">2.77</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line">cout &lt;&lt; (x &lt;&lt; <span class="number">4</span>) + x &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; x - (x &lt;&lt; <span class="number">3</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; (x &lt;&lt; <span class="number">6</span>) - (x &lt;&lt; <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; (x &lt;&lt; <span class="number">4</span>) - (x &lt;&lt; <span class="number">7</span>) &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h2 id="2-78">2.78</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">divide_power2</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> w = <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> sign = x &gt;&gt; (w - <span class="number">1</span>) &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (x + sign) &gt;&gt; k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-79">2.79</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">mul3div4</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    x = (x &lt;&lt; <span class="number">1</span>) + x;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">divide_power2</span>(x, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-80">2.80</h2><p>把最低两位分开计算</p><ol><li>此时 <code>upper</code> 部分可以被 4 整除, 之后再乘 3 不会有溢出风险</li><li><code>lower &lt;= 3</code> 可以直接乘 3 除以 4, 注意向 0 舍入的问题</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> _2_80(<span class="type">int</span> x) &#123;</span><br><span class="line">    <span class="type">int</span> upper = x &amp; ~<span class="number">0x3</span>;</span><br><span class="line">    <span class="type">int</span> first = upper &gt;&gt; <span class="number">2</span>;</span><br><span class="line">    first += (first &lt;&lt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> lower = x &amp; <span class="number">0x3</span>;</span><br><span class="line">    <span class="type">int</span> is_neg = x &amp; INT_MIN;</span><br><span class="line">    lower += lower &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    is_neg &amp;&amp; (lower += <span class="number">3</span>);</span><br><span class="line">    lower &gt;&gt;= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> first + lower;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-81">2.81</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> _2_81_A(<span class="type">int</span> k) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span> &lt;&lt; k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _2_81_B(<span class="type">int</span> k, <span class="type">int</span> j) &#123;</span><br><span class="line">    <span class="keyword">return</span> ~(<span class="number">-1</span> &lt;&lt; k) &lt;&lt; j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-82">2.82</h2><p>A. False, <code>x = -2147483648</code><br>B. True<br>C. True<br>D. True<br>E. True</p><h2 id="2-83">2.83</h2><p>A.<br>$$<br>2^{len(y)}Y - y = Y \<br>Y = \frac{y}{2^{len(y)}-1}<br>$$<br>B. $\frac57$, $\frac35$, $\frac{19}{63}$</p><h2 id="2-84">2.84</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="title">f2u</span><span class="params">(<span class="type">float</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">unsigned</span>*)&amp;x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">float_le</span><span class="params">(<span class="type">float</span> x, <span class="type">float</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> ux = <span class="built_in">f2u</span>(x);</span><br><span class="line">    <span class="type">unsigned</span> uy = <span class="built_in">f2u</span>(y);</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> sx = ux &gt;&gt; <span class="number">31</span>;</span><br><span class="line">    <span class="type">unsigned</span> sy = uy &gt;&gt; <span class="number">31</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防止 x = +0.0, y = -0.0 的情况</span></span><br><span class="line">    <span class="keyword">return</span> (ux &lt;&lt; <span class="number">1</span> == <span class="number">0</span> &amp;&amp; uy &lt;&lt; <span class="number">1</span> == <span class="number">0</span>) ||</span><br><span class="line">           (sx &amp;&amp; !sy) ||</span><br><span class="line">           (!sx &amp;&amp; !sy &amp;&amp; ux &lt;= uy) ||</span><br><span class="line">           (sx &amp;&amp; sy &amp;&amp; ux &gt;= uy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-85">2.85</h2><ol><li>A. <code>1 2+1023 11000000</code> -&gt; <code>1 10..01 1100...</code></li><li>B. <code>0 bias+n 11..11</code> n 为第三段的位数</li><li>C. 最小规格化数: $2^{1-bias}$, 倒数为 $2^{bias-1}$ <br>$E = bias-1$, $e = E + bias = 253$, <br><code>0 11..1101 000000..</code></li></ol><h2 id="2-86-2-88">2.86 ~ 2.88</h2><p>计算题</p><h2 id="2-89">2.89</h2><ul><li>A. True</li><li>B. False (<code>x - y</code> 可能溢出)</li><li>C. True <code>double</code> 精度很高, 在 <code>int</code> 范围内可以有结合律</li><li>D. False 乘法结果为 64 位, 有可能舍入, 没有结合律</li><li>E. False 除零错误</li></ul><h2 id="2-90">2.90</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">float</span> <span class="title">u2f</span><span class="params">(<span class="type">unsigned</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">float</span>*) &amp;x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">fpwr2</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> exp, frac;</span><br><span class="line">    <span class="type">unsigned</span> u;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> bias = (<span class="number">1</span> &lt;&lt; (<span class="number">8</span> - <span class="number">1</span>)) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">-126</span> - <span class="number">23</span>) &#123;</span><br><span class="line">        exp = <span class="number">0</span>;</span><br><span class="line">        frac = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">-126</span>) &#123;</span><br><span class="line">        exp = <span class="number">0</span>;</span><br><span class="line">        frac = <span class="number">1</span> &lt;&lt; (x + <span class="number">23</span> + <span class="number">126</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">128</span>) &#123;</span><br><span class="line">        exp = x + bias;</span><br><span class="line">        frac = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        exp = <span class="number">0xFF</span>;</span><br><span class="line">        frac = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    u = exp &lt;&lt; <span class="number">23</span> | frac;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">u2f</span>(u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-91">2.91</h2><p>算数</p><h2 id="2-92">2.92</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> float_bits;</span><br><span class="line"></span><br><span class="line"><span class="function">float_bits <span class="title">float_negate</span><span class="params">(float_bits f)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> sign = f &gt;&gt; <span class="number">31</span>;</span><br><span class="line">    <span class="type">unsigned</span> exp = f &gt;&gt; <span class="number">23</span> &amp; <span class="number">0xFF</span>;</span><br><span class="line">    <span class="type">unsigned</span> frac = f &amp; <span class="number">0x7FFFFF</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (exp == <span class="number">0xFF</span> &amp;&amp; frac != <span class="number">0</span>) <span class="keyword">return</span> f;</span><br><span class="line">    <span class="keyword">return</span> (~sign &lt;&lt; <span class="number">31</span>) | (exp &lt;&lt; <span class="number">23</span>) | frac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-93">2.93</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">float_bits <span class="title">float_absval</span><span class="params">(float_bits f)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> sign = f &gt;&gt; <span class="number">31</span>;</span><br><span class="line">    <span class="type">unsigned</span> exp = f &gt;&gt; <span class="number">23</span> &amp; <span class="number">0xFF</span>;</span><br><span class="line">    <span class="type">unsigned</span> frac = f &amp; <span class="number">0x7FFFFF</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (exp == <span class="number">0xFF</span> &amp;&amp; frac != <span class="number">0</span>) <span class="keyword">return</span> f;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span> &lt;&lt; <span class="number">31</span>) | (exp &lt;&lt; <span class="number">23</span>) | frac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-94">2.94</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">float_bits <span class="title">float_twice</span><span class="params">(float_bits f)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> sign = f &gt;&gt; <span class="number">31</span>;</span><br><span class="line">    <span class="type">unsigned</span> exp = f &gt;&gt; <span class="number">23</span> &amp; <span class="number">0xFF</span>;</span><br><span class="line">    <span class="type">unsigned</span> frac = f &amp; <span class="number">0x7FFFFF</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (exp == <span class="number">0</span>) frac &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (exp == <span class="number">0xFF</span> - <span class="number">1</span>) exp = <span class="number">0xff</span>, frac = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> exp += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (sign &lt;&lt; <span class="number">31</span>) | (exp &lt;&lt; <span class="number">23</span>) | frac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-95">2.95</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">float_bits <span class="title">float_half</span><span class="params">(float_bits f)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> sign = f &gt;&gt; <span class="number">31</span>;</span><br><span class="line">    <span class="type">unsigned</span> exp = f &gt;&gt; <span class="number">23</span> &amp; <span class="number">0xFF</span>;</span><br><span class="line">    <span class="type">unsigned</span> frac = f &amp; <span class="number">0x7FFFFF</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> addition = ((frac &amp; <span class="number">0x3</span>) == <span class="number">0x3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (exp == <span class="number">0xFF</span>) <span class="keyword">return</span> f;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (exp == <span class="number">0</span>) </span><br><span class="line">        frac = (frac &gt;&gt; <span class="number">1</span>) + addition;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (exp == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">unsigned</span> rest = f &amp; <span class="number">0x7FFFFFFF</span>;</span><br><span class="line">        rest = (rest &gt;&gt; <span class="number">1</span>) + addition;</span><br><span class="line"></span><br><span class="line">        exp = rest &gt;&gt; <span class="number">23</span> &amp; <span class="number">0xFF</span>;</span><br><span class="line">        frac = rest &amp; <span class="number">0x7FFFFF</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> exp -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (sign &lt;&lt; <span class="number">31</span>) | (exp &lt;&lt; <span class="number">23</span>) | frac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-96">2.96</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">float_f2i</span><span class="params">(float_bits f)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> sign = f &gt;&gt; <span class="number">31</span>;</span><br><span class="line">    <span class="type">unsigned</span> exp = f &gt;&gt; <span class="number">23</span> &amp; <span class="number">0xFF</span>;</span><br><span class="line">    <span class="type">unsigned</span> frac = f &amp; <span class="number">0x7FFFFF</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> bias = <span class="number">127</span>, num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (exp &gt;= <span class="number">0</span> &amp;&amp; exp &lt; bias) num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (exp &gt;= <span class="number">31</span> + bias) num = <span class="number">0x80000000</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> E = exp - bias;</span><br><span class="line">        <span class="type">int</span> M = frac | <span class="number">0x800000</span>;</span><br><span class="line">        <span class="keyword">if</span> (E &gt; <span class="number">23</span>) num = M &lt;&lt; (E - <span class="number">23</span>);</span><br><span class="line">        <span class="keyword">else</span> num = M &gt;&gt; (<span class="number">23</span> - E);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sign ? -num : num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-97">2.97</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">float_bits <span class="title">float_i2f</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> bias = <span class="number">127</span>;</span><br><span class="line">    <span class="comment">// 特判 0 和 INT_MIN</span></span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == INT_MIN) </span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; <span class="number">31</span>) | ((bias + <span class="number">31</span>) &lt;&lt; <span class="number">23</span>) | <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断符号位</span></span><br><span class="line">    <span class="type">int</span> sign = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x = -x, sign = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算有效位</span></span><br><span class="line">    <span class="type">int</span> tmp = x, bits = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (tmp) tmp &gt;&gt;= <span class="number">1</span>, bits++;</span><br><span class="line">    <span class="type">int</span> fbits = bits - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> exp = bias + fbits, frac, exp_sig;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 去掉最高位 1 之后的位</span></span><br><span class="line">    <span class="type">int</span> rest = x &amp; <span class="built_in">bit_mask</span>(fbits);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fbits &lt;= <span class="number">23</span>) &#123; <span class="comment">// 可以被直接表示, 不需要舍入</span></span><br><span class="line">        frac = rest &lt;&lt; (<span class="number">23</span> - fbits);</span><br><span class="line">        exp_sig = exp &lt;&lt; <span class="number">23</span> | frac;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> offset = fbits - <span class="number">23</span>; <span class="comment">// 应该舍弃的位</span></span><br><span class="line">        <span class="type">int</span> round_mid = <span class="number">1</span> &lt;&lt; (offset - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> round_part = rest &amp; <span class="built_in">bit_mask</span>(offset);</span><br><span class="line">        frac = rest &gt;&gt; offset;</span><br><span class="line"></span><br><span class="line">        exp_sig = exp &lt;&lt; <span class="number">23</span> | frac;</span><br><span class="line"></span><br><span class="line">        exp_sig += ((round_part &gt; round_mid) || </span><br><span class="line">                    (round_part == round_mid &amp;&amp; ((frac &amp; <span class="number">0x01</span>) == <span class="number">1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (sign &lt;&lt; <span class="number">31</span>) | exp_sig;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP 学习笔记 (第一章)</title>
      <link href="/2023/07/26/1csapp/"/>
      <url>/2023/07/26/1csapp/</url>
      
        <content type="html"><![CDATA[<h1>Chapter 1: 计算机系统漫游</h1><h2 id="1-1-信息就是位-上下文">1.1 信息就是位+上下文</h2><p>只使用 $ASCII$ 字符构成的文件称为<strong>文本文件</strong> <br>所有其他的文件称为<strong>二进制文件</strong></p><p>系统中所有的信息都是由比特序列表示的, 通过上下文来区分这些数据表示什么</p><h2 id="1-2-程序被其他程序翻译成不同的格式">1.2 程序被其他程序翻译成不同的格式</h2><p>每条 C 语句都被<strong>编译器驱动程序</strong>翻译成低级<strong>机器语言</strong>指令, 这些指令被打包成<strong>可执行目标文件</strong> \</p><ol><li>预处理阶段: 预处理器把头文件内容直接插入到 <code>hello.c</code> 中, 得到 <code>hello.i</code></li><li>编译阶段: 编译器把 <code>hello.i</code> 翻译成 <code>hello.s</code>, 这是一个汇编程序</li><li>汇编阶段: 汇编器把 <code>hello.s</code> 翻译成机器语言, 打包成 <code>hello.o</code>, 可重定位目标程序</li><li>链接阶段: 链接器负责将预编译的目标文件并入当前文件, 如 <code>printf.o</code>, 得到 <code>hello</code>, 可执行目标程序</li></ol><h2 id="1-3-了解编译系统如何工作是大有益处的">1.3 了解编译系统如何工作是大有益处的</h2><ol><li>优化程序性能</li><li>理解链接时出现的错误</li><li>避免安全漏洞</li></ol><h2 id="1-4-处理器读并解释储存在存储器中的指令">1.4 处理器读并解释储存在存储器中的指令</h2><p>把文件名输入到 <code>shell</code>, 一种命令行解释器中</p><h3 id="1-4-1-系统的硬件组成">1.4.1 系统的硬件组成</h3><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.3lsioy5nita.webp" alt="图片"></p><p><strong>总线</strong>: 传递字, 字包含若干字节, 一个字包含的字节数称作字长 <br><strong>IO设备</strong>: 通过控制器或适配器和 IO总线连接 <br><strong>主存</strong>: 一个临时存储设备, 由一些 <code>DRAM</code> (动态随机存取储存器)芯片组成, 是一个线性的字节数组 <br><strong>处理器</strong>: 从 PC 指向的存储器中取出指令并执行 <br></p><ul><li>加载: 从主存拷贝一个字节或者一个字存到寄存器中</li><li>存储: 从寄存器拷贝到主存</li><li>更新: 用 ALU 计算并存到寄存器中</li><li>I/O 读: 从 IO 设备到寄存器</li><li>I/O 写: 从寄存器到 IO 设备</li><li>转移: 从指令本身抽取一个字放在 PC 中</li></ul><h3 id="1-4-2-执行-hello-程序">1.4.2 执行 <code>hello</code> 程序</h3><ol><li>从键盘逐一读取 <code>hello</code> 命令放到寄存器, 最后放到主存中</li><li>通过 DMA 技术从磁盘调用可执行文件到主存中</li><li>逐条运行机器语言指令, 把 <code>hello, world!</code> 从主存拷贝到寄存器再到输出设备</li></ol><h2 id="1-5-高速缓存">1.5 高速缓存</h2><p>较大的存储设备比较小的存储设备运行慢, 但快速设备的造价远高于低速同类设备</p><p>系统设计者采用 SRAM技术实现的高速缓存存储器来加快拷贝速度</p><h2 id="1-6-形成层次结构的存储设备">1.6 形成层次结构的存储设备</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.44pb2oin5va0.webp" alt=""></p><h2 id="1-7-操作系统管理硬件">1.7 操作系统管理硬件</h2><p>程序并没有直接访问硬件, 而是靠 <strong>操作系统</strong> 提供的服务</p><p>操作系统有两个基本功能:</p><ol><li>防止硬件被失控的程序滥用</li><li>为应用程序提供简单且一致的硬件操作方法</li></ol><p><img src="https://github.com/lzlcs/image-hosting/raw/master/image.hxxuwi335ww.webp" alt=""></p><h3 id="1-7-1-进程">1.7.1 进程</h3><p>进程是操作系统对运行程序的一种抽象</p><p>每个进程好像在独自使用硬件, 这称之为并行, 实际上是不同进程的指令的交错执行 <br><br>这种机制称作 <strong>上下文切换</strong>, 上下文也就是进程运行所需的所有状态信息</p><h3 id="1-7-2-线程">1.7.2 线程</h3><p>一个进程可以由多个线程组成, 多线程比多进程更容易共享数据</p><h3 id="1-7-3-虚拟存储器">1.7.3 虚拟存储器</h3><p>虚拟存储器是一个抽象概念, 它为每个进程提供一个假象 <br>每个进程看到的存储器都是一致的, 称为虚拟地址空间</p><p>虚拟存储空间由大量准确定义的区组成, 包括程序代码和数据, 堆, 共享库, 栈, 内核虚拟储存器</p><h3 id="1-7-4-文件">1.7.4 文件</h3><p>所有的设备甚至网络, 都可以被看成文件</p><h2 id="1-8-利用网络系统和其他系统通信">1.8 利用网络系统和其他系统通信</h2><p>一个网络也可以看作一个IO设备</p><h2 id="1-9-下一步">1.9 下一步</h2><p>系统是互相交织的硬件和软件的集合体, 他们必须共同协作</p><h2 id="1-10-小结">1.10 小结</h2><p>信息是一串01序列, 根据上下文有不同的解释方式 <br>程序被其他程序翻译成其他格式, 最终变为可执行文件</p><p>存储设备按层次排列</p><p>操作系统内核提供三个基本的抽象概念</p><ol><li>文件是对 IO 设备的抽象概念</li><li>虚拟存储器是对主存和磁盘的抽象概念</li><li>进程是处理器, 主存和 IO 设备的抽象概念</li></ol>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SICP 学习笔记 (第一章)</title>
      <link href="/2023/07/02/1sicp/"/>
      <url>/2023/07/02/1sicp/</url>
      
        <content type="html"><![CDATA[<p>习题和书中代码使用 <code>python</code> 重写</p><hr><h1>Chapter 1: 构造函数抽象</h1><h2 id="1-1-程序设计的基本元素">1.1 程序设计的基本元素</h2><p>三种机制</p><ol><li>基本表达形式: 最简单的元素</li><li>组合的方法: 构造复合元素</li><li>抽象的方法: 命名并操作复合元素</li></ol><h3 id="1-1-1-表达式">1.1.1 表达式</h3><p>在 <code>scheme</code> 中:</p><p>一些十进制的数字是表达式, 可以用表示函数的基本元素(如 <code>+</code>, <code>*</code>) 来组合这些数字表达式 <br>表示把有关函数应用到这些数字上面, 形成类似 <code>(+ 3 4)</code> 的组合式 <br><code>(运算符 运算对象1 运算对象2 ....)</code> 这种运算符在最前的表达方式是前缀表达式</p><ol><li>可以适用任意个运算对象而不出现歧义</li><li>允许运算对象本身也是个组合式</li></ol><p>解释器通常按照 <strong>读入-求值-打印</strong> 循环求出表达式的值, 无论表达式多复杂</p><p>在 <code>python</code> 解释器中, 直接输入正常的中缀表达式就可以打印结果</p><h3 id="1-1-2-命名和环境">1.1.2 命名和环境</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>这是把值绑定到变量名的方式, 是最简单的抽象方法 <br>忽略计算值的一系列函数而直接使用名称从而简化程序</p><p>要实现这种绑定的功能, 解释器必须具备存储的能力 <br>这种存储称之为环境(全局环境)</p><h3 id="1-1-3-组合式的求值">1.1.3 组合式的求值</h3><ol><li>对每个运算对象求值, 这一求值函数是递归的</li><li>对每个运算对象求值的结果应用运算符</li></ol><p>可以采用树的形式来表示组合式的求值函数, 组合式的值为父节点, 子节点为运算符和运算对象 <br>自底向上计算, 在越来越高的层次中组合起来, 这种计算函数称为 <strong>树形积累</strong></p><p>叶子节点可以分为以下几类:</p><ol><li>数字, 代表它本身</li><li>运算符, 代表操作方式</li><li>其他: 在环境中寻找绑定的值</li><li>特殊形式</li></ol><h3 id="1-1-4-复合函数">1.1.4 复合函数</h3><p><strong>函数定义</strong> 可以为复合操作提供名字, 从而在之后的运算中作为一个单元来使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名称</span>(<span class="params">形参列表</span>):</span><br><span class="line">    函数主体</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><p>函数名称和形参列表写在一起, 和调用这个函数的时候一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">square(<span class="number">4</span>) <span class="comment">#16</span></span><br></pre></td></tr></table></figure><p>此时实际参数 4 取代形式参数 <code>x</code> 进行运算, 结果为 16 <br><code>square(4)</code> 也称为一个表达式, 可以被嵌入其他表达式中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_square</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> square(x) + square(y)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> sum_square(x + <span class="number">1</span>, x * <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="1-1-5-函数应用的代换模型">1.1.5 函数应用的代换模型</h3><p><strong>代换模型</strong> 就是将函数体的形参用实参代替之后, 对函数体求值的计算函数</p><blockquote><p>替换只是一个最简单的模型, 之后会讨论其他更精细的模型</p></blockquote><ul><li>正则序求值: 先把所有函数都展开, 最后统一求值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="number">5</span>)</span><br><span class="line">sum_square(<span class="number">5</span> + <span class="number">1</span>, <span class="number">5</span> * <span class="number">2</span>)</span><br><span class="line">square(<span class="number">5</span> + <span class="number">1</span>) + square(<span class="number">5</span> * <span class="number">2</span>)</span><br><span class="line">(<span class="number">5</span> + <span class="number">1</span>) * (<span class="number">5</span> + <span class="number">1</span>) + (<span class="number">5</span> * <span class="number">2</span>) * (<span class="number">5</span> * <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>应用序求值: 先求值所有参数, 之后再展开函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum_square(<span class="number">6</span>, <span class="number">10</span>)</span><br><span class="line">(<span class="number">6</span> * <span class="number">6</span>) + (<span class="number">10</span> * <span class="number">10</span>)</span><br><span class="line"><span class="number">36</span> + <span class="number">100</span></span><br><span class="line"><span class="number">136</span></span><br></pre></td></tr></table></figure><ol><li><code>Lisp</code>采用应用序求值, 这样可以避免一些重复计算</li><li>在无法使用简单的替换来模拟的函数中, 正则序更加复杂</li><li>但在某些方面, 正则序也可以成为重要工具, 如&quot;无限&quot;数据结构</li></ol><h3 id="1-1-6-条件表达式和谓词">1.1.6 条件表达式和谓词</h3><p><code>if</code> 关键字针对这种 <strong>分情况分析</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (p1):</span><br><span class="line">    e1</span><br><span class="line"><span class="keyword">elif</span> (p2):</span><br><span class="line">    e2</span><br><span class="line"><span class="keyword">elif</span> (p3):</span><br><span class="line">    e3</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    e4</span><br></pre></td></tr></table></figure><p>这些 <code>p1</code>, <code>p2</code> 等被称作<strong>谓词</strong>, 是一个结果为 <code>True</code>(真) 或 <code>False</code>(假) 的表达式<br>流程就是找到第一个结果为真的谓词, 之后执行其后的表达式 <br>基本谓词: <code>&gt;=</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>==</code> <br>复合谓词运算符: <code>and</code>, <code>or</code>, <code>not</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(e1) <span class="keyword">and</span> (e2) <span class="keyword">and</span> ... <span class="keyword">and</span> (en) <span class="comment"># 对所有表达式做 and 操作</span></span><br><span class="line">(e1) <span class="keyword">or</span> (e2) <span class="keyword">or</span> ... <span class="keyword">or</span> (en) <span class="comment"># 对所有表达式做 or 操作</span></span><br><span class="line"><span class="keyword">not</span> (expression) <span class="comment"># 对这个表达式取反</span></span><br></pre></td></tr></table></figure><p><code>and</code> 和 <code>or</code> 都有短路特性, 具体表现为:</p><ol><li>当 <code>and</code> 后某个表达式为 <code>False</code> 时, 后面的表达式不再求值</li><li>当 <code>or</code> 后某个表达式为 <code>True</code> 时, 后面的表达式不再求值</li></ol><h3 id="1-1-7-实例-牛顿法求平方根">1.1.7 实例: 牛顿法求平方根</h3><p>定义平方根函数 $\sqrt x = y, 使得y&gt;=0且 y^2 =x$ \</p><ol><li>说明性描述: 注重是什么</li><li>行动性描述: 注重怎么办</li></ol><p>牛顿法求平方根函数:<br>对 $\sqrt x$ 的值有一个猜测 $y$, 求出 $y$ 和 $\frac{x}{y}$的平均数作为新的猜测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">good_enough</span>(<span class="params">guess, x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(square(guess) - x) &lt; <span class="number">0.001</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">average</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> (a + b) / <span class="number">2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">improve</span>(<span class="params">guess, x</span>):</span><br><span class="line">    <span class="keyword">return</span> average(guess, (x / guess))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sqrt</span>(<span class="params">guess, x</span>):</span><br><span class="line">    <span class="keyword">if</span> (good_enough(guess, x)):</span><br><span class="line">        <span class="keyword">return</span> guess</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> sqrt(improve(guess, x), x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sqrt(<span class="number">1.0</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h3 id="1-1-8-函数作为黑箱抽象">1.1.8 函数作为黑箱抽象</h3><p><strong>函数抽象</strong> 封装一个函数, 调用这个函数的时候只需要知道它能返回什么而不需要知道它的实现细节</p><p>以平方根的计算函数举例:</p><ul><li>一个 <code>sqrt</code> 函数可以分解为 <code>good-enough</code>, <code>improve</code>, <code>average</code>, <code>abs</code> 等函数</li><li>也就是把 <code>sqrt</code> 分解成了可以清楚标明的工作</li><li>在实现 <code>sqrt</code> 的函数中, 不需要考虑这些辅助函数的细节, 只需要相信它们</li></ul><p><strong>局部名</strong>: 函数中形参的名字, 是函数使用者不需要关注的内容</p><ul><li><strong>约束变量</strong> 形参的名字所代表的变量</li><li><strong>自由变量</strong> 不是被约束的变量</li></ul><p>在抽象函数时, 如果对约束变量有任何改变, 这样就会影响外部的函数<br>因为这个变量可能在外部函数中还被用到, 这个内部的函数也就不是&quot;黑箱&quot;</p><p><strong>作用域</strong>: 一个约束变量所能生效的表达式 <br>比如函数主体就是形参的作用域</p><p>在 <code>good-enough</code> 中, <code>guess</code> 和 <code>x</code> 是约束变量, <code>&lt;</code>, <code>abs</code> 等则不是 <br>所以约束变量的名字要避开自由变量的名词, 从而避免发生冲突</p><hr><p>现在 <code>sqrt</code> 函数由一些相互分离的函数定义, 而用户只需要用到 <code>sqrt</code> <br>在构建大型程序时, 过多的辅助函数往往会扰乱视线, 还可能出现重名的情况 <br>所以可以把这些辅助函数局部化, 这就需要内部定义</p><p>注意到所有的辅助函数都在 <code>sqrt</code> 的形参 <code>x</code> 的作用域内, 所以不用来回传 <code>x</code>的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sqrt</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> x * x</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">good_enough</span>(<span class="params">guess</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(square(guess) - x) &lt; <span class="number">0.001</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">average</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">return</span> (a + b) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">improve</span>(<span class="params">guess</span>):</span><br><span class="line">        <span class="keyword">return</span> average(guess, (x / guess))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">guess</span>):</span><br><span class="line">        <span class="keyword">if</span> (good_enough(guess)):</span><br><span class="line">            <span class="keyword">return</span> guess</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(improve(guess))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sqrt(<span class="number">1.0</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>在辅助函数中 <code>x</code> 是自由变量, 由外部传给 <code>x</code> 的实际参数决定 <br>这种方法被称作<strong>词法作用域</strong>, 也叫<strong>静态作用域</strong><br>在定义本函数的环境中寻找 <code>x</code> 在哪里被定义</p><h2 id="1-2-函数及其产生的计算">1.2 函数及其产生的计算</h2><p>本节考察函数所产生计算的顺序和消耗时间空间资源的速率</p><h3 id="1-2-1-线性的递归和迭代">1.2.1 线性的递归和迭代</h3><ol><li><p><strong>递归计算函数</strong>:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>在展开阶段, 递归构造一个<strong>推迟进行</strong>的操作所构成的链条</li><li>在收缩阶段, 实际执行这些运算</li></ul><p>所以解释器要维护那些之后要执行的收缩阶段的轨迹 <br>轨迹的长度与 $n$ 成正比, 所以说这是一个 <strong>线性递归函数</strong></p> <figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">factorial</span> <span class="number">6</span>)</span><br><span class="line">(<span class="name"><span class="built_in">*</span></span> <span class="number">6</span> (<span class="name">factorial</span> <span class="number">5</span>))</span><br><span class="line">(<span class="name"><span class="built_in">*</span></span> <span class="number">6</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">5</span> (<span class="name">factorial</span> <span class="number">4</span>)))</span><br><span class="line">(<span class="name"><span class="built_in">*</span></span> <span class="number">6</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">5</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">4</span> (<span class="name">factorial</span> <span class="number">3</span>))))</span><br><span class="line">(<span class="name"><span class="built_in">*</span></span> <span class="number">6</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">5</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">4</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">3</span> (<span class="name">factorial</span> <span class="number">2</span>)))))</span><br><span class="line">(<span class="name"><span class="built_in">*</span></span> <span class="number">6</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">5</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">4</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">3</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">2</span> (<span class="name">factorial</span> <span class="number">1</span>))))))</span><br><span class="line">(<span class="name"><span class="built_in">*</span></span> <span class="number">6</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">5</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">4</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">3</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">2</span> <span class="number">1</span>)))))</span><br><span class="line">(<span class="name"><span class="built_in">*</span></span> <span class="number">6</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">5</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">4</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">3</span> <span class="number">2</span>))))</span><br><span class="line">(<span class="name"><span class="built_in">*</span></span> <span class="number">6</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">5</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">4</span> <span class="number">6</span>)))</span><br><span class="line">(<span class="name"><span class="built_in">*</span></span> <span class="number">6</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">5</span> <span class="number">24</span>))</span><br><span class="line">(<span class="name"><span class="built_in">*</span></span> <span class="number">6</span> <span class="number">120</span>)</span><br><span class="line"><span class="number">720</span></span><br></pre></td></tr></table></figure></li><li><p><strong>迭代计算函数</strong></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fact</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">count, res</span>):</span><br><span class="line">        <span class="keyword">if</span> (count &gt; n):</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(count + <span class="number">1</span>, res * count)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(<span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>(注意在 <code>python</code> 中不会由有这个迭代的优化, 据说是为了保存递归状态) <br>在这个计算函数中没有任何的展开和收缩, 需要保存的只有 <code>product</code> 和 <code>counter</code> <br>这种可以使用固定状态描述计算函数的就是迭代计算函数 <br>同样, 这也是 <strong>线性迭代函数</strong></p></li></ol><blockquote><p>注意递归函数和递归计算函数并不同, 递归函数是一个语法上的概念 <br>上述的迭代计算函数的具体实现也是采用递归函数</p></blockquote><p>在迭代计算函数中, 形参都提供了计算状态的完整描述, 如果因为某些不可抗力程序终止 <br>那么需要重新唤醒这个程序, 只需要提供两个形参即可 <br>而递归计算函数还有一些隐含的变量并没有显式地保存在程序变量中, 而是由解释器维护 <br>所以递归计算函数的链条越长, 解释器需要保存的信息也越多</p><p>在其他大多数语言中, 即使是迭代计算函数, 只要使用递归函数实现, 那么消耗的空间就是线性的 <br>所以需要借助一些语法糖比如 <code>for</code>, <code>while</code> 才能实现迭代计算函数</p><p>而<code>scheme</code>的解释器实现没有这个缺点, 只要是迭代计算函数, 消耗的空间就是常数级别<br>具有这一特性的实现是 <strong>尾递归</strong> 的</p><h3 id="1-2-2-树形递归">1.2.2 树形递归</h3><p>考虑斐波那契数列的计算, $f(n) = f(n-1)+f(n-2)$ <br>每次计算的时候都要调用两次自身, 画成结构图就是一棵树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>一般来说, 树形递归结构的深度代表空间占用, 节点数代表运算次数(时间占用)</p><p>这种树形递归求$f(n)$ 的节点数正好是$f(n+1)$, 而斐波那契数列的值是成指数增长 <br>所以这种计算的方式效率极低, 可以采用线性迭代计算函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">count, a, b</span>):</span><br><span class="line">        <span class="keyword">if</span> (count &gt; n):</span><br><span class="line">            <span class="keyword">return</span> b</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(count + <span class="number">1</span>, b, a + b)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>总体来说, 树形递归在这个问题上效率较低, 但非常直观 <br>然而在其他的一些问题上, 树形递归不仅直观而且效率很高, 比如前序遍历</p><hr><p>实例: 换零钱<br>将总数为 $a$ 的现金换成硬币可以由以下两种情况</p><ul><li>将总数为 $a$ 的现金换成第一种硬币之外的所有其他硬币的方式的数目</li><li>将总数为 $a-d$ 的现金换成所有种类的硬币的数目<br>两者相加即为答案</li></ul><p>其中分类的标准是有没有使用第一种硬币, 第一组都没有使用, 第二组一定使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to</span>(<span class="params">x</span>):</span><br><span class="line">        tmp = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">25</span>, <span class="number">50</span>]</span><br><span class="line">        <span class="keyword">return</span> tmp[x]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">cur, which</span>):</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (cur &lt; <span class="number">0</span>) <span class="keyword">or</span> (which == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>(cur, which - <span class="number">1</span>) + <span class="built_in">iter</span>(cur - to(which), which)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(a, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>其中冗余计算和斐波那契数列中的一样, 这可以通过记忆化来实现优化</p><h3 id="1-2-3-增长的阶">1.2.3 增长的阶</h3><p><strong>增长的阶</strong> 粗略度量某个函数所需资源的情况 <br>$R(n)$ 表示计算函数在处理 $n$ 规模的问题时所需要的资源量 <br>称 $R(n)$ 具有 $\Theta(f(n))$的增长阶, 其中 $R(n) = k \times f(n)$ 其中 $k$ 为常数</p><p>在线性递归计算函数中 时间需求的增长为 $\Theta(n)$, 空间需求的增长为 $\Theta(n)$ <br>在线性迭代计算函数中 时间需求的增长为 $\Theta(n)$, 空间需求的增长为 $\Theta(1)$ 即常数空间</p><p>由于是粗略的描述, 所以类似 $n^2+3n+1$这样的所需步数仍然是 $\Theta(n^2)$</p><h3 id="1-2-4-求幂">1.2.4 求幂</h3><p>线性求幂 <br>时间 $\Theta(n)$, 空间 $\Theta(n)$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_pow</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> a * my_pow(a, b - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>时间 $\Theta(n)$, 空间 $\Theta(1)$ (<code>scheme</code> 中空间复杂度)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_pow</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">count, res</span>):</span><br><span class="line">        <span class="keyword">if</span> (count == b):</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(count + <span class="number">1</span>, res * a)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(<span class="number">0</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>快速幂: <br>每个整数都可以进行二进制拆分, 基于这样的思想来进行快速幂, 假设底数为 $a$</p><ol><li>如果这个数 $b$ 是偶数, 那么计算它的 $a ^{\frac{b}{2}}$ 的平方</li><li>如果这个数 $b$ 是奇数, 那么计算它的 $a \times a^{b - 1}$</li></ol><p>总体来说问题规模每次缩减一半, 时间空间复杂度都是 $\Theta(logn)$ 的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fast_pow</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> (b % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> square(<span class="built_in">pow</span>(a, b // <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(a, b - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="1-2-5-最大公约数">1.2.5 最大公约数</h3><p>欧几里得算法 $GCD(a, b) = GCD(b, a % b)$ <br>当 $b$ 为 0的时候返回 $a$ 为最大公约数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">GCD</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> GCD(b, a % b)</span><br></pre></td></tr></table></figure><p>拉梅定理: $GCD$ 递归了 k 层, 这对数中较小的数一定大于第 k 个斐波那契数列 <br>据此估计 $GCD$ 时间复杂度 $\Theta(logn)$ 空间复杂度 $\Theta(1)$</p><h3 id="1-2-6-素数检测">1.2.6 素数检测</h3><p><strong>寻找因子</strong>: 法一 $\Theta(\sqrt n)$, 法二 $\Theta(logn)$</p><ol><li><p>结论: 只需要寻找 $\sqrt n$ 个因子就可以找出全部因子 <br>证明: 如果 $d$ 是 $n$ 的因子, $n / d$ 也必然是 $n$ 的因子, 而两者不可能同时大于 $\sqrt n$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">min_divisor</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">divide</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> n % x == <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">cur</span>):</span><br><span class="line">        <span class="keyword">if</span> (square(cur) &gt; n):</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        <span class="keyword">elif</span> (divide(cur)):</span><br><span class="line">            <span class="keyword">return</span> cur</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(cur + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> min_divisor(x) == x</span><br></pre></td></tr></table></figure></li><li><p>费马检查</p><blockquote><p>费马小定理: 如果 $n$ 是一个素数, $a$ 是小于 $n$ 的任意正整数, $a$ 的 $n$ 次方与 $a$ 模 $n$ 同余</p></blockquote><p>费马检查就是根据费马小定理而来的一个随机算法</p><ol><li>对于给定的整数 $n$, 随机任取一个 $a&lt;n$ 并计算出 $a^n$ 模 $n$ 的余数</li><li>如果得到的结果不等于 $a$, 那它就一定不是素数, 如果它是 $a$, 那么它由很大可能是素数</li><li>多取几个 $a$ 的值, 这样结果的可信度就越来越高</li></ol><blockquote><p>然则这种检测方式不一定准确, 满足这个性质的非素数称作 $Carmicheal$ 数 <br>但在很大的素数面前, 碰到$Carmicheal$ 数的概率极低极低</p></blockquote> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pow</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> % p</span><br><span class="line">        <span class="keyword">elif</span> (b % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> square(<span class="built_in">pow</span>(a, b // <span class="number">2</span>)) % p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> a * <span class="built_in">pow</span>(a, b - <span class="number">1</span>) % p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(x, p) == x</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">times</span>):</span><br><span class="line">        <span class="keyword">if</span> (times == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> (<span class="keyword">not</span> check(random.randint(<span class="number">1</span>, p - <span class="number">1</span>))):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> calc(times - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> calc(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li><li><p>$Miller-Robin$ 素数检测</p><ul><li>根据费马小定理变形: $a^{n-1}\equiv 1(mod ; n)$</li><li>根据二次探测定理: 对于素数 $p$, 如果 $x^2 \equiv 1 (mod ; p)$, 小于 $p$ 的解有两个, $1$ 和$p-1$<br>$x^2 - 1 \equiv 0 (mod ; p)$ 即 $(x+1)(x-1)\equiv 0 (mod ; p)$ <br>因为 $p$ 为素数, 所以要么 $(x+1)(x-1) =0$ 要么 $(x+1)(x-1)$ 是 $p$ 的倍数 <br>对于第一种情况 $x=1$, 对于第二种情况 $x = p-1$ , 注意要求解小于 $p$</li></ul><p>具体检测步骤如下:</p><ol><li>在计算快速幂的时候, 如果当前指数为偶数, 那么检测非平凡平方根</li><li>由二次探测定理, 设平方之前的数为 $x$, 平方之后的数为 $x^2$</li><li>如果 $x^2 \equiv 1 (mod ; p)$, 但是 $x \not \equiv (1或p-1) (mod ; p)$ 则 $p$ 一定不是素数</li><li>此时的 $x$ 就是书中所说的非平凡平方根</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">miller_robin</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">nontrivial_square_root</span>(<span class="params">x</span>):</span><br><span class="line">        tmp = square(x) % p</span><br><span class="line">        <span class="keyword">if</span> ((x != <span class="number">1</span>) <span class="keyword">and</span> (x != p - <span class="number">1</span>) <span class="keyword">and</span> (tmp == <span class="number">1</span>)):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pow</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> (b % <span class="number">2</span> == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> a * <span class="built_in">pow</span>(a, b - <span class="number">1</span>) % p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> nontrivial_square_root(<span class="built_in">pow</span>(a, b // <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(random.randint(<span class="number">1</span>, p - <span class="number">1</span>), p - <span class="number">1</span>) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">times</span>):</span><br><span class="line">        <span class="keyword">if</span> (times == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> (test()):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(times - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(<span class="number">7</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="1-3-用高阶函数做抽象">1.3 用高阶函数做抽象</h2><p>函数的参数可以是另一个函数, 这类操作函数的函数称作高阶函数</p><h3 id="1-3-1-函数作为参数">1.3.1 函数作为参数</h3><p>书中所说的范围内整数和, 范围内整数立方和, 计算 $\pi$ 序列三个函数都有相同的模式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (&lt;term&gt;(a) + <span class="built_in">sum</span>(&lt;<span class="built_in">next</span>&gt;(a), b))</span><br></pre></td></tr></table></figure><p>与数学中的 $\Sigma$ 类似, 这个高阶函数表达的是求和的概念</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">term, a, to, b</span>):</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (term(a) + <span class="built_in">sum</span>(term, to(a), to, b))</span><br></pre></td></tr></table></figure><p>这才是完整的高阶函数, 使用实例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">10000000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cube</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x * x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">identity</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inc</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pi_sum</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pi_term</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> / (x * (x + <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pi_to</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> x + <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">8</span> * <span class="built_in">sum</span>(pi_term, a, pi_to, b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(cube, <span class="number">1</span>, inc, <span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(identity, <span class="number">1</span>, inc, <span class="number">10</span>)) </span><br><span class="line"><span class="built_in">print</span>(pi_sum(<span class="number">1</span>, <span class="number">10000</span>))</span><br></pre></td></tr></table></figure><h3 id="1-3-2-用-Lambda-构造过程">1.3.2 用 $Lambda$ 构造过程</h3><p>$lambda$ 就是所谓匿名函数, 基本语法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> &lt;形参列表&gt;: &lt;函数体&gt;</span><br></pre></td></tr></table></figure><p>$lambda$ 的优势在于, 把函数当作参数传入的时候, 不需要给函数命名, 从而省去麻烦 <br>$lambda$ 也可以当作运算符使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>((<span class="keyword">lambda</span> x: x + <span class="number">1</span>)(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h3 id="1-3-3-过程作为一般性的方法">1.3.3 过程作为一般性的方法</h3><ol><li>区间这般寻找方程的根: 主要是根据零点存在定理的二分法 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sin</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">func, a, b</span>):</span><br><span class="line">    mid = (a + b) / <span class="number">2</span></span><br><span class="line">    tmp = func(mid)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(a - b) &lt; <span class="number">0.001</span>):</span><br><span class="line">        <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">elif</span> (tmp &lt; <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> search(func, mid, b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> search(func, a, mid)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_point</span>(<span class="params">func, a, b</span>):</span><br><span class="line">    x, y = func(a), func(b)</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span> <span class="keyword">and</span> y &gt; <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> search(func, a, b)</span><br><span class="line">    <span class="keyword">elif</span> (x &gt; <span class="number">0</span> <span class="keyword">and</span> y &lt; <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> search(func, b, a)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Error&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(get_point(sin, <span class="number">2.0</span>, <span class="number">4.0</span>))</span><br><span class="line"><span class="built_in">print</span>(get_point(<span class="keyword">lambda</span> x: x * x * x - <span class="number">2</span> * x - <span class="number">3</span>, <span class="number">1.0</span>, <span class="number">2.0</span>))</span><br></pre></td></tr></table></figure></li><li>寻找函数的不动点 <br>如果 $x$ 满足 $f(x) = x$ 则 $x$ 为函数 $f$ 的一个不动点 <br>可以对某一个随机猜测不断应用 $f$, 等到两次结果差距不大时, 就可以找到近似的不动点 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> cos, sin</span><br><span class="line"></span><br><span class="line">tolerance = <span class="number">1e-5</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fixed_point</span>(<span class="params">func, first_guess</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_enough</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">abs</span>(a - b) &lt; tolerance)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">val</span>):</span><br><span class="line">        next_val = func(val)</span><br><span class="line">        <span class="keyword">if</span> (close_enough(val, next_val)):</span><br><span class="line">            <span class="keyword">return</span> next_val</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> calc(next_val)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> calc(first_guess)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fixed_point(cos, <span class="number">1.0</span>))</span><br><span class="line"><span class="built_in">print</span>(fixed_point(<span class="keyword">lambda</span> y: sin(y) + cos(y), <span class="number">1.0</span>))</span><br></pre></td></tr></table></figure>类似找平方根的过程, 令 $f(y) = \frac x y$, $f(y)=y$ 即 $x = y^2$ <br>但是直接使用上述程序会陷入死循环, 因为<br>$y_2 = \frac{x}{y_1}$, $y_3 = \frac{x}{\frac{x}{y_1}} = y_1$<br>解决上述问题的一个方法叫做平均阻尼, 不让有关的猜测变化得过于剧烈 <br>因为实际答案总是在 $y$ 和 $\frac x y$ 之间, 所以取平均值, 求 $f(y) = \frac{1}{2}(y + \frac x y)$ 的不动点 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_sqrt</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> fixed_point(<span class="keyword">lambda</span> y: (y + x / y) / <span class="number">2</span>, <span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_sqrt(<span class="number">11</span>))</span><br></pre></td></tr></table></figure></li></ol><h3 id="1-3-4-函数作为返回值">1.3.4 函数作为返回值</h3><p>可以创建返回值为函数的函数</p><p>平均阻尼函数以及重做平方根过程:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">average_damp</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">lambda</span> x: (x + func(x)) / <span class="number">2</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mysqrt</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> fixed_point(average_damp(<span class="keyword">lambda</span> y: x / y), <span class="number">1.0</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cube_root</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> fixed_point(average_damp(<span class="keyword">lambda</span> y: x / (y * y)), <span class="number">1.0</span>)</span><br></pre></td></tr></table></figure><p><strong>牛顿法</strong>: <br>如果 $g(x)$ 是一个可微分函数, 那么 $g(x)=0$ 的一个解就是 $f(x)$ 的不动点 <br>其中 $f(x) = x - \frac{f(x)}{g’(x)}$,  $g’(x) = \frac{g(x+dx)-g(x)}{dx}$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dx = <span class="number">0.00001</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deriv</span>(<span class="params">g</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: (g(x + dx) - g(x)) / dx</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">newton_transform</span>(<span class="params">g</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x - g(x) / deriv(g)(x)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">newton_method</span>(<span class="params">g, guess</span>):</span><br><span class="line">    <span class="keyword">return</span> fixed_point(newton_transform(g), guess)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sqrt</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> newton_method(<span class="keyword">lambda</span> y: y * y - x, <span class="number">1.0</span>)</span><br></pre></td></tr></table></figure><p><strong>抽象和第一级过程</strong></p><p>抽象出平均阻尼和牛顿法的一般过程并重新定义 <code>sqrt</code> 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fixed_point_of_transform</span>(<span class="params">g, transform, guess</span>):</span><br><span class="line">    <span class="keyword">return</span> fixed_point(transform(g), guess)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sqrt1</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> fixed_point_of_transform(<span class="keyword">lambda</span> y: x / y, average_damp, <span class="number">1.0</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sqrt2</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> fixed_point_of_transform(<span class="keyword">lambda</span> y: y * y - x,</span><br><span class="line">                                    newton_transform, <span class="number">1.0</span>)</span><br></pre></td></tr></table></figure><p>在程序设计语言中带有最少限制的元素被称为具有第一级的状态, 特权包括</p><ol><li>可以绑定到变量上</li><li>可以提供给过程作为参数</li><li>可以由过程作为结果返回</li><li>可以包含在数据结构中</li></ol><h1>练习</h1><h2 id="1-1">1.1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="comment">#10</span></span><br><span class="line"><span class="number">3</span> + <span class="number">5</span> + <span class="number">4</span> <span class="comment"># 12</span></span><br><span class="line"><span class="number">9</span> - <span class="number">1</span> <span class="comment">#8</span></span><br><span class="line"><span class="number">6</span> / <span class="number">2</span> <span class="comment">#3</span></span><br><span class="line">(<span class="number">2</span> * <span class="number">4</span>) + (<span class="number">4</span> - <span class="number">6</span>) <span class="comment">#6</span></span><br><span class="line">a = <span class="number">3</span></span><br><span class="line">b = a + <span class="number">1</span></span><br><span class="line">a + b + (a * b) <span class="comment"># 19</span></span><br><span class="line">a == b <span class="comment"># False</span></span><br><span class="line"><span class="keyword">if</span> ((b &gt; a) <span class="keyword">and</span> (b &lt; (a * b))):</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> a <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">4</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">6</span></span><br><span class="line"><span class="keyword">elif</span> (b == <span class="number">4</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">6</span> + <span class="number">7</span> + a</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">25</span> <span class="comment">#16</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> + (b <span class="keyword">if</span> (b &gt; a) <span class="keyword">else</span> a) <span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> (a &gt; b):</span><br><span class="line">    x = a</span><br><span class="line"><span class="keyword">elif</span> (a &lt; b):</span><br><span class="line">    x = b</span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    x = -<span class="number">1</span></span><br><span class="line">x * (a + <span class="number">1</span>) <span class="comment">#16</span></span><br></pre></td></tr></table></figure><h2 id="1-2">1.2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">5</span> + <span class="number">4</span> + (<span class="number">2</span> - (<span class="number">3</span> - (<span class="number">6</span> + <span class="number">4</span> / <span class="number">5</span>)))) / (<span class="number">3</span> * (<span class="number">6</span> - <span class="number">2</span>) * (<span class="number">2</span> - <span class="number">7</span>))</span><br></pre></td></tr></table></figure><h2 id="1-3">1.3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">process</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="keyword">if</span> (a &lt;= b) <span class="keyword">and</span> (a &lt;= c):</span><br><span class="line">        <span class="keyword">return</span> b + c</span><br><span class="line">    <span class="keyword">elif</span> (b &lt;= a) <span class="keyword">and</span> (b &lt;= c):</span><br><span class="line">        <span class="keyword">return</span> a + c</span><br><span class="line">    <span class="keyword">elif</span> (c &lt;= a) <span class="keyword">and</span> (c &lt;= b):</span><br><span class="line">        <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><h2 id="1-4">1.4</h2><p>函数行为: <code>a</code> + (<code>b</code> 的绝对值) <br>如果 <code>b &gt; 0</code> 操作符为 <code>+</code> <br>如果 <code>b &lt; 0</code> 操作符为 <code>-</code></p><h2 id="1-5">1.5</h2><ol><li>正则序:</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 (p) 这里无限展开, 发生错误</span></span><br></pre></td></tr></table></figure><ol start="2"><li>应用序</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="comment"># 不计算 (p) 的结果, 因为谓词为真</span></span><br></pre></td></tr></table></figure><h2 id="1-6">1.6</h2><p>结果是死循环, <code>scheme</code> 以应用序求值, 对于 <code>new-if</code> 这个函数 <br>需要求出实参的每一个值, 所以就会陷入无限递归中, 失去了 <code>if</code> 的短路特性</p><h2 id="1-7">1.7</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">new_good_enough</span>(<span class="params">last, guess, x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(last / guess - <span class="number">1</span>) &lt; <span class="number">0.0001</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sqrt</span>(<span class="params">last, guess, x</span>):</span><br><span class="line">    <span class="keyword">if</span> (new_good_enough(last, guess, x)):</span><br><span class="line">        <span class="keyword">return</span> guess</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> sqrt(guess, improve(guess, x), x)</span><br></pre></td></tr></table></figure><h2 id="1-8">1.8</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">new_improve</span>(<span class="params">guess, x</span>):</span><br><span class="line">    <span class="keyword">return</span> (x / square(guess) + <span class="number">2</span> * guess) / <span class="number">3.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">last, guess, x</span>):</span><br><span class="line">    <span class="keyword">if</span> (new_good_enough(last, guess, x)):</span><br><span class="line">        <span class="keyword">return</span> guess</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> calc(guess, new_improve(guess, x), x)</span><br></pre></td></tr></table></figure><h2 id="1-9">1.9</h2><p>第一个: 递归计算函数</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">+</span></span> <span class="number">4</span> <span class="number">5</span>)</span><br><span class="line">(<span class="name">inc</span> (<span class="name"><span class="built_in">+</span></span> <span class="number">3</span> <span class="number">5</span>))</span><br><span class="line">(<span class="name">inc</span> (<span class="name">inc</span> (<span class="name"><span class="built_in">+</span></span> <span class="number">2</span> <span class="number">5</span>)))</span><br><span class="line">(<span class="name">inc</span> (<span class="name">inc</span> (<span class="name">inc</span> (<span class="name"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">5</span>))))</span><br><span class="line">(<span class="name">inc</span> (<span class="name">inc</span> (<span class="name">inc</span> (<span class="name">inc</span> (<span class="name"><span class="built_in">+</span></span> <span class="number">0</span> <span class="number">5</span>)))))</span><br><span class="line">(<span class="name">inc</span> (<span class="name">inc</span> (<span class="name">inc</span> (<span class="name">inc</span> <span class="number">5</span>))))</span><br><span class="line">(<span class="name">inc</span> (<span class="name">inc</span> (<span class="name">inc</span> <span class="number">6</span>)))</span><br><span class="line">(<span class="name">inc</span> (<span class="name">inc</span> <span class="number">7</span>))</span><br><span class="line">(<span class="name">inc</span> <span class="number">8</span>)</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p>第二个: 迭代计算函数</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">+</span></span> <span class="number">4</span> <span class="number">5</span>)</span><br><span class="line">(<span class="name"><span class="built_in">+</span></span> <span class="number">3</span> <span class="number">6</span>)</span><br><span class="line">(<span class="name"><span class="built_in">+</span></span> <span class="number">2</span> <span class="number">7</span>)</span><br><span class="line">(<span class="name"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">8</span>)</span><br><span class="line">(<span class="name"><span class="built_in">+</span></span> <span class="number">0</span> <span class="number">9</span>)</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h2 id="1-10">1.10</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A(<span class="number">1</span>, <span class="number">10</span>) <span class="comment"># 1024</span></span><br><span class="line">A(<span class="number">2</span>, <span class="number">4</span>) <span class="comment"># 65536</span></span><br><span class="line">A(<span class="number">3</span>, <span class="number">3</span>) <span class="comment"># 65536</span></span><br></pre></td></tr></table></figure><p>$f(x)=2x$ <br>$g(x)=2^n$ <br>$h(x)=2\uparrow\uparrow n$</p><h2 id="1-11">1.11</h2><p>递归</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">a, b, c</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> * a + <span class="number">2</span> * b + c</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> calc(f(n - <span class="number">3</span>), f(n - <span class="number">2</span>), f(n - <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>迭代</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">a, b, c, count</span>):</span><br><span class="line">        <span class="keyword">if</span> (count == n):</span><br><span class="line">            <span class="keyword">return</span> c</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>(b, c, calc(a, b, c), count + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> n <span class="keyword">if</span> (n &lt; <span class="number">3</span>) <span class="keyword">else</span> <span class="built_in">iter</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="1-12">1.12</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pascal</span>(<span class="params">row, col</span>):</span><br><span class="line">    <span class="keyword">if</span> ((row == col) <span class="keyword">or</span> (col == <span class="number">0</span>)):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> pascal(row - <span class="number">1</span>, col) + pascal(row - <span class="number">1</span>, col - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="1-13">1.13</h2><p>$$<br>\begin{align}<br>&amp; \gamma = \frac{1 - \sqrt 5}{2}, \phi =\frac{1 + \sqrt 5}{2} 为方程 x^2-x-1=0两根 \\<br>&amp; 所以 \phi^2 = \phi + 1, \gamma^2 = \gamma + 1 \\<br>&amp; \phi ^n = \phi^{n-2} \times\ \phi^2 =\phi^{n-2}(\phi+1)=\phi^{n-1}+\phi^{n-2}, \gamma 同理 \\<br>&amp; f(0) = \frac{\phi^0-\gamma^0}{\sqrt5}, f(1)=\frac{\phi^1-\gamma^1}{\sqrt5} \\<br>&amp; f(n)=f(n-1)+f(n-2) 和 \gamma, \phi 的递推公式相同, f(n) = \frac{\phi^n-\gamma^n}{\sqrt 5} \\<br>&amp; \because \lvert \frac{\gamma}{\sqrt5} \rvert &lt; \frac 1 2 ; \therefore \lvert \frac{\gamma^n}{\sqrt5} \rvert &lt;\frac 12 \\<br>&amp; f(n) = \frac{\phi^n}{\sqrt5} - \frac{\gamma^n}{\sqrt5},  得证f(n) 是距离\frac{\phi^n}{\sqrt5} 最近的整数<br>\end{align}<br>$$</p><h2 id="1-14">1.14</h2><p><img src="https://github.com/lzlcs/image-hosting/raw/master/QQ%E6%88%AA%E5%9B%BE20230703174405.47ncpxb1kgc0.webp" alt="img"><br>空间 $\Theta(n)$ <br>时间 <a href="https://sicp-solutions.net/post/sicp-solution-exercise-1-14/">$\Theta(n^5$)</a></p><h2 id="1-15">1.15</h2><ol><li>5次, 因为 $0.1 \times 3^5$ 才能大于 $12.15$</li><li>每次问题规模缩小三分之一, 而且为递归计算函数, 空间时间都是 $\Theta(logn)$</li></ol><h2 id="1-16">1.16</h2><p>二进制分割, $2^11 = 2^1 \times 2^2 \times 2^8$  <br><code>cur</code> 保存 2 的几次幂, 如果 <code>count</code> 是奇数就乘到答案里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fast_pow</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">res, cur, count</span>):</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">elif</span> (count % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(res, cur * cur, count / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(res * cur, cur, count - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(<span class="number">1</span>, a, b)</span><br></pre></td></tr></table></figure><h2 id="1-17">1.17</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">double</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x + x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">halve</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x / <span class="number">2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> (b % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> mul(double(a), halve(b))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> a + mul(a, b - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="1-18">1.18</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">res, cur, count</span>):</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">elif</span> (count % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(res, double(cur), halve(count))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(res + cur, cur, count - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(<span class="number">0</span>, a, b)</span><br></pre></td></tr></table></figure><h2 id="1-19">1.19</h2><p>基于矩阵乘法的矩阵快速幂求斐波那契数列</p><p>$$<br>\begin{align}<br>&amp; a \rightarrow (bp + a(p + q)) \rightarrow b(2pq+p^2) + a(p^2+q^2+2pq+p^2) \\<br>&amp; b \rightarrow bp + aq \rightarrow b(p^2+q^2) + a(2pq+q^2)<br>\end{align}<br>$$<br>所以 $p’ = p^2+q^2$, $q’= 2pq+q^2$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">a, b, p, q, count</span>):</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> b</span><br><span class="line">        <span class="keyword">elif</span> (count % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(a, b, (p * p + q * q), (<span class="number">2</span> * p * q + q * q), count / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(b * q + a * q + a * p, </span><br><span class="line">                        b * p + a * q, p, q, count - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, n)</span><br></pre></td></tr></table></figure><h2 id="1-20">1.20</h2><p>正则序展开过长, 省略: 共18次 <code>remainder</code> <br>应用序展开: 共4次 <code>remainder</code></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">GCD</span> <span class="number">206</span> <span class="number">40</span>)</span><br><span class="line">(<span class="name">GCD</span> <span class="number">40</span> <span class="number">6</span>)</span><br><span class="line">(<span class="name">GDD</span> <span class="number">6</span> <span class="number">4</span>)</span><br><span class="line">(<span class="name">GCD</span> <span class="number">4</span> <span class="number">2</span>)</span><br><span class="line">(<span class="name">GCD</span> <span class="number">2</span> <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="1-21">1.21</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">199</span></span><br><span class="line"><span class="number">1999</span></span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><h2 id="1-22">1.22</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">x = <span class="number">13</span> </span><br><span class="line">l, r = fast_pow(<span class="number">10</span>, x), fast_pow(<span class="number">10</span>, x + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">starttime = time.time() </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l, r):</span><br><span class="line">    <span class="keyword">if</span> (is_prime_simple(i)):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">endtime = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;time: &quot;</span>, (endtime - starttime))</span><br></pre></td></tr></table></figure><p>在 $10^{11} 到 10^{12}$ 寻找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100000000003</span></span><br><span class="line">time:  <span class="number">0.1265561580657959</span></span><br></pre></td></tr></table></figure><p>在 $10^{12} 到 10^{13}$ 寻找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1000000000039</span></span><br><span class="line">time:  <span class="number">0.41858363151550293</span></span><br></pre></td></tr></table></figure><p>在 $10^{13} 到 10^{14}$ 寻找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10000000000037</span></span><br><span class="line">time:  <span class="number">1.2202045917510986</span></span><br></pre></td></tr></table></figure><p>总体上符合 $\sqrt 10$的规律</p><h2 id="1-23">1.23</h2><p>改 <code>next</code> 函数之后:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> n + <span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100000000003</span></span><br><span class="line">time:  <span class="number">0.07922077178955078</span></span><br><span class="line"><span class="number">1000000000039</span></span><br><span class="line">time:  <span class="number">0.26198792457580566</span></span><br><span class="line"><span class="number">10000000000037</span></span><br><span class="line">time:  <span class="number">0.6970314979553223</span></span><br></pre></td></tr></table></figure><h2 id="1-24">1.24</h2><p>使用新的素数检测之后, 检测 100 个素数的平均时间:</p><p>$10^{100}$<br>time:  0.00022767770169961331 <br>$10^{200}$<br>time:  0.0010467009110884233 <br>$10^{300}$<br>time:  0.002386471237799134 <br>$10^{400}$<br>time:  0.005082491672400272 <br>$10^{500}$<br>time:  0.00900224724201241 <br>$10^{600}$<br>time:  0.014897625855725221 <br>$10^{700}$<br>time:  0.023792396892200817</p><p>不符合预期的结果可能因为系统内部自身调度的原因</p><h2 id="1-25">1.25</h2><p>不能, 在最后一起取模的话, 函数内部计算数值过大, 时间复杂度过高</p><h2 id="1-26">1.26</h2><p>他使用这种是树形递归, 每层节点数是上一层的二倍</p><p>一共有 $logn$ 层, 节点数 1 2 4 …, 根据等比数列求和公式可得复杂度 $\Theta(n)$</p><h2 id="1-27">1.27</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(<span class="number">1e6</span>)):</span><br><span class="line">    <span class="keyword">if</span> (is_prime_simple(x) != is_prime(x)):</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p>10万之内的 $Carmicheal$ 数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">561</span><br><span class="line">1105</span><br><span class="line">1729</span><br><span class="line">2465</span><br><span class="line">2821</span><br><span class="line">6601</span><br><span class="line">8911</span><br><span class="line">10585</span><br><span class="line">15841</span><br><span class="line">29341</span><br><span class="line">41041</span><br><span class="line">46657</span><br><span class="line">52633</span><br><span class="line">62745</span><br><span class="line">63973</span><br><span class="line">75361</span><br></pre></td></tr></table></figure><h2 id="1-28">1.28</h2><p>$Miller-Robin$ 放在正文了</p><h2 id="1-29">1.29</h2><p>$Simpson$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">simpson</span>(<span class="params">f, a, b, n</span>):</span><br><span class="line">    h = (b - a) / n</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">k</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">or</span> (x == n):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> (x % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">y</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> f(a + x * h)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">term</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> k(x) * y(x)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inc</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h * <span class="built_in">sum</span>(term, <span class="number">0.0</span>, inc, n) / <span class="number">3.0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(simpson(cube, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">100</span>))</span><br><span class="line"><span class="built_in">print</span>(simpson(cube, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">1000</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0.24999999999999992</span><br><span class="line">0.2500000000000003</span><br></pre></td></tr></table></figure><p>普通积分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0.249999875000001</span><br><span class="line">0.24999999874993412</span><br></pre></td></tr></table></figure><h2 id="1-30">1.30</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">term, a, to, b</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">count, res</span>):</span><br><span class="line">        <span class="keyword">if</span> (count &gt; b):</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(to(count), res + term(count))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(a, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="1-31">1.31</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">product</span>(<span class="params">f, a, to, b</span>):</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> f(a) * product(f, to(a), to, b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">product_new</span>(<span class="params">f, a, to, b</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">count, res</span>):</span><br><span class="line">        <span class="keyword">if</span> (count &gt; b):</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(to(count), res * f(count))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(a, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">identity</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inc</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> product(identity, <span class="number">1</span>, inc, n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pi</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pi_term</span>(<span class="params">f, g, x</span>):</span><br><span class="line">        <span class="keyword">if</span> (x % <span class="number">2</span> == f):</span><br><span class="line">            <span class="keyword">return</span> x + <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> (x % <span class="number">2</span> == g):</span><br><span class="line">            <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">upper_term</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> pi_term(<span class="number">0</span>, <span class="number">1</span>, x)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lower_term</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> pi_term(<span class="number">1</span>, <span class="number">0</span>, x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span> * product_new(upper_term, <span class="number">1</span>, inc, n) / product_new(lower_term, <span class="number">1</span>, inc, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorial(<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(get_pi(<span class="number">10000</span>))</span><br></pre></td></tr></table></figure><h2 id="1-32">1.32</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">accumulate</span>(<span class="params">opt, init, term, a, to, b</span>):</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b):</span><br><span class="line">        <span class="keyword">return</span> init</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> opt(term(a), accumulate(opt, init, term, to(a), to, b))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">accumulate_new</span>(<span class="params">opt, init, term, a, to, b</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">count, res</span>):</span><br><span class="line">        <span class="keyword">if</span> (count &gt; b):</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iter</span>(to(count), opt(res, term(count)))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(init)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(accumulate(add, <span class="number">0</span>, cube, <span class="number">1</span>, inc, <span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(accumulate(mul, <span class="number">1</span>, identity, <span class="number">1</span>, inc, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><h2 id="1-33">1.33</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">filter_accumulate</span>(<span class="params">opt, init, term, filt, a, to, b</span>):</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b):</span><br><span class="line">        <span class="keyword">return</span> init</span><br><span class="line">    tmp = filter_accumulate(opt, init, term, filt, to(a), to, b)</span><br><span class="line">    <span class="keyword">if</span> (filt(a)):</span><br><span class="line">        <span class="keyword">return</span> opt(a, tmp)</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">q_a</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> filter_accumulate(add, <span class="number">0</span>, identity, miller_robin, a, inc, b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GCD</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> GCD(b, a % b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">q_b</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">filt</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> GCD(x, n) == <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> filter_accumulate(mul, <span class="number">1</span>, identity, filt, <span class="number">1</span>, inc, n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="1-34">1.34</h2><p>发生错误 <br>展开之后是 <code>(2 2)</code></p><h2 id="1-35">1.35</h2><p>$\phi$ 是方程 $x^2 - x - 1 =0$ 的根, 变形一下可得 $f(x) = 1 + \frac 1 x$ 的不动点是 $\phi$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(fixed_point(<span class="keyword">lambda</span> x: <span class="number">1</span> + <span class="number">1</span> / x, <span class="number">1.0</span>))</span><br></pre></td></tr></table></figure><h2 id="1-36">1.36</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">damp</span>():</span><br><span class="line">    <span class="built_in">print</span>(fixed_point(<span class="keyword">lambda</span> x: (log(<span class="number">1000</span>) / log(x) + x) / <span class="number">2</span>, <span class="number">2.0</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fixed_point(<span class="keyword">lambda</span> x: log(<span class="number">1000</span>) / log(x), <span class="number">2.0</span>)) ;<span class="number">34</span> 步</span><br><span class="line"><span class="built_in">print</span>(damp())                                         ;<span class="number">9</span> 步</span><br></pre></td></tr></table></figure><h2 id="1-37">1.37</h2><p>至少要 11 次才能到 $0.618$ 的精度 <br>递归</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cont_frac</span>(<span class="params">n, d, k</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">count</span>):</span><br><span class="line">        <span class="keyword">if</span> (count == k):</span><br><span class="line">            <span class="keyword">return</span> n(k) / d(k)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> n(count) / (d(count) + calc(count + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> calc(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cont_frac(<span class="keyword">lambda</span> x: <span class="number">1.0</span>, <span class="keyword">lambda</span> x: <span class="number">1.0</span>, <span class="number">11</span>))</span><br></pre></td></tr></table></figure><p>迭代</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def cont_frac(n, d, k):</span><br><span class="line">    def calc(count, res):</span><br><span class="line">        if (count == 0):</span><br><span class="line">            return res</span><br><span class="line">        else:</span><br><span class="line">            return calc(count - 1, n(count) / (d(count) + res))</span><br><span class="line">    return calc(k, 0)</span><br></pre></td></tr></table></figure><h2 id="1-38">1.38</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">2</span> + cont_frac(<span class="keyword">lambda</span> x: <span class="number">1.0</span>, </span><br><span class="line">                    <span class="keyword">lambda</span> x: <span class="number">2</span> * (x + <span class="number">1</span>) / <span class="number">3</span> <span class="keyword">if</span> (x % <span class="number">3</span> == <span class="number">2</span>) <span class="keyword">else</span> <span class="number">1.0</span>, <span class="number">100</span>))</span><br></pre></td></tr></table></figure><h2 id="1-39">1.39</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">tan_cf</span> (x, k):</span><br><span class="line">    <span class="keyword">return</span> cont_frac(<span class="keyword">lambda</span> b: x <span class="keyword">if</span> (b == <span class="number">1</span>) <span class="keyword">else</span> -x * x,</span><br><span class="line">                     <span class="keyword">lambda</span> b: <span class="number">2</span> * b - <span class="number">1</span>, k)</span><br></pre></td></tr></table></figure><h2 id="1-40">1.40</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cubic</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x * x * x + a * x * x + b * x + c</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(newton_method(cubic(<span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>), <span class="number">1.0</span>))</span><br></pre></td></tr></table></figure><h2 id="1-41">1.41</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">double</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: func(func(x))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inc</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(double(double(double(inc)))(<span class="number">5</span>)) ;<span class="number">13</span></span><br></pre></td></tr></table></figure><h2 id="1-42">1.42</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">inc</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compose</span>(<span class="params">f, g</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: f(g(x))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(compose(square, inc)(<span class="number">6</span>))</span><br></pre></td></tr></table></figure><h2 id="1-43">1.43</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compose</span>(<span class="params">f, g</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: f(g(x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">repeat</span>(<span class="params">f, n</span>):</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> compose(f, repeat(f, n - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(repeat(square, <span class="number">2</span>)(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h2 id="1-44">1.44</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">smooth</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: (f(x) + f(x - dx) + f(x + dx)) / <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">smooth_n</span>(<span class="params">f, n</span>):</span><br><span class="line">    <span class="keyword">return</span> repeat(smooth, n)(f)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(smooth(square)(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(smooth_n(square, <span class="number">10</span>)(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h2 id="1-45">1.45</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">n_root</span>(<span class="params">x, n</span>):</span><br><span class="line">    <span class="keyword">return</span> fixed_point_of_transform(<span class="keyword">lambda</span> y: x / <span class="built_in">pow</span>(y, n - <span class="number">1</span>),</span><br><span class="line">                                    repeat(average_damp, <span class="built_in">int</span>(math.log2(n))), <span class="number">1.0</span>)</span><br></pre></td></tr></table></figure><p>由实验可知, 平均的阻尼次数是 $\lfloor log_2^n \rfloor$</p><h2 id="1-46">1.46</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">interative_improve</span>(<span class="params">good_enough, improve</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">guess</span>):</span><br><span class="line">        new_guess = improve(guess)</span><br><span class="line">        <span class="keyword">if</span> (good_enough(guess, new_guess)):</span><br><span class="line">            <span class="keyword">return</span> guess</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> calc(new_guess)</span><br><span class="line">    <span class="keyword">return</span> calc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sqrt</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> interative_improve(<span class="keyword">lambda</span> a, b: <span class="built_in">abs</span>(a - b) &lt; tolerance,</span><br><span class="line">                              average_damp(<span class="keyword">lambda</span> y: x / y))(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fixed_point</span>(<span class="params">func, first_guess</span>):</span><br><span class="line">    <span class="keyword">return</span> interative_improve(<span class="keyword">lambda</span> a, b: <span class="built_in">abs</span>(a - b) &lt; tolerance,</span><br><span class="line">                              func)(first_guess)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sqrt(<span class="number">120</span>))</span><br><span class="line"><span class="built_in">print</span>(fixed_point(cos, <span class="number">1.0</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scheme </tag>
            
            <tag> Python </tag>
            
            <tag> SICP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SICP 学习笔记 (第二章)</title>
      <link href="/2023/07/02/2sicp/"/>
      <url>/2023/07/02/2sicp/</url>
      
        <content type="html"><![CDATA[<p>本书代码使用 <code>python</code> 重构</p><h1>Chapter 2: 构造数据抽象</h1><p>第一章中关注计算过程, 以及函数, 高阶函数<br>本章讨论复合数据: 对象</p><ol><li>复合数据可以减少无用的细节纷扰</li><li>复合数据可以进一步提高程序的模块性</li><li>复合数据真正提高程序设计语言的表达能力</li></ol><p>数据抽象能让我们在程序的不同部分建立起抽象屏障</p><p>关键思想:</p><ol><li><strong>闭包</strong>: 用于组合数据对象的粘合剂不但能用于组合基本的数据对象, 也可以作用于复杂的数据对象</li><li>复合数据对象能成为以 <strong>混合和匹配</strong> 的方式组合程序模块的 <strong>方便界面</strong></li></ol><h2 id="2-1-抽象数据索引">2.1 抽象数据索引</h2><p>基本思想: 构造出一些使用复合数据对象的程序, 使他们就像是在&quot;抽象数据上操作一样</p><h3 id="2-1-1-实例-有理数的算术运算">2.1.1 实例: 有理数的算术运算</h3><p>如下是构造有理数类的一个实现方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">GCD</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a <span class="keyword">if</span> b == <span class="number">0</span> <span class="keyword">else</span> GCD(b, a % b)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span>:</span><br><span class="line">    numer = <span class="number">0</span></span><br><span class="line">    denom = <span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a = <span class="number">0</span>, b = <span class="number">1</span></span>):</span><br><span class="line">        self.numer, self.denom = a, b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_out</span>(<span class="params">self, b</span>):</span><br><span class="line">        <span class="keyword">return</span> self.numer, self.denom, b.numer, b.denom</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">easier</span>(<span class="params">self, a, b</span>):</span><br><span class="line">        factor = GCD(a, b)</span><br><span class="line">        <span class="keyword">return</span> Number(a // factor, b // factor)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate</span>(<span class="params">self, other, f, g</span>):</span><br><span class="line">        n1, d1, n2, d2 = self.get_out(other)</span><br><span class="line">        new_numer = f(n1, d1, n2, d2)</span><br><span class="line">        new_denom = g(n1, d1, n2, d2)</span><br><span class="line">        <span class="keyword">return</span> self.easier(new_numer, new_denom)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.calculate(other, <span class="keyword">lambda</span> n1, d1, n2, d2: n1 * d2 + n2 * d1,</span><br><span class="line">                                     <span class="keyword">lambda</span> n1, d1, n2, d2: d1 * d2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__sub__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.calculate(other, <span class="keyword">lambda</span> n1, d1, n2, d2: n1 * d2 - n2 * d1,</span><br><span class="line">                                     <span class="keyword">lambda</span> n1, d1, n2, d2: d1 * d2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.calculate(other, <span class="keyword">lambda</span> n1, d1, n2, d2: n1 * n2,</span><br><span class="line">                                     <span class="keyword">lambda</span> n1, d1, n2, d2: d1 * d2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__truediv__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.calculate(other, <span class="keyword">lambda</span> n1, d1, n2, d2: n1 * d2,</span><br><span class="line">                                     <span class="keyword">lambda</span> n1, d1, n2, d2: n2 * d1)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.numer&#125;</span>/<span class="subst">&#123;self.denom&#125;</span>&quot;</span></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">x = Number(<span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">y = Number(<span class="number">9</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(x + y)</span><br><span class="line"><span class="built_in">print</span>(x - y)</span><br><span class="line"><span class="built_in">print</span>(x * y)</span><br><span class="line"><span class="built_in">print</span>(x / y)</span><br><span class="line"><span class="built_in">print</span>(x == y)</span><br><span class="line"><span class="built_in">print</span>(x != y)</span><br></pre></td></tr></table></figure><h3 id="2-1-2-抽象屏障">2.1.2 抽象屏障</h3><p><code>python</code> 类内的 <code>calculate</code> 等函数一般不被外接调用, 所以这类函数和外界由抽象屏障 \</p><p><strong>抽象屏障</strong> 用于隔离不同层级之间的差异，通过屏障实现对上层程式与下层程式的沟通 \</p><p>这种方法可以将数据构建的依赖限制在小范围内<br>有利于对代码进行维护和修改后，整个系统的功能保持一致性。</p><blockquote><p>例如之前的练习 2.1, 只需要改变 <code>__init__</code> 函数即可</p></blockquote><h3 id="2-1-3-数据意味着什么">2.1.3 数据意味着什么</h3><p>数据是一组适当的选择函数和构造函数, 以及使这些函数成为一套合法表示, 它们必须满足的一组特定条件</p><p>对任何对象 $x$, $y$, 如果 $z$ 是 <code>Point(x, y)</code> <br>那么 <code>x_point</code> 就是 $x$, <code>y_point</code> 就是 $y$, 可以仅使用函数来实现点对</p><p>下面是点对的一种函数式表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">point</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">match</span>(<span class="params">m</span>):</span><br><span class="line">        <span class="keyword">return</span> x <span class="keyword">if</span> m == <span class="number">0</span> <span class="keyword">else</span> y</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">match</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">x_point</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">return</span> p(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">y_point</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">return</span> p(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">z = point(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(x_point(z), y_point(z))</span><br></pre></td></tr></table></figure><h3 id="2-1-4-拓展练习-区间算数">2.1.4 拓展练习: 区间算数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Interval</span>:</span><br><span class="line">    upper, lower = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b</span>):</span><br><span class="line">        self.lower, self. upper = a, b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lbound</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.lower</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ubound</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.upper</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.lbound(), self.ubound(), other.lbound(), other.ubound()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        a, b, c, d = self.get(other)</span><br><span class="line">        <span class="keyword">return</span> Interval(a + c, b + d)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__sub__</span>(<span class="params">self, other</span>):</span><br><span class="line">        a, b, c, d = self.get(other)</span><br><span class="line">        <span class="keyword">return</span> Interval(a - d, b - c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, other</span>):</span><br><span class="line">        a, b, c, d = self.get(other)</span><br><span class="line">        lst = [a * c, a * d, b * c, b * d]</span><br><span class="line">        <span class="keyword">return</span> Interval(<span class="built_in">min</span>(lst), <span class="built_in">max</span>(lst))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__truediv__</span>(<span class="params">self, other</span>):</span><br><span class="line">        _, _, c, d = self.get(other)</span><br><span class="line">        <span class="keyword">if</span> (c &lt;= <span class="number">0</span> <span class="keyword">and</span> d &gt;= <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">raise</span> AssertionError(<span class="string">&quot;除以跨零区间&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self * Interval(<span class="number">1</span> / d, <span class="number">1</span> / c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">width</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (self.ubound() - self.lbound()) / <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;(<span class="subst">&#123;self.lower&#125;</span>, <span class="subst">&#123;self.upper&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CenterWidthInterval</span>(<span class="title class_ inherited__">Interval</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, c, w</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(c - w, c + w)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PercentInterval</span>(<span class="title class_ inherited__">Interval</span>):</span><br><span class="line">    percent = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, p</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(x * (<span class="number">1</span> - p), x * (<span class="number">1</span> + p))</span><br><span class="line">        self.percent = p</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_percent</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.percent</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">part1</span>(<span class="params">r1, r2</span>):</span><br><span class="line">    <span class="keyword">return</span> r1 * r2 / (r1 + r2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">part2</span>(<span class="params">r1, r2</span>):</span><br><span class="line">    one = Interval(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> one / (one / r1 + one / r2)</span><br><span class="line"></span><br><span class="line">a = PercentInterval(<span class="number">100</span>, <span class="number">0.5</span>)</span><br><span class="line">b = PercentInterval(<span class="number">100</span>, <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">c = PercentInterval(<span class="number">100</span>, <span class="number">0.0</span>)</span><br><span class="line"><span class="built_in">print</span>(c / c)</span><br><span class="line"><span class="built_in">print</span>(part1(a, b))</span><br><span class="line"><span class="built_in">print</span>(part2(a, b))</span><br></pre></td></tr></table></figure><h2 id="2-2-层次性数据和闭包性质">2.2 层次性数据和闭包性质</h2><p>在 <strong>盒子和指针</strong> 表示方式中, 每个对象表示为一个指向盒子的 <strong>指针</strong>, 盒子里包含着对象的表示 \</p><p><strong>闭包性质</strong>: 通过它组合起数据对象的结果本身还可以通过同样的操作再进行组合</p><h3 id="2-2-1-序列-链表-的表示">2.2.1 序列(链表)的表示</h3><p>使用 <code>python</code> 中的 <code>list</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cons</span>(<span class="params">val, lst</span>):</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">not</span> <span class="built_in">isinstance</span>(lst, <span class="type">List</span>)):</span><br><span class="line">        <span class="keyword">return</span> <span class="type">List</span>([val] + [lst])</span><br><span class="line">    <span class="keyword">return</span> <span class="type">List</span>([val] + lst.val)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_list</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="type">List</span>(*args)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args</span>):</span><br><span class="line">        self.val = <span class="built_in">list</span>(args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">car</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.val[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cdr</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="type">List</span>(*self.val[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">list_ref</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="keyword">return</span> self.val[n]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">length</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="type">List</span>(*(self.val + other.val))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">last_pair</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.val[self.length() - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="type">List</span>(*<span class="built_in">reversed</span>(self.val))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        res = <span class="string">&quot;(&quot;</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> self.val:</span><br><span class="line">            res += <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(x)</span><br><span class="line">        <span class="keyword">return</span> res + <span class="string">&#x27;)&#x27;</span></span><br></pre></td></tr></table></figure><p>使用链表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a = <span class="literal">None</span>, b = <span class="literal">None</span></span>):</span><br><span class="line">        self.x, self.y = a, b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cons</span>(<span class="params">self, a, b</span>):</span><br><span class="line">        <span class="keyword">return</span> Pair(a, b)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">car</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.x</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cdr</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.y</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_null</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.y == self.x == <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creat_list</span>(<span class="params">self, *args</span>):</span><br><span class="line">        res = <span class="literal">None</span> </span><br><span class="line">        <span class="keyword">for</span> arg <span class="keyword">in</span> <span class="built_in">reversed</span>(args):</span><br><span class="line">            res = self.cons(arg, res)</span><br><span class="line">        <span class="keyword">return</span> res <span class="keyword">if</span> res != <span class="literal">None</span> <span class="keyword">else</span> Pair()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">len</span>(<span class="params">self</span>):</span><br><span class="line">        count, tmp = <span class="number">1</span>, self.y</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isinstance</span>(tmp, Pair)):</span><br><span class="line">            tmp, count = tmp.cdr(), count + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> self.x == <span class="literal">None</span> <span class="keyword">else</span> count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">list_ref</span>(<span class="params">self, n</span>):</span><br><span class="line">        count, tmp = <span class="number">1</span>, self.y</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isinstance</span>(tmp, Pair) <span class="keyword">and</span> count &lt; n):</span><br><span class="line">            tmp, count = tmp.cdr(), count + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> <span class="built_in">isinstance</span>(tmp, Pair)):</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;n 过大&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> tmp.car()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> (self.cdr() != <span class="literal">None</span>):</span><br><span class="line">            <span class="keyword">return</span> self.cons(self.car(), self.cdr().append(other)) <span class="comment"># type: ignore</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.cons(self.car(), other)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">self, prev = <span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> (self.is_null()):</span><br><span class="line">            <span class="keyword">return</span> prev</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (self.cdr() == <span class="literal">None</span>):</span><br><span class="line">            <span class="keyword">return</span> self.cons(self.car(), prev)</span><br><span class="line">        </span><br><span class="line">        rest = self.cdr()</span><br><span class="line">        self.y = prev</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rest.reverse(self) <span class="comment"># type: ignore</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">last_pair</span>(<span class="params">self</span>):</span><br><span class="line">        tmp = self</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isinstance</span>(tmp.y, Pair) <span class="keyword">and</span> (<span class="keyword">not</span> tmp.y.is_null())):</span><br><span class="line">            tmp = tmp.y</span><br><span class="line">        <span class="keyword">return</span> Pair(tmp.car())</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_string</span>(<span class="params">self, cur</span>):</span><br><span class="line">        res = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(cur.x, Pair):</span><br><span class="line">            res = <span class="string">&#x27;(&#x27;</span> + self.to_string(cur.x) + <span class="string">&#x27;)&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> cur.x != <span class="literal">None</span>:</span><br><span class="line">            res = <span class="built_in">str</span>(cur.x)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(cur.y, Pair):</span><br><span class="line">            res += <span class="string">&#x27; &#x27;</span> + self.to_string(cur.y)</span><br><span class="line">        <span class="keyword">elif</span> cur.y != <span class="literal">None</span>:</span><br><span class="line">            res += <span class="string">&quot; . &quot;</span> + <span class="built_in">str</span>(cur.y)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span> + self.to_string(self) + <span class="string">&#x27;)&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-2-层次性结构">2.2.2 层次性结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value = <span class="literal">None</span>, children = <span class="literal">None</span></span>):</span><br><span class="line">        self.value = value</span><br><span class="line">        self.children = children <span class="keyword">or</span> []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_child</span>(<span class="params">self, child_node</span>):</span><br><span class="line">        self.children.append(child_node)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._str_recursive(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_leaf</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.children) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">count_leaves</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">cur_node</span>):</span><br><span class="line">            <span class="keyword">if</span> (cur_node.is_leaf()):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">sum</span>([<span class="built_in">iter</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> cur_node.children])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deep_reverse</span>(<span class="params">self</span>):</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">cur_node</span>):</span><br><span class="line">            <span class="keyword">if</span> (cur_node.is_leaf()):</span><br><span class="line">                <span class="keyword">return</span> TreeNode(cur_node.value)</span><br><span class="line">            new_children = []</span><br><span class="line">            <span class="keyword">for</span> child <span class="keyword">in</span> cur_node.children:</span><br><span class="line">                new_children += [<span class="built_in">iter</span>(child)]</span><br><span class="line">            <span class="keyword">return</span> TreeNode(cur_node.value, <span class="built_in">reversed</span>(new_children))</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fringe</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">cur_node</span>):</span><br><span class="line">            <span class="keyword">if</span> (cur_node.is_leaf()):</span><br><span class="line">                <span class="keyword">return</span> [cur_node.value]</span><br><span class="line">            res = []</span><br><span class="line">            <span class="keyword">for</span> child <span class="keyword">in</span> cur_node.children:</span><br><span class="line">                res += <span class="built_in">iter</span>(child)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">map</span>(<span class="params">self, proc</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">cur_node</span>):</span><br><span class="line">            res = []</span><br><span class="line">            <span class="keyword">for</span> child <span class="keyword">in</span> cur_node.children:</span><br><span class="line">                res += [<span class="built_in">iter</span>(child)]</span><br><span class="line">            <span class="keyword">return</span> TreeNode(proc(cur_node.value), res)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>(self)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">return</span> x * x</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">map</span>(square)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_str_recursive</span>(<span class="params">self, node, level = <span class="number">0</span></span>):</span><br><span class="line">        indent = <span class="string">&quot; &quot;</span> * level</span><br><span class="line">        res = <span class="string">f&quot;<span class="subst">&#123;indent&#125;</span><span class="subst">&#123;node.value&#125;</span>\n&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> node.children:</span><br><span class="line">            res += self._str_recursive(child, level + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root = TreeNode(<span class="number">1</span>)</span><br><span class="line">node_b = TreeNode(<span class="number">2</span>)</span><br><span class="line">node_c = TreeNode(<span class="number">3</span>)</span><br><span class="line">node_d = TreeNode(<span class="number">4</span>)</span><br><span class="line">node_e = TreeNode(<span class="number">5</span>)</span><br><span class="line">node_f = TreeNode(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">root.add_child(node_b)</span><br><span class="line">root.add_child(node_c)</span><br><span class="line">node_b.add_child(node_d)</span><br><span class="line">node_b.add_child(node_e)</span><br><span class="line">node_c.add_child(node_f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印树</span></span><br><span class="line"><span class="built_in">print</span>(root)</span><br><span class="line"><span class="built_in">print</span>(root.count_leaves())</span><br><span class="line"><span class="built_in">print</span>(root.deep_reverse())</span><br><span class="line"><span class="built_in">print</span>(root.fringe())</span><br><span class="line"><span class="built_in">print</span>(root.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x * x))</span><br><span class="line"><span class="built_in">print</span>(root.square())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-3-序列作为一种约定的界面">2.2.3 序列作为一种约定的界面</h3><p>工作的过程可以抽象为一下几步: 枚举器, 过滤器, 转换器, 累计器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_odd_squares</span>(<span class="params">cur</span>):</span><br><span class="line">    <span class="keyword">if</span> (cur.is_leaf()):</span><br><span class="line">        <span class="keyword">if</span> (cur.value % <span class="number">2</span> == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> cur.value * cur.value</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    res = <span class="number">0</span> </span><br><span class="line">    <span class="keyword">for</span> child <span class="keyword">in</span> cur.children:</span><br><span class="line">        res += sum_odd_squares(child)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">even_fibs</span>(<span class="params">n</span>):</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        tmp = a + b</span><br><span class="line">        a, b = b, tmp</span><br><span class="line">        <span class="keyword">if</span> (tmp % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            res.append(tmp)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>以上这两个函数都混杂了各个步骤, 不利于程序的抽象表达</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">car</span>(<span class="params">lst</span>):</span><br><span class="line">    <span class="keyword">return</span> lst[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cdr</span>(<span class="params">lst</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(lst[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cons</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> [a] + b</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter</span>(<span class="params">predicate, lst</span>):</span><br><span class="line">    <span class="keyword">return</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> lst <span class="keyword">if</span> predicate(x)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">accumulate</span>(<span class="params">op, initial, lst</span>):</span><br><span class="line">    res = initial</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">reversed</span>(lst):</span><br><span class="line">        res = op(x, res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enumerate_interval</span>(<span class="params">low, high</span>):</span><br><span class="line">    <span class="keyword">return</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(low, high + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enumerate_tree</span>(<span class="params">cur_node</span>):</span><br><span class="line">    <span class="keyword">if</span> (cur_node.is_leaf()):</span><br><span class="line">        <span class="keyword">return</span> [cur_node.value]</span><br><span class="line"></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cur_node.children:</span><br><span class="line">        res += enumerate_tree(x)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_odd_squares_new</span>(<span class="params">cur_node</span>):</span><br><span class="line">    lst = enumerate_tree(cur_node)</span><br><span class="line">    lst = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">1</span>, lst)</span><br><span class="line">    lst = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x * x, lst)</span><br><span class="line">    <span class="keyword">return</span> accumulate(add, <span class="number">0</span>, lst)</span><br><span class="line"></span><br><span class="line"><span class="meta">@cache</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(x - <span class="number">1</span>) + fib(x - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">even_fibs_new</span>(<span class="params">n</span>):</span><br><span class="line">    lst = enumerate_interval(<span class="number">0</span>, n)</span><br><span class="line">    lst = <span class="built_in">map</span>(fib, lst)</span><br><span class="line">    lst = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, lst)</span><br><span class="line">    <span class="keyword">return</span> accumulate(cons, <span class="literal">None</span>, lst)</span><br></pre></td></tr></table></figure><p>抽象出 <code>enumerate</code>, <code>map</code>, <code>filter</code>, <code>accumulate</code> 进行模块化设计</p><p>范围广大的许多操作都可以表述为序列操作</p><p><strong>嵌套映射</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_pairs</span>(<span class="params">n</span>):</span><br><span class="line">    lst = accumulate(append, [], </span><br><span class="line">                     <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> i: <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> j: [i, j], </span><br><span class="line">                                                 enumerate_interval(<span class="number">1</span>, i - <span class="number">1</span>))),</span><br><span class="line">                              enumerate_interval(<span class="number">1</span>, n))))</span><br><span class="line">    lst = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: is_prime(<span class="built_in">sum</span>(x)), lst)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: [*x, <span class="built_in">sum</span>(x)], lst))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">permutations</span>(<span class="params">lst</span>):</span><br><span class="line">    <span class="keyword">if</span> (lst == []):</span><br><span class="line">        <span class="keyword">return</span> [[]]</span><br><span class="line">    </span><br><span class="line">    tmp = permutations(lst[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> tmp:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp[<span class="number">0</span>]) + <span class="number">1</span>):</span><br><span class="line">            res += [x[:i] + [lst[<span class="number">0</span>]] + x[i:]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flatmap</span>(<span class="params">proc, seq</span>):</span><br><span class="line">    <span class="keyword">return</span> accumulate(append, [], <span class="built_in">list</span>(<span class="built_in">map</span>(proc, seq)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">item, sequence</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: <span class="keyword">not</span> (x == item), sequence)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">permutations_new</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">if</span> (s == []):</span><br><span class="line">        <span class="keyword">return</span> [[]]</span><br><span class="line">    <span class="keyword">return</span> flatmap(<span class="keyword">lambda</span> x: <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> p: [x] + p,</span><br><span class="line">                                     permutations(remove(x, s)))), s)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(permutations([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line"><span class="built_in">print</span>(permutations_new([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></table></figure><h3 id="2-2-4-实例-一个图形语言">2.2.4 实例: 一个图形语言</h3><p>语言中只有一种元素, 称为画家</p><p>勉强写了个分形的程序, 不能完成全部的 <code>painter</code> 功能 <br>无法确认代码的正确性, 故跳过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">identity = <span class="keyword">lambda</span> x: x</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Picture</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, length = <span class="number">0</span>, width = <span class="number">0</span>, atom = <span class="literal">True</span></span>):</span><br><span class="line">        self.l, self.w = length, width</span><br><span class="line">        self.strs = [<span class="string">&quot; &quot;</span> * length <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(width)]</span><br><span class="line">        <span class="keyword">if</span> (atom):</span><br><span class="line">            self.strs[<span class="number">0</span>] = <span class="string">&quot;*&quot;</span> * length</span><br><span class="line">            self.strs[width - <span class="number">1</span>] = <span class="string">&quot;*&quot;</span> * length</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length - <span class="number">1</span>):</span><br><span class="line">                pre = self.strs[i][:i]</span><br><span class="line">                aft = self.strs[i][i + <span class="number">1</span>:]</span><br><span class="line">                self.strs[i] = pre + <span class="string">&quot;*&quot;</span> + aft</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">beside</span>(<span class="params">self, other</span>):</span><br><span class="line">        res = Picture(self.l + other.l, self.w, <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.w):</span><br><span class="line">            res.strs[i] = self.strs[i] + other.strs[i]</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">below</span>(<span class="params">self, other</span>):</span><br><span class="line">        res = Picture(self.l, self.w + other.w, <span class="literal">False</span>)</span><br><span class="line">        res.strs = other.strs + self.strs</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">flip_vert</span>(<span class="params">self</span>):</span><br><span class="line">        res = Picture(self.l, self.w, <span class="literal">False</span>)</span><br><span class="line">        res.strs = <span class="built_in">list</span>(<span class="built_in">reversed</span>(self.strs.copy()))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">flip_horiz</span>(<span class="params">self</span>):</span><br><span class="line">        res = Picture(self.l, self.w, <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.w):</span><br><span class="line">            res.strs[i] = self.strs[i][::-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">flip_pairs</span>(<span class="params">self</span>):</span><br><span class="line">        tmp = self.beside(self.flip_vert())</span><br><span class="line">        <span class="keyword">return</span> tmp.below(tmp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">right_split</span>(<span class="params">self, n</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">painter, count</span>):</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span> painter</span><br><span class="line">            smaller = helper(Picture(painter.l // <span class="number">2</span>, painter.w // <span class="number">2</span>), count - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> painter.beside(smaller.below(smaller))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper(self, n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">up_split</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">painter, count</span>):</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span> painter</span><br><span class="line">            smaller = helper(Picture(painter.l // <span class="number">2</span>, painter.w // <span class="number">2</span>), count - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> painter.below(smaller.beside(smaller))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper(self, n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">corner_split</span>(<span class="params">self, n</span>):</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">painter, count</span>):</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span> painter</span><br><span class="line"></span><br><span class="line">            tmp = Picture(painter.l // <span class="number">2</span>, painter.w // <span class="number">2</span>)</span><br><span class="line">            up = tmp.up_split(count - <span class="number">1</span>)</span><br><span class="line">            right = tmp.right_split(count - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            top_left = up.beside(up)</span><br><span class="line">            bottom_right = right.below(right)</span><br><span class="line"></span><br><span class="line">            corner = helper(tmp, count - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> painter.below(top_left).beside(bottom_right.below(corner))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper(self, n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">square_limit</span>(<span class="params">self, n</span>):</span><br><span class="line">        quarter = self.corner_split(n)</span><br><span class="line">        half = quarter.flip_horiz().beside(quarter)</span><br><span class="line">        <span class="keyword">return</span> half.flip_vert().below(half)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> self.strs:</span><br><span class="line">            <span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Picture_new</span>(<span class="title class_ inherited__">Picture</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">square_of_four</span>(<span class="params">self, tl, tr, bl, br</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">painter</span>):</span><br><span class="line">            top = tl(painter).beside(tr(painter))</span><br><span class="line">            bottom = bl(painter).beside(br(painter))</span><br><span class="line">            <span class="keyword">return</span> bottom.below(top)</span><br><span class="line">        <span class="keyword">return</span> helper</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">flip_pairs</span>(<span class="params">self</span>):</span><br><span class="line">        combine4 = self.square_of_four(identity, Picture_new.flip_vert,</span><br><span class="line">                                       identity, Picture_new.flip_vert)</span><br><span class="line">        <span class="keyword">return</span> combine4(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">square_limit</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">rotate180</span>(<span class="params">painter</span>):</span><br><span class="line">            <span class="keyword">return</span> painter.flip_vert().flip_horiz()</span><br><span class="line">        combine4 = self.square_of_four(Picture_new.flip_horiz, identity, </span><br><span class="line">                                       rotate180,              Picture_new.flip_vert)</span><br><span class="line">        <span class="keyword">return</span> combine4(self.corner_split(n))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">split</span>(<span class="params">self, proc1, proc2</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">painter, count</span>):</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span> painter</span><br><span class="line">            smaller = helper(Picture(painter.l // <span class="number">2</span>, painter.w // <span class="number">2</span>), count - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> proc1(painter, proc2(smaller, smaller))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">lambda</span> n: helper(self, n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">right_split</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="keyword">return</span> self.split(Picture.beside, Picture.below)(n)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">up_split</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="keyword">return</span> self.split(Picture.below, Picture.beside)(n)</span><br></pre></td></tr></table></figure><h2 id="2-3-符号数据">2.3 符号数据</h2><h3 id="2-3-1-引号">2.3.1 引号</h3><p><code>scheme</code> 语法, 略去</p><h3 id="2-3-2-实例-符号求导">2.3.2 实例: 符号求导</h3><p>简单的实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_variable</span>(<span class="params">e</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">type</span>(e) != <span class="built_in">int</span> <span class="keyword">and</span> <span class="built_in">type</span>(e) != <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_same_variable</span>(<span class="params">v1, v2</span>):</span><br><span class="line">    <span class="keyword">return</span> is_variable(v1) <span class="keyword">and</span> is_variable(v2) <span class="keyword">and</span> (v1 == v2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_sum</span>(<span class="params">e</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">type</span>(e) == <span class="built_in">list</span> <span class="keyword">and</span> e[<span class="number">0</span>] == <span class="string">&#x27;+&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addend</span>(<span class="params">e</span>):</span><br><span class="line">    <span class="keyword">return</span> e[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">augend</span>(<span class="params">e</span>):</span><br><span class="line">    <span class="keyword">return</span> e[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_sum</span>(<span class="params">a1, a2</span>):</span><br><span class="line">    <span class="keyword">if</span> (a1 == <span class="number">0</span> <span class="keyword">or</span> a2 == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> a1 <span class="keyword">or</span> a2</span><br><span class="line">    <span class="keyword">if</span> (is_number(a1) <span class="keyword">and</span> is_number(a2)):</span><br><span class="line">        <span class="keyword">return</span> a1 + a2</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;+&#x27;</span>, a1, a2]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_product</span>(<span class="params">e</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">type</span>(e) == <span class="built_in">list</span> <span class="keyword">and</span> e[<span class="number">0</span>] == <span class="string">&#x27;*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiplier</span>(<span class="params">e</span>):</span><br><span class="line">    <span class="keyword">return</span> e[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiplicand</span>(<span class="params">e</span>):</span><br><span class="line">    <span class="keyword">return</span> e[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_product</span>(<span class="params">m1, m2</span>):</span><br><span class="line">    <span class="keyword">if</span> (m1 == <span class="number">0</span> <span class="keyword">or</span> m2 == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (m1 == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> m2</span><br><span class="line">    <span class="keyword">if</span> (m2 == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> m1</span><br><span class="line">    <span class="keyword">if</span> (is_number(m1) <span class="keyword">and</span> is_number(m2)):</span><br><span class="line">        <span class="keyword">return</span> m1 * m2</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;*&#x27;</span>, m1, m2]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_number</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">type</span>(x) == <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deriv</span>(<span class="params">exp, var</span>):</span><br><span class="line">    <span class="keyword">if</span> (is_number(exp)):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> (is_variable(exp)):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(is_same_variable(exp, var))</span><br><span class="line">    <span class="keyword">elif</span> (is_sum(exp)):</span><br><span class="line">        <span class="keyword">return</span> make_sum(deriv(addend(exp), var),</span><br><span class="line">                        deriv(augend(exp), var))</span><br><span class="line">    <span class="keyword">elif</span> (is_product(exp)):</span><br><span class="line">        <span class="keyword">return</span> make_sum(make_product(multiplier(exp),</span><br><span class="line">                                     deriv(multiplicand(exp), var)),</span><br><span class="line">                        make_product(deriv(multiplier(exp), var),</span><br><span class="line">                                     multiplicand(exp)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">raise</span> AssertionError(<span class="string">&quot;表达式不合法&quot;</span>)</span><br></pre></td></tr></table></figure><p>功能更全面的实现:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Expression</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val = <span class="literal">None</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_variable</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>(self.val) != <span class="built_in">int</span> <span class="keyword">and</span> <span class="built_in">type</span>(self.val) != <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_same_variable</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.is_variable() <span class="keyword">and</span> other.is_variable() <span class="keyword">and</span> self.val == other.val</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_number</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>(self.val) == <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">type_exp</span>(<span class="params">self, which</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>(self.val) == <span class="built_in">list</span> <span class="keyword">and</span> self.val[<span class="number">0</span>] == which</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_sum</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.type_exp(<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_product</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.type_exp(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_exponentiation</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.type_exp(<span class="string">&quot;**&quot;</span>) <span class="keyword">and</span> self.second().is_number()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        a1, a2 = self.val, other.val</span><br><span class="line">        <span class="keyword">if</span> (a1 == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> Expression(a2)</span><br><span class="line">        <span class="keyword">if</span> (a2 == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> Expression(a1)</span><br><span class="line">        <span class="keyword">if</span> (is_number(a1) <span class="keyword">and</span> is_number(a2)):</span><br><span class="line">            <span class="keyword">return</span> Expression(a1 + a2)</span><br><span class="line">        <span class="keyword">return</span> Expression([<span class="string">&#x27;+&#x27;</span>, a1, a2])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, other</span>):</span><br><span class="line">        m1, m2 = self.val, other.val</span><br><span class="line">        <span class="keyword">if</span> (m1 == <span class="number">0</span> <span class="keyword">or</span> m2 == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> Expression(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> (m1 == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> Expression(m2)</span><br><span class="line">        <span class="keyword">if</span> (m2 == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> Expression(m1)</span><br><span class="line">        <span class="keyword">if</span> (is_number(m1) <span class="keyword">and</span> is_number(m2)):</span><br><span class="line">            <span class="keyword">return</span> Expression(m1 * m2)</span><br><span class="line">        <span class="keyword">return</span> Expression([<span class="string">&#x27;*&#x27;</span>, m1, m2])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__pow__</span>(<span class="params">self, other</span>):</span><br><span class="line">        p1, p2 = self.val, other.val</span><br><span class="line">        <span class="keyword">if</span> (p2 == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> Expression(p1)</span><br><span class="line">        <span class="keyword">if</span> (p2 == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> Expression(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Expression([<span class="string">&quot;**&quot;</span>, p1, p2])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">type</span>(self.val) == <span class="built_in">list</span>):</span><br><span class="line">            <span class="keyword">return</span> Expression(self.val[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">raise</span> AssertionError()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">second</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">type</span>(self.val) == <span class="built_in">list</span>):</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">len</span>(self.val) &gt; <span class="number">3</span>):</span><br><span class="line">                <span class="keyword">return</span> Expression([self.val[<span class="number">0</span>], *self.val[<span class="number">2</span>:]])</span><br><span class="line">            <span class="keyword">return</span> Expression(self.val[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">raise</span> AssertionError()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deriv</span>(<span class="params">self, var</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">exp, var</span>):</span><br><span class="line">            <span class="keyword">if</span> (exp.is_number()):</span><br><span class="line">                <span class="keyword">return</span> Expression(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">elif</span> (exp.is_variable()):</span><br><span class="line">                <span class="keyword">return</span> Expression(<span class="built_in">int</span>(exp.is_same_variable(var)))</span><br><span class="line">            <span class="keyword">elif</span> (exp.is_sum()):</span><br><span class="line">                <span class="keyword">return</span> helper(exp.first(), var) + helper(exp.second(), var)</span><br><span class="line">            <span class="keyword">elif</span> (exp.is_product()):</span><br><span class="line">                <span class="keyword">return</span> exp.first() * helper(exp.second(), var) + \</span><br><span class="line">                       helper(exp.first(), var) * exp.second()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> (exp.is_exponentiation()):</span><br><span class="line">                a, b = exp.first(), exp.second()</span><br><span class="line">                <span class="keyword">return</span> b * (a ** Expression(b.val - <span class="number">1</span>)) * helper(a, var)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">raise</span> AssertionError(<span class="string">&quot;表达式不合法&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper(self, Expression(var))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self.val)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-3-3-集合的表示">2.3.3 集合的表示</h2><p>朴素不可重复集合:</p><ol><li><code>union_set</code>, $\Theta(n^2)$</li><li><code>intersection_set</code>, $\Theta(n^2)$</li><li><code>is_element_of_set</code>, $\Theta(n)$</li><li><code>adjoin_set</code>, $\Theta(n)$</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Set</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.val = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">union_set</span>(<span class="params">self, other</span>): </span><br><span class="line">        res = <span class="type">Set</span>()</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> other.val:</span><br><span class="line">            <span class="keyword">if</span> (self.is_element_of_set(x)):</span><br><span class="line">                res.val.append(x)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">intersection_set</span>(<span class="params">self, other</span>):</span><br><span class="line">        res = <span class="type">Set</span>()</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> other.val:</span><br><span class="line">            res.adjoin_set(x)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> self.val:</span><br><span class="line">            res.adjoin_set(x)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_element_of_set</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> self.val:</span><br><span class="line">            <span class="keyword">if</span> val == x:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">adjoin_set</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> self.is_element_of_set(val)):</span><br><span class="line">            self.val.append(val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self.val)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>二叉搜索树:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val = <span class="literal">None</span>, left = <span class="literal">None</span>, right = <span class="literal">None</span></span>):</span><br><span class="line">        self.val, self.left, self.right = val, left, right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self.val)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BST</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, lst = <span class="literal">None</span></span>):</span><br><span class="line">        lst = [] <span class="keyword">if</span> lst == <span class="literal">None</span> <span class="keyword">else</span> lst</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">list_to_tree</span>(<span class="params">lst</span>):</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">len</span>(lst) == <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            l_size = <span class="built_in">len</span>(lst) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">return</span> Node(lst[l_size], list_to_tree(lst[:l_size]), </span><br><span class="line">                                     list_to_tree(lst[l_size + <span class="number">1</span>:]))</span><br><span class="line"></span><br><span class="line">        self.root = list_to_tree([-<span class="number">1e9</span>] + lst + [<span class="number">1e9</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_element_of_set</span>(<span class="params">self, val</span>):</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">cur_node</span>):</span><br><span class="line">            <span class="keyword">if</span> (cur_node == <span class="literal">None</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> (cur_node.val == val):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> (cur_node.val &lt; val):</span><br><span class="line">                <span class="keyword">return</span> helper(cur_node.right)</span><br><span class="line">            <span class="keyword">if</span> (cur_node.val &gt; val):</span><br><span class="line">                <span class="keyword">return</span> helper(cur_node.left)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper(self.root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">adjoin_set</span>(<span class="params">self, val</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">cur_node</span>):</span><br><span class="line">            <span class="keyword">if</span> (cur_node == <span class="literal">None</span>):</span><br><span class="line">                <span class="keyword">return</span> Node(val)</span><br><span class="line">            <span class="keyword">if</span> (cur_node.val &lt; val):</span><br><span class="line">                cur_node.right = helper(cur_node.right)</span><br><span class="line">            <span class="keyword">if</span> (cur_node.val &gt; val):</span><br><span class="line">                cur_node.left = helper(cur_node.left)</span><br><span class="line">            <span class="keyword">return</span> cur_node</span><br><span class="line"></span><br><span class="line">        self.root = helper(self.root)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tree_to_list</span>(<span class="params">self</span>):</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">cur_node</span>):</span><br><span class="line">            <span class="keyword">if</span> (cur_node == <span class="literal">None</span>):</span><br><span class="line">                <span class="keyword">return</span> []</span><br><span class="line">            tmp = cur_node.val</span><br><span class="line">            res = helper(cur_node.left)</span><br><span class="line">            <span class="keyword">if</span> (tmp != <span class="number">1e9</span> <span class="keyword">and</span> tmp != -<span class="number">1e9</span>):</span><br><span class="line">                res.append(cur_node.val)</span><br><span class="line">            res += helper(cur_node.right)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper(self.root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">union_set</span>(<span class="params">self, other</span>):</span><br><span class="line">        a, b = self.tree_to_list(), other.tree_to_list()</span><br><span class="line"></span><br><span class="line">        i, j, n, m = <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(a), <span class="built_in">len</span>(b)</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n <span class="keyword">and</span> j &lt; m):</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt; b[j]):</span><br><span class="line">                res.append(a[i])</span><br><span class="line">                i = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; b[j]):</span><br><span class="line">                res.append(b[j])</span><br><span class="line">                j = j + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> (a[i] == b[j]):</span><br><span class="line">                res.append(a[i])</span><br><span class="line">                i, j = i + <span class="number">1</span>, j + <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; n):</span><br><span class="line">            res.append(a[i])</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (j &lt; m):</span><br><span class="line">            res.append(b[j])</span><br><span class="line">            j = j + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> BST(res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">intersection_set</span>(<span class="params">self, other</span>):</span><br><span class="line">        a, b = self.tree_to_list(), other.tree_to_list()</span><br><span class="line">        i, j, n, m, res = <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(a), <span class="built_in">len</span>(b), []</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n <span class="keyword">and</span> j &lt; m):</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt; b[j]):</span><br><span class="line">                i = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; b[j]):</span><br><span class="line">                j = j + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> (a[i] == b[j]):</span><br><span class="line">                res.append(a[i])</span><br><span class="line">                i, j = i + <span class="number">1</span>, j + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> BST(res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">cur_node, depth</span>):</span><br><span class="line">            <span class="keyword">if</span> (cur_node == <span class="literal">None</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            res = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">if</span> (cur_node.val != <span class="number">1e9</span> <span class="keyword">and</span> cur_node.val != -<span class="number">1e9</span>):</span><br><span class="line">                res = <span class="string">&quot; &quot;</span> * depth * <span class="number">5</span> + <span class="built_in">str</span>(cur_node.val) + <span class="string">&quot;\n&quot;</span></span><br><span class="line">            res += helper(cur_node.left, depth + <span class="number">1</span>) + \</span><br><span class="line">                   helper(cur_node.right, depth + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper(self.root, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="2-3-4-实例-哈夫曼编码树">2.3.4 实例: 哈夫曼编码树</h3><p>编码方式:</p><ol><li>定长编码: 用相同位数的二进制码表示字符, 占用空间大</li><li>变长编码: 频繁出现的字符指定较短的二进制码<br>如何解决何时到达字符结尾:<ol><li>类似摩斯电码, 加间隔符</li><li>使用前缀码, 每个字符的完整编码都不是其他字符的前缀, 如 <code>Haffman</code> 编码</li></ol></li></ol><p><code>Haffman</code> 树: 树叶代表被编码的符号, 其余节点表示一个集合, 包含其下树叶的所有符号 <br>符号的权重只在构建哈夫曼树的时候才能用到, 在编码和解码的时候不需要使用</p><ol><li>编码: 在哈夫曼树上, 向左走表示增加 0, 向右走表示增加 1</li><li>解码: 对于字符串, 在哈夫曼树上走, 0 表示左走, 1 表示右走, 走到叶子节点就是这段编码完成<br>回到根节点继续解码</li><li>生成哈夫曼树: 每次取权重最小的两个点合并</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Leaf</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, symbol, weight</span>):</span><br><span class="line">        self.symbol, self.weight = symbol, weight</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CodeTree</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, left, right</span>):</span><br><span class="line">        self.left, self.right = left, right</span><br><span class="line">        self.symbol = left.symbol + right.symbol</span><br><span class="line">        self.weight = left.weight + right.weight</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">choose_branch</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> self.left</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> self.right</span><br><span class="line">        <span class="keyword">raise</span> AssertionError(<span class="string">&#x27;表达式不合法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">self, bits</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">decode_1</span>(<span class="params">bits, cur_branch</span>):</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">len</span>(bits) == <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span> []</span><br><span class="line">            next_branch = cur_branch.choose_branch(bits[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isinstance</span>(next_branch, Leaf)):</span><br><span class="line">                <span class="keyword">return</span> [next_branch.symbol] + decode_1(bits[<span class="number">1</span>:], self)</span><br><span class="line">            <span class="keyword">return</span> decode_1(bits[<span class="number">1</span>:], next_branch)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> decode_1(bits, self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">self, message</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">in_tree</span>(<span class="params">char, cur_branch</span>):</span><br><span class="line">            <span class="keyword">return</span> char <span class="keyword">in</span> cur_branch.symbol</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">encode_symbol</span>(<span class="params">char, cur_branch</span>):</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isinstance</span>(cur_branch, Leaf)):</span><br><span class="line">                <span class="keyword">return</span> []</span><br><span class="line">            <span class="keyword">if</span> (in_tree(char, cur_branch.left)):</span><br><span class="line">                <span class="keyword">return</span> [<span class="number">0</span>] + encode_symbol(char, cur_branch.left)</span><br><span class="line">            <span class="keyword">if</span> (in_tree(char, cur_branch.right)):</span><br><span class="line">                <span class="keyword">return</span> [<span class="number">1</span>] + encode_symbol(char, cur_branch.right)</span><br><span class="line">            <span class="keyword">raise</span> AssertionError(<span class="string">f&quot;不存在字母<span class="subst">&#123;char&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(message) == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">return</span> encode_symbol(message[<span class="number">0</span>], self) + \</span><br><span class="line">               self.encode(message[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">adjoin_set</span>(<span class="params">x, lst</span>):</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(lst) == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> [x]</span><br><span class="line">    <span class="keyword">if</span> (x.weight &lt; lst[<span class="number">0</span>].weight):</span><br><span class="line">        <span class="keyword">return</span> [x] + lst</span><br><span class="line">    <span class="keyword">return</span> [lst[<span class="number">0</span>]] + adjoin_set(x, lst[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_leaf_set</span>(<span class="params">pairs</span>):</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(pairs) == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    pair = pairs[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> adjoin_set(Leaf(pair[<span class="number">0</span>], pair[<span class="number">1</span>]),</span><br><span class="line">                      make_leaf_set(pairs[<span class="number">1</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">successive_merge</span>(<span class="params">lst</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(lst) == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(lst) == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> lst[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    a, b = lst[<span class="number">0</span>], lst[<span class="number">1</span>]</span><br><span class="line">    new_tree = CodeTree(a, b)</span><br><span class="line">    <span class="keyword">return</span> successive_merge(adjoin_set(new_tree, lst[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_huffman_tree</span>(<span class="params">pairs</span>):</span><br><span class="line">    <span class="keyword">return</span> successive_merge(make_leaf_set(pairs))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sample_tree = CodeTree(Leaf(<span class="string">&#x27;A&#x27;</span>, <span class="number">4</span>),</span><br><span class="line">                       CodeTree(Leaf(<span class="string">&#x27;B&#x27;</span>, <span class="number">2</span>),</span><br><span class="line">                                CodeTree(Leaf(<span class="string">&#x27;D&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">                                         Leaf(<span class="string">&#x27;C&#x27;</span>, <span class="number">1</span>))))</span><br><span class="line"></span><br><span class="line">sample_tree = generate_huffman_tree([[<span class="string">&#x27;A&#x27;</span>, <span class="number">4</span>], [<span class="string">&#x27;B&#x27;</span>, <span class="number">2</span>], [<span class="string">&#x27;C&#x27;</span>, <span class="number">1</span>], [<span class="string">&#x27;D&#x27;</span>, <span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">isinstance</span>(sample_tree, CodeTree))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sample_tree.decode([<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(sample_tree.encode([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]))</span><br></pre></td></tr></table></figure><h2 id="2-4-抽象数据的多重表示">2.4 抽象数据的多重表示</h2><p>数据抽象是把使用该数据的程序设计和实现有理数的程序相分离, 构筑一道抽象屏障</p><p>但是同一种数据对象也可能有多种表示方法, 比如复数的直角坐标形式和极坐标形式 <br>这就需要一个抽象屏障去隔离互不相同的设计选择</p><p>本章学习构造通用过程, 可以在不止一种数据表示上操作的过程 <br>讨论数据导向的程序设计</p><h3 id="2-4-1-复数的表示">2.4.1 复数的表示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> CartesianComplex(x.real_part() + y.real_part(),</span><br><span class="line">                            x.imag_part() + y.imag_part())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> CartesianComplex(x.real_part() - y.real_part(),</span><br><span class="line">                            x.imag_part() - y.imag_part())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> PolarComplex(x.magn_part() * y.magn_part(),</span><br><span class="line">                        x.angl_part() + y.angl_part())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">div</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> PolarComplex(x.magn_part() / y.magn_part(),</span><br><span class="line">                        x.angl_part() - y.angl_part())</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CartesianComplex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self.x, self.y = x, y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">real_part</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">imag_part</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">magn_part</span>(<span class="params">self</span>):</span><br><span class="line">        a = self.real_part() * self.real_part()</span><br><span class="line">        b = self.imag_part() * self.imag_part()</span><br><span class="line">        <span class="keyword">return</span> math.sqrt(a + b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">angl_part</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> math.atan(self.imag_part() / self.real_part())</span><br><span class="line"></span><br><span class="line">    __add__ = add</span><br><span class="line">    __sub__ = sub</span><br><span class="line">    __mul__ = mul</span><br><span class="line">    __truediv__ = div</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PolarComplex</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, r, a</span>):</span><br><span class="line">        self.r, self.a = r, a</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">real_part</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.r * math.cos(self.a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">imag_part</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.r * math.sin(self.a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">magn_part</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.r</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">angl_part</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.a</span><br><span class="line"></span><br><span class="line">    __add__ = add</span><br><span class="line">    __sub__ = sub</span><br><span class="line">    __mul__ = mul</span><br><span class="line">    __truediv__ = div</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-4-2-带标志数据">2.4.2 带标志数据</h3><p>当两种表示方式放在一起的时候, 可以使用一个变量来表示当前变量的类型 <br>这是一种剥去和加上标志的规范方式, 是重要的组织策略</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b, is_rectangle = <span class="literal">True</span></span>):</span><br><span class="line">        self.a, self.b, self.p = a, b, is_rectangle</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">real_part</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> (self.p):</span><br><span class="line">            <span class="keyword">return</span> self.a</span><br><span class="line">        <span class="keyword">return</span> self.a * math.cos(self.b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">imag_part</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> (self.p):</span><br><span class="line">            <span class="keyword">return</span> self.b</span><br><span class="line">        <span class="keyword">return</span> self.a * math.sin(self.b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">magn_part</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> (self.p):</span><br><span class="line">            a = self.real_part() * self.real_part()</span><br><span class="line">            b = self.imag_part() * self.imag_part()</span><br><span class="line">            <span class="keyword">return</span> math.sqrt(a + b)</span><br><span class="line">        <span class="keyword">return</span> self.a</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">angl_part</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> (self.p):</span><br><span class="line">            <span class="keyword">return</span> math.atan(self.imag_part() / self.real_part())</span><br><span class="line">        <span class="keyword">return</span> self.b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, y</span>):</span><br><span class="line">        <span class="keyword">return</span> Complex(self.real_part() + y.real_part(),</span><br><span class="line">                       self.imag_part() + y.imag_part(), <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__sub__</span>(<span class="params">self, y</span>):</span><br><span class="line">        <span class="keyword">return</span> Complex(self.real_part() - y.real_part(),</span><br><span class="line">                       self.imag_part() - y.imag_part(), <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, y</span>):</span><br><span class="line">        <span class="keyword">return</span> Complex(self.magn_part() * y.magn_part(),</span><br><span class="line">                       self.angl_part() + y.angl_part(), <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__truediv__</span>(<span class="params">self, y</span>):</span><br><span class="line">        <span class="keyword">return</span> Complex(self.magn_part() / y.magn_part(),</span><br><span class="line">                       self.angl_part() - y.angl_part(), <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h2 id="2-4-3-数据导向的程序设计和可加性">2.4.3 数据导向的程序设计和可加性</h2><p>2.4.2 节实现的复数类有两个弱点:</p><ol><li>如果想增加一种表示方式, 那就需要更改一系列选择函数</li><li>保证在整个系统里不出现名字相同的过程</li></ol><p>综上, 这种形式不具有可加性</p><p>一种称为 <strong>数据导向</strong> 的程序设计的编程技术提供了这种能力</p><p>在处理一系列针对不同类型的通用操作的时候, 就像是在处理二维表格 <br>第一维 就是所有的可能类型, 第二维就是所有的可能操作</p><p>通过这种表示: 只需要向表格里新加项目即可, 而不需要改变通用操作的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span> = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">op, t, item</span>):</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">dir</span>.get(op) == <span class="literal">None</span>):</span><br><span class="line">        <span class="built_in">dir</span>[op] = <span class="built_in">dict</span>()</span><br><span class="line">    <span class="built_in">dir</span>[op][t] = item</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">op, t</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dir</span>[op][t]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">install_rectangular_package</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">real_part</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">imag_part</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> x[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_from_real_imag</span>(<span class="params">x, y</span>):</span><br><span class="line">        <span class="keyword">return</span> [x, y]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">magnitude</span>(<span class="params">z</span>):</span><br><span class="line">        a = real_part(z) * real_part(z)</span><br><span class="line">        b = imag_part(z) * imag_part(z)</span><br><span class="line">        <span class="keyword">return</span> math.sqrt(a + b)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">angle</span>(<span class="params">z</span>):</span><br><span class="line">        <span class="keyword">return</span> math.atan(imag_part(z) / real_part(z))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_from_mag_ang</span>(<span class="params">r, a</span>):</span><br><span class="line">        <span class="keyword">return</span> [r * math.cos(a), r * math.sin(a)]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tag</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&quot;rectangular&quot;</span>] + x</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;real_part&quot;</span>, <span class="string">&quot;rectangular&quot;</span>, real_part)</span><br><span class="line">    put(<span class="string">&quot;imag_part&quot;</span>, <span class="string">&quot;rectangular&quot;</span>, imag_part)</span><br><span class="line">    put(<span class="string">&quot;magnitude&quot;</span>, <span class="string">&quot;rectangular&quot;</span>, magnitude)</span><br><span class="line">    put(<span class="string">&quot;angle&quot;</span>, <span class="string">&quot;rectangular&quot;</span>, angle)</span><br><span class="line">    put(<span class="string">&quot;make_from_real_imag&quot;</span>, <span class="string">&quot;rectangular&quot;</span>,</span><br><span class="line">        <span class="keyword">lambda</span> x, y: tag(make_from_real_imag(x, y)))</span><br><span class="line">    put(<span class="string">&quot;make_from_mag_ang&quot;</span>, <span class="string">&quot;rectangular&quot;</span>,</span><br><span class="line">        <span class="keyword">lambda</span> x, y: tag(make_from_mag_ang(x, y)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">install_polar_package</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">magnitude</span>(<span class="params">z</span>):</span><br><span class="line">        <span class="keyword">return</span> z[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">angle</span>(<span class="params">z</span>):</span><br><span class="line">        <span class="keyword">return</span> z[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_from_mag_ang</span>(<span class="params">r, a</span>):</span><br><span class="line">        <span class="keyword">return</span> [r, a]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">real_part</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> magnitude(x) * math.cos(angle(x))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">imag_part</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> magnitude(x) * math.sin(angle(x))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_from_real_imag</span>(<span class="params">x, y</span>):</span><br><span class="line">        <span class="keyword">return</span> [math.sqrt(x * x + y * y), math.atan(y / x)]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tag</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&quot;polar&quot;</span>] + x</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;real_part&quot;</span>, <span class="string">&quot;polar&quot;</span>, real_part)</span><br><span class="line">    put(<span class="string">&quot;imag_part&quot;</span>, <span class="string">&quot;polar&quot;</span>, imag_part)</span><br><span class="line">    put(<span class="string">&quot;magnitude&quot;</span>, <span class="string">&quot;polar&quot;</span>, magnitude)</span><br><span class="line">    put(<span class="string">&quot;angle&quot;</span>, <span class="string">&quot;polar&quot;</span>, angle)</span><br><span class="line">    put(<span class="string">&quot;make_from_real_imag&quot;</span>, <span class="string">&quot;polar&quot;</span>,</span><br><span class="line">        <span class="keyword">lambda</span> x, y: tag(make_from_real_imag(x, y)))</span><br><span class="line">    put(<span class="string">&quot;make_from_mag_ang&quot;</span>, <span class="string">&quot;polar&quot;</span>,</span><br><span class="line">        <span class="keyword">lambda</span> x, y: tag(make_from_mag_ang(x, y)))</span><br><span class="line">       </span><br><span class="line">install_rectangular_package()</span><br><span class="line">install_polar_package()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">apply_generic</span>(<span class="params">op, arg</span>):</span><br><span class="line">    type_tags = arg[<span class="number">0</span>]</span><br><span class="line">    proc = get(op, type_tags)</span><br><span class="line">    <span class="keyword">return</span> proc(arg[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">real_part</span>(<span class="params">z</span>):</span><br><span class="line">    <span class="keyword">return</span> apply_generic(<span class="string">&quot;real_part&quot;</span>, z)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">imag_part</span>(<span class="params">z</span>):</span><br><span class="line">    <span class="keyword">return</span> apply_generic(<span class="string">&quot;imag_part&quot;</span>, z)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">magnitude</span>(<span class="params">z</span>):</span><br><span class="line">    <span class="keyword">return</span> apply_generic(<span class="string">&quot;magnitude&quot;</span>, z)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">angle</span>(<span class="params">z</span>):</span><br><span class="line">    <span class="keyword">return</span> apply_generic(<span class="string">&quot;angle&quot;</span>, z)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_from_real_imag</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> get(<span class="string">&quot;make_from_real_imag&quot;</span>, <span class="string">&quot;rectangular&quot;</span>)(x, y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_from_mag_ang</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> get(<span class="string">&quot;make_from_mag_ang&quot;</span>, <span class="string">&quot;polar&quot;</span>)(x, y)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在数据导向的程序设计里, 最关键的想法就是 <br>显式处理 <strong>操作-类型表格</strong> 从而管理程序的通用性操作</p><p>在 2.4.2 里是一种基于类型进行分配的组织方式, 每个操作管理自己的类型 <br>相当于把表格按照行分割</p><p>另一种实现策略是把表格按照列分割, 类似之前只使用函数来构建一个抽象数据的过程 <br>先传入数据, 返回一个函数, 在传入操作类型执行操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_from_real_imag</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">op</span>):</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;real_part&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;imag_part&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> y</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;magnitude&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> math.sqrt(x * x + y * y)</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;angle&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> math.atan(y / x)</span><br><span class="line">    <span class="keyword">return</span> dispatch</span><br></pre></td></tr></table></figure><h2 id="2-5-带有通用型操作的系统">2.5 带有通用型操作的系统</h2><p>使用数据导向技术构造一个算数包, 包含有理数算数和复数算数以及常规算数</p><h3 id="2-5-1-通用型算数运算">2.5.1 通用型算数运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit = <span class="number">10000000</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span> = <span class="built_in">dict</span>()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">dir</span>.get(a) == <span class="literal">None</span>):</span><br><span class="line">        <span class="built_in">dir</span>[a] = <span class="built_in">dict</span>()</span><br><span class="line">    <span class="built_in">dir</span>[a][b] = c</span><br><span class="line">get = <span class="keyword">lambda</span> a, b: <span class="built_in">dir</span>[a][b]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add_tag = <span class="keyword">lambda</span> tag, x: [tag] + x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">install_number_package</span>():</span><br><span class="line">    put(<span class="string">&quot;add&quot;</span>, (<span class="string">&quot;number&quot;</span>, <span class="string">&quot;number&quot;</span>), </span><br><span class="line">        <span class="keyword">lambda</span> x, y: x + y)</span><br><span class="line">    put(<span class="string">&quot;sub&quot;</span>, (<span class="string">&quot;number&quot;</span>, <span class="string">&quot;number&quot;</span>), </span><br><span class="line">        <span class="keyword">lambda</span> x, y: x - y)</span><br><span class="line">    put(<span class="string">&quot;mul&quot;</span>, (<span class="string">&quot;number&quot;</span>, <span class="string">&quot;number&quot;</span>), </span><br><span class="line">        <span class="keyword">lambda</span> x, y: x * y)</span><br><span class="line">    put(<span class="string">&quot;div&quot;</span>, (<span class="string">&quot;number&quot;</span>, <span class="string">&quot;number&quot;</span>), </span><br><span class="line">        <span class="keyword">lambda</span> x, y: x // y)</span><br><span class="line">    put(<span class="string">&quot;gcd&quot;</span>, (<span class="string">&quot;number&quot;</span>, <span class="string">&quot;number&quot;</span>), math.gcd)</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;make&quot;</span>, <span class="string">&quot;number&quot;</span>, <span class="keyword">lambda</span> x: x)</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;is_zero&quot;</span>, (<span class="string">&quot;number&quot;</span>,), </span><br><span class="line">        <span class="keyword">lambda</span> x: x == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;raise&quot;</span>, (<span class="string">&quot;number&quot;</span>,),</span><br><span class="line">        <span class="keyword">lambda</span> x: make_rational(x, <span class="number">1</span>))</span><br><span class="line">    put(<span class="string">&quot;can_drop&quot;</span>, (<span class="string">&quot;number&quot;</span>,),</span><br><span class="line">        <span class="keyword">lambda</span> _: <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">install_rational_package</span>():</span><br><span class="line">    tag = <span class="keyword">lambda</span> x: add_tag(<span class="string">&quot;rational&quot;</span>, x)</span><br><span class="line">    numer = <span class="keyword">lambda</span> x: x[<span class="number">0</span>]</span><br><span class="line">    denom = <span class="keyword">lambda</span> x: x[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_rat</span>(<span class="params">n, d</span>):</span><br><span class="line">        g = greatest_common_divisor(n, d)</span><br><span class="line">        <span class="keyword">return</span> [div(n, g), div(d, g)]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_rat</span>(<span class="params">x, y</span>):</span><br><span class="line">        <span class="keyword">return</span> make_rat(add(mul(numer(x), denom(y)), mul(denom(x), numer(y))),</span><br><span class="line">                            mul(denom(x), denom(y)))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sub_rat</span>(<span class="params">x, y</span>):</span><br><span class="line">        <span class="keyword">return</span> make_rat(sub(mul(numer(x), denom(y)), mul(denom(x), numer(y))),</span><br><span class="line">                            mul(denom(x), denom(y)))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mul_rat</span>(<span class="params">x, y</span>):</span><br><span class="line">        <span class="keyword">return</span> make_rat(mul(numer(x), numer(y)),</span><br><span class="line">                        mul(denom(x), denom(y)))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">div_rat</span>(<span class="params">x, y</span>):</span><br><span class="line">        <span class="keyword">return</span> make_rat(mul(numer(x), denom(y)),</span><br><span class="line">                        mul(denom(x), numer(y)))</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;add&quot;</span>, (<span class="string">&quot;rational&quot;</span>, <span class="string">&quot;rational&quot;</span>),</span><br><span class="line">        <span class="keyword">lambda</span> x, y: tag(add_rat(x, y)))</span><br><span class="line">    put(<span class="string">&quot;sub&quot;</span>, (<span class="string">&quot;rational&quot;</span>, <span class="string">&quot;rational&quot;</span>),</span><br><span class="line">        <span class="keyword">lambda</span> x, y: tag(sub_rat(x, y)))</span><br><span class="line">    put(<span class="string">&quot;mul&quot;</span>, (<span class="string">&quot;rational&quot;</span>, <span class="string">&quot;rational&quot;</span>),</span><br><span class="line">        <span class="keyword">lambda</span> x, y: tag(mul_rat(x, y)))</span><br><span class="line">    put(<span class="string">&quot;div&quot;</span>, (<span class="string">&quot;rational&quot;</span>, <span class="string">&quot;rational&quot;</span>),</span><br><span class="line">        <span class="keyword">lambda</span> x, y: tag(div_rat(x, y)))</span><br><span class="line">    put(<span class="string">&quot;make&quot;</span>, <span class="string">&quot;rational&quot;</span>, </span><br><span class="line">        <span class="keyword">lambda</span> n, d: tag(make_rat(n, d)))</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;numer&quot;</span>, (<span class="string">&quot;rational&quot;</span>, ), numer)</span><br><span class="line">    put(<span class="string">&quot;denom&quot;</span>, (<span class="string">&quot;rational&quot;</span>, ), denom)</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;is_zero&quot;</span>, (<span class="string">&quot;rational&quot;</span>,),</span><br><span class="line">        <span class="keyword">lambda</span> x: denom(x) == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;raise&quot;</span>, (<span class="string">&quot;rational&quot;</span>,),</span><br><span class="line">        <span class="keyword">lambda</span> x: make_real(numer(x) / denom(x)))</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;can_drop&quot;</span>, (<span class="string">&quot;rational&quot;</span>,),</span><br><span class="line">        <span class="keyword">lambda</span> x: denom(x) == <span class="number">1</span>)</span><br><span class="line">    put(<span class="string">&quot;project&quot;</span>, (<span class="string">&quot;rational&quot;</span>,),</span><br><span class="line">        <span class="keyword">lambda</span> x: make_number(numer(x)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">install_real_package</span>():</span><br><span class="line"></span><br><span class="line">    add_real = <span class="keyword">lambda</span> x, y: x + y</span><br><span class="line">    sub_real = <span class="keyword">lambda</span> x, y: x - y</span><br><span class="line">    mul_real = <span class="keyword">lambda</span> x, y: x * y</span><br><span class="line">    div_real = <span class="keyword">lambda</span> x, y: x / y</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;add&quot;</span>, (<span class="string">&quot;real&quot;</span>, <span class="string">&quot;real&quot;</span>), add_real)</span><br><span class="line">    put(<span class="string">&quot;sub&quot;</span>, (<span class="string">&quot;real&quot;</span>, <span class="string">&quot;real&quot;</span>), sub_real)</span><br><span class="line">    put(<span class="string">&quot;mul&quot;</span>, (<span class="string">&quot;real&quot;</span>, <span class="string">&quot;real&quot;</span>), mul_real)</span><br><span class="line">    put(<span class="string">&quot;div&quot;</span>, (<span class="string">&quot;real&quot;</span>, <span class="string">&quot;real&quot;</span>), div_real)</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;make&quot;</span>, <span class="string">&quot;real&quot;</span>, <span class="keyword">lambda</span> x: x)</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;is_zero&quot;</span>, (<span class="string">&quot;real&quot;</span>,), </span><br><span class="line">        <span class="keyword">lambda</span> x: x == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;raise&quot;</span>, (<span class="string">&quot;real&quot;</span>,),</span><br><span class="line">        <span class="keyword">lambda</span> x: make_complex_from_real_imag(x, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;can_drop&quot;</span>, (<span class="string">&quot;real&quot;</span>,),</span><br><span class="line">        <span class="keyword">lambda</span> x: x % <span class="number">1</span> == <span class="number">0</span>)</span><br><span class="line">    put(<span class="string">&quot;project&quot;</span>, (<span class="string">&quot;real&quot;</span>,),</span><br><span class="line">        <span class="keyword">lambda</span> x: make_rational(<span class="built_in">int</span>(x), <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">install_complex_package</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">install_rectangular_package</span>():</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">real_part</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">imag_part</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">return</span> x[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">make_from_real_imag</span>(<span class="params">x, y</span>):</span><br><span class="line">            <span class="keyword">return</span> [x, y]</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">magnitude</span>(<span class="params">z</span>):</span><br><span class="line">            a = real_part(z) * real_part(z)</span><br><span class="line">            b = imag_part(z) * imag_part(z)</span><br><span class="line">            <span class="keyword">return</span> math.sqrt(a + b)</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">angle</span>(<span class="params">z</span>):</span><br><span class="line">            <span class="keyword">return</span> math.atan(imag_part(z) / real_part(z))</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">make_from_mag_ang</span>(<span class="params">r, a</span>):</span><br><span class="line">            <span class="keyword">return</span> [r * math.cos(a), r * math.sin(a)]</span><br><span class="line"></span><br><span class="line">        tag = <span class="keyword">lambda</span> x: add_tag(<span class="string">&quot;rectangular&quot;</span>, x)</span><br><span class="line"></span><br><span class="line">        put(<span class="string">&quot;real_part&quot;</span>, (<span class="string">&quot;rectangular&quot;</span>,), real_part)</span><br><span class="line">        put(<span class="string">&quot;imag_part&quot;</span>, (<span class="string">&quot;rectangular&quot;</span>,), imag_part)</span><br><span class="line">        put(<span class="string">&quot;magnitude&quot;</span>, (<span class="string">&quot;rectangular&quot;</span>,), magnitude)</span><br><span class="line">        put(<span class="string">&quot;angle&quot;</span>, (<span class="string">&quot;rectangular&quot;</span>,), angle)</span><br><span class="line">        put(<span class="string">&quot;make_from_real_imag&quot;</span>, <span class="string">&quot;rectangular&quot;</span>,</span><br><span class="line">            <span class="keyword">lambda</span> x, y: tag(make_from_real_imag(x, y)))</span><br><span class="line">        put(<span class="string">&quot;make_from_mag_ang&quot;</span>, <span class="string">&quot;rectangular&quot;</span>,</span><br><span class="line">            <span class="keyword">lambda</span> x, y: tag(make_from_mag_ang(x, y)))</span><br><span class="line"></span><br><span class="line">        put(<span class="string">&quot;is_zero&quot;</span>, (<span class="string">&quot;rectangular&quot;</span>,),</span><br><span class="line">            <span class="keyword">lambda</span> x: real_part(x) == <span class="number">0</span> <span class="keyword">and</span> imag_part(x) == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        put(<span class="string">&quot;can_drop&quot;</span>, (<span class="string">&quot;rectangular&quot;</span>,),</span><br><span class="line">            <span class="keyword">lambda</span> x: imag_part(x) == <span class="number">0</span>)</span><br><span class="line">        put(<span class="string">&quot;project&quot;</span>, (<span class="string">&quot;rectangular&quot;</span>,),</span><br><span class="line">            <span class="keyword">lambda</span> x: make_real(real_part(x)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">install_polar_package</span>():</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">magnitude</span>(<span class="params">z</span>):</span><br><span class="line">            <span class="keyword">return</span> z[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">angle</span>(<span class="params">z</span>):</span><br><span class="line">            <span class="keyword">return</span> z[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">make_from_mag_ang</span>(<span class="params">r, a</span>):</span><br><span class="line">            <span class="keyword">return</span> [r, a]</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">real_part</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">return</span> magnitude(x) * math.cos(angle(x))</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">imag_part</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">return</span> magnitude(x) * math.sin(angle(x))</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">make_from_real_imag</span>(<span class="params">x, y</span>):</span><br><span class="line">            <span class="keyword">return</span> [math.sqrt(x * x + y * y), math.atan(y / x)]</span><br><span class="line">        </span><br><span class="line">        tag = <span class="keyword">lambda</span> x: add_tag(<span class="string">&quot;polar&quot;</span>, x)</span><br><span class="line"></span><br><span class="line">        put(<span class="string">&quot;real_part&quot;</span>, (<span class="string">&quot;polar&quot;</span>,), real_part)</span><br><span class="line">        put(<span class="string">&quot;imag_part&quot;</span>, (<span class="string">&quot;polar&quot;</span>,), imag_part)</span><br><span class="line">        put(<span class="string">&quot;magnitude&quot;</span>, (<span class="string">&quot;polar&quot;</span>,), magnitude)</span><br><span class="line">        put(<span class="string">&quot;angle&quot;</span>, (<span class="string">&quot;polar&quot;</span>,), angle)</span><br><span class="line">        put(<span class="string">&quot;make_from_real_imag&quot;</span>, <span class="string">&quot;polar&quot;</span>,</span><br><span class="line">            <span class="keyword">lambda</span> x, y: tag(make_from_real_imag(x, y)))</span><br><span class="line">        put(<span class="string">&quot;make_from_mag_ang&quot;</span>, <span class="string">&quot;polar&quot;</span>,</span><br><span class="line">            <span class="keyword">lambda</span> x, y: tag(make_from_mag_ang(x, y)))</span><br><span class="line"></span><br><span class="line">        put(<span class="string">&quot;is_zero&quot;</span>, (<span class="string">&quot;polar&quot;</span>,),</span><br><span class="line">            <span class="keyword">lambda</span> x: magnitude(x) == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        put(<span class="string">&quot;can_drop&quot;</span>, (<span class="string">&quot;polar&quot;</span>,),</span><br><span class="line">            <span class="keyword">lambda</span> x: angle(x) == angle(x) // math.pi * math.pi)</span><br><span class="line">        put(<span class="string">&quot;project&quot;</span>, (<span class="string">&quot;polar&quot;</span>,),</span><br><span class="line">            <span class="keyword">lambda</span> x: make_real(-magnitude(x)) <span class="keyword">if</span> (angle(x) // math.pi) % <span class="number">2</span> == <span class="number">1</span> \</span><br><span class="line">                      <span class="keyword">else</span> make_real(magnitude(x)))</span><br><span class="line"></span><br><span class="line">    install_rectangular_package()</span><br><span class="line">    install_polar_package()</span><br><span class="line"></span><br><span class="line">    make_from_real_imag = <span class="keyword">lambda</span> x, y: get(<span class="string">&quot;make_from_real_imag&quot;</span>, <span class="string">&quot;rectangular&quot;</span>)(x, y)</span><br><span class="line">    make_from_mag_ang = <span class="keyword">lambda</span> r, a: get(<span class="string">&quot;make_from_mag_ang&quot;</span>, <span class="string">&quot;polar&quot;</span>)(r, a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_complex</span>(<span class="params">x, y</span>):</span><br><span class="line">        <span class="keyword">return</span> make_from_real_imag(real_part(x) + real_part(y),</span><br><span class="line">                                   imag_part(x) + imag_part(y))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sub_complex</span>(<span class="params">x, y</span>):</span><br><span class="line">        <span class="keyword">return</span> make_from_real_imag(real_part(x) - real_part(y),</span><br><span class="line">                                   imag_part(x) - imag_part(y))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mul_complex</span>(<span class="params">x, y</span>):</span><br><span class="line">        <span class="keyword">return</span> make_from_mag_ang(magnitude(x) * magnitude(y),</span><br><span class="line">                                 angle(x) + angle(y))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">div_complex</span>(<span class="params">x, y</span>):</span><br><span class="line">        <span class="keyword">return</span> make_from_mag_ang(magnitude(x) / magnitude(y),</span><br><span class="line">                                 angle(x) - angle(y))</span><br><span class="line"></span><br><span class="line">    tag = <span class="keyword">lambda</span> x: add_tag(<span class="string">&quot;complex&quot;</span>, x)</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;add&quot;</span>, (<span class="string">&quot;complex&quot;</span>, <span class="string">&quot;complex&quot;</span>),</span><br><span class="line">        <span class="keyword">lambda</span> x, y: tag(add_complex(x, y)))</span><br><span class="line">    put(<span class="string">&quot;sub&quot;</span>, (<span class="string">&quot;complex&quot;</span>, <span class="string">&quot;complex&quot;</span>),</span><br><span class="line">        <span class="keyword">lambda</span> x, y: tag(sub_complex(x, y)))</span><br><span class="line">    put(<span class="string">&quot;mul&quot;</span>, (<span class="string">&quot;complex&quot;</span>, <span class="string">&quot;complex&quot;</span>),</span><br><span class="line">        <span class="keyword">lambda</span> x, y: tag(mul_complex(x, y)))</span><br><span class="line">    put(<span class="string">&quot;div&quot;</span>, (<span class="string">&quot;complex&quot;</span>, <span class="string">&quot;complex&quot;</span>),</span><br><span class="line">        <span class="keyword">lambda</span> x, y: tag(div_complex(x, y)))</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;real_part&quot;</span>, (<span class="string">&quot;complex&quot;</span>,), real_part)</span><br><span class="line">    put(<span class="string">&quot;imag_part&quot;</span>, (<span class="string">&quot;complex&quot;</span>,), imag_part)</span><br><span class="line">    put(<span class="string">&quot;magnitude&quot;</span>, (<span class="string">&quot;complex&quot;</span>,), magnitude)</span><br><span class="line">    put(<span class="string">&quot;angle&quot;</span>, (<span class="string">&quot;complex&quot;</span>,), angle)</span><br><span class="line">        </span><br><span class="line">    put(<span class="string">&quot;make_from_real_imag&quot;</span>, <span class="string">&quot;complex&quot;</span>, </span><br><span class="line">        <span class="keyword">lambda</span> x, y: tag(make_from_real_imag(x, y)))</span><br><span class="line">    put(<span class="string">&quot;make_from_mag_ang&quot;</span>, <span class="string">&quot;complex&quot;</span>, </span><br><span class="line">        <span class="keyword">lambda</span> x, y: tag(make_from_mag_ang(x, y)))</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;is_zero&quot;</span>, (<span class="string">&quot;complex&quot;</span>,),</span><br><span class="line">        <span class="keyword">lambda</span> x: is_zero(x))</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;can_drop&quot;</span>, (<span class="string">&quot;complex&quot;</span>,), </span><br><span class="line">        <span class="keyword">lambda</span> x: can_drop(x))</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;project&quot;</span>, (<span class="string">&quot;complex&quot;</span>,), </span><br><span class="line">        <span class="keyword">lambda</span> x: project(x))</span><br><span class="line"></span><br><span class="line">dir_depth = <span class="built_in">dict</span>()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">install_depth_package</span>():</span><br><span class="line">    lst = [<span class="string">&quot;number&quot;</span>, <span class="string">&quot;rational&quot;</span>, <span class="string">&quot;real&quot;</span>, [<span class="string">&quot;complex&quot;</span>, <span class="string">&quot;rectangular&quot;</span>, <span class="string">&quot;polar&quot;</span>]]</span><br><span class="line">    <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(lst):</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">type</span>(c) == <span class="built_in">list</span>):</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> c:</span><br><span class="line">                dir_depth[x] = i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dir_depth[c] = i</span><br><span class="line"></span><br><span class="line">is_number = <span class="keyword">lambda</span> x: <span class="built_in">type</span>(x) == <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">apply_generic</span>(<span class="params">op, *args</span>):</span><br><span class="line">    args = <span class="built_in">list</span>(args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_type</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">type</span>(x) == <span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;number&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">type</span>(x) == <span class="built_in">float</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;real&quot;</span></span><br><span class="line">        <span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">type</span>(x) == <span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">type</span>(x) == <span class="built_in">float</span>):</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">return</span> x[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cur_type = <span class="built_in">tuple</span>(<span class="built_in">map</span>(get_type, args))</span><br><span class="line">    jump_op = [<span class="string">&quot;polynomial&quot;</span>, <span class="string">&quot;sparse&quot;</span>, <span class="string">&quot;dense&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> (cur_type[<span class="number">0</span>] <span class="keyword">in</span> jump_op):</span><br><span class="line">        proc = get(op, cur_type)</span><br><span class="line">        res = proc(*<span class="built_in">list</span>(<span class="built_in">map</span>(get_content, args)))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">    max_type = <span class="built_in">max</span>([dir_depth[x] <span class="keyword">for</span> x <span class="keyword">in</span> cur_type])</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(args)):</span><br><span class="line">        <span class="keyword">while</span> (dir_depth[get_type(args[i])] != max_type):</span><br><span class="line">            args[i] = my_raise(args[i])</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">    aft_type = <span class="built_in">tuple</span>(<span class="built_in">map</span>(get_type, args))</span><br><span class="line">    proc = get(op, aft_type)</span><br><span class="line">    res = proc(*<span class="built_in">list</span>(<span class="built_in">map</span>(get_content, args)))</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">    drop_op = [<span class="string">&quot;add&quot;</span>, <span class="string">&quot;sub&quot;</span>, <span class="string">&quot;mul&quot;</span>, <span class="string">&quot;div&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> (op <span class="keyword">in</span> drop_op):</span><br><span class="line">        <span class="keyword">return</span> drop(res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">add = <span class="keyword">lambda</span> x, y: apply_generic(<span class="string">&quot;add&quot;</span>, x, y)</span><br><span class="line">sub = <span class="keyword">lambda</span> x, y: apply_generic(<span class="string">&quot;sub&quot;</span>, x, y)</span><br><span class="line">mul = <span class="keyword">lambda</span> x, y: apply_generic(<span class="string">&quot;mul&quot;</span>, x, y)</span><br><span class="line">div = <span class="keyword">lambda</span> x, y: apply_generic(<span class="string">&quot;div&quot;</span>, x, y)</span><br><span class="line"></span><br><span class="line">make_number = <span class="keyword">lambda</span> n: get(<span class="string">&quot;make&quot;</span>, <span class="string">&quot;number&quot;</span>)(<span class="built_in">int</span>(n))</span><br><span class="line"></span><br><span class="line">numer = <span class="keyword">lambda</span> x: apply_generic(<span class="string">&quot;numer&quot;</span>, x)</span><br><span class="line">denom = <span class="keyword">lambda</span> x: apply_generic(<span class="string">&quot;denom&quot;</span>, x)</span><br><span class="line"></span><br><span class="line">make_rational = <span class="keyword">lambda</span> n, d: get(<span class="string">&quot;make&quot;</span>, <span class="string">&quot;rational&quot;</span>)(n, d)</span><br><span class="line"></span><br><span class="line">make_real = <span class="keyword">lambda</span> x: get(<span class="string">&quot;make&quot;</span>, <span class="string">&quot;real&quot;</span>)(x)</span><br><span class="line"></span><br><span class="line">real_part = <span class="keyword">lambda</span> x: apply_generic(<span class="string">&quot;real_part&quot;</span>, x)</span><br><span class="line">imag_part = <span class="keyword">lambda</span> x: apply_generic(<span class="string">&quot;imag_part&quot;</span>, x)</span><br><span class="line">magnitude = <span class="keyword">lambda</span> x: apply_generic(<span class="string">&quot;magnitude&quot;</span>, x)</span><br><span class="line">angle = <span class="keyword">lambda</span> x: apply_generic(<span class="string">&quot;angle&quot;</span>, x)</span><br><span class="line"></span><br><span class="line">make_complex_from_real_imag = <span class="keyword">lambda</span> x, y: get(<span class="string">&quot;make_from_real_imag&quot;</span>, <span class="string">&quot;complex&quot;</span>)(x, y)</span><br><span class="line">make_complex_from_mag_ang = <span class="keyword">lambda</span> x, y: get(<span class="string">&quot;make_from_mag_ang&quot;</span>, <span class="string">&quot;complex&quot;</span>)(x, y)</span><br><span class="line"></span><br><span class="line">equal = <span class="keyword">lambda</span> x, y: x == y</span><br><span class="line">is_zero = <span class="keyword">lambda</span> x: apply_generic(<span class="string">&quot;is_zero&quot;</span>, x)</span><br><span class="line">my_raise = <span class="keyword">lambda</span> x: apply_generic(<span class="string">&quot;raise&quot;</span>, x)</span><br><span class="line"></span><br><span class="line">can_drop = <span class="keyword">lambda</span> x: apply_generic(<span class="string">&quot;can_drop&quot;</span>, x)</span><br><span class="line">project = <span class="keyword">lambda</span> x: apply_generic(<span class="string">&quot;project&quot;</span>, x)</span><br><span class="line"></span><br><span class="line">greatest_common_divisor = <span class="keyword">lambda</span> x, y: apply_generic(<span class="string">&quot;gcd&quot;</span>, x, y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drop</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">while</span> (can_drop(x)):</span><br><span class="line">        x = project(x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">install_number_package()</span><br><span class="line">install_rational_package()</span><br><span class="line">install_real_package()</span><br><span class="line">install_complex_package()</span><br><span class="line">install_depth_package()</span><br></pre></td></tr></table></figure><h3 id="2-5-2-不同类型数据的组合">2.5.2 不同类型数据的组合</h3><p>目前定义的所有运算, 都把不同数据类型看成完全分离的东西 <br>因此没有办法完成诸如 <code>number</code> 加上 <code>complex</code> 的操作</p><p>当然, 可以再定义复数加数字, 数字加复数两个函数, 从而达成目的 <br>但是对于这样的系统, 引进一个新类型的代价就是不仅仅构造出针对这个类型的所有函数 <br>还需要构造并安装好所有实现跨类型工作的函数, 这就是个非常复杂的任务</p><p>一般来说, 需要操作的两个类型都存在一种方式, 使得可以把一种类型看作另一种类型</p><p>比如数字加复数就是一个虚部为 0 的复数加复数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">new_apply_generic</span>(<span class="params">op, *args</span>):</span><br><span class="line">    get_type = <span class="keyword">lambda</span> x: <span class="string">&quot;number&quot;</span> <span class="keyword">if</span> is_number(x) <span class="keyword">else</span> x[<span class="number">0</span>]</span><br><span class="line">    get_content = <span class="keyword">lambda</span> x: x <span class="keyword">if</span> is_number(x) <span class="keyword">else</span> x[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    type_tags = <span class="built_in">tuple</span>(<span class="built_in">map</span>(get_type, args))</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">dir</span>[op].get(type_tags) != <span class="literal">None</span>):</span><br><span class="line">        <span class="keyword">return</span> get(op, type_tags)(*<span class="built_in">list</span>(<span class="built_in">map</span>(get_content, args)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(args) == <span class="number">2</span>):</span><br><span class="line">        type1, type2 = type_tags[<span class="number">0</span>], type_tags[<span class="number">1</span>]</span><br><span class="line">        a1, a2 = args[<span class="number">0</span>], args[<span class="number">1</span>]</span><br><span class="line">        x, y = get_coercion(type1, type2), get_coercion(type2, type1)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x):</span><br><span class="line">            <span class="keyword">return</span> apply_generic(op, x(a1), a2)</span><br><span class="line">        <span class="keyword">if</span> (y):</span><br><span class="line">            <span class="keyword">return</span> apply_generic(op, a1, y(a2))</span><br><span class="line"></span><br><span class="line">dir_coercion = <span class="built_in">dict</span>()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">put_coercion</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="keyword">if</span> (dir_coercion.get(a) == <span class="literal">None</span>):</span><br><span class="line">        dir_coercion[a] = <span class="built_in">dict</span>()</span><br><span class="line">    dir_coercion[a][b] = c</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_coercion</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> (dir_coercion.get(a) != <span class="literal">None</span> <span class="keyword">and</span> </span><br><span class="line">        dir_coercion[a].get(b) != <span class="literal">None</span>):</span><br><span class="line">        <span class="keyword">return</span> dir_coercion[a][b]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">number_to_complex</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> make_complex_from_real_imag(n, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">put_coercion(<span class="string">&quot;number&quot;</span>, <span class="string">&quot;complex&quot;</span>, number_to_complex)</span><br><span class="line"></span><br><span class="line">add = <span class="keyword">lambda</span> x, y: new_apply_generic(<span class="string">&quot;add&quot;</span>, x, y)</span><br><span class="line"></span><br><span class="line">x = make_number(<span class="number">3</span>)</span><br><span class="line">y = make_complex_from_real_imag(<span class="number">4</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(add(x, y))</span><br></pre></td></tr></table></figure><p>对于 $n$ 个类型的系统, 转换函数可能需要写 $n^2$ 个</p><p>当然可以这两种类型转化成第三种类型来计算</p><p>类型的层次结构: 整数 -&gt; 有理数 -&gt; 实数 -&gt; 复数 <br>整数是有理数的子类型, 有理数是整数的超类型</p><p>类型塔: 一个类型只有至多一个超类型和至多一个子类型</p><p>可以采用逐步提高层级或者逐步下放层级的方式来实现类型统一</p><p>类型塔的另外一个优点, 每个类型能够 <strong>继承</strong> 其超类型中的所有操作</p><p><strong>层次结构的不足</strong>:<br>一个超类型可能有多种子类型, 一个子类型可能有多个超类型, <br>所以并不存在唯一方式在层次结构中去提高一个层级或者下放一个层级</p><p>设计大型系统时, 处理一大批相互有关的类型而同时保持模块性是一个非常困难的问题, 目前仍在深入研究</p><h3 id="2-5-3-实例-符号代数">2.5.3 实例: 符号代数</h3><p>本小节实现一个多项式算数的系统(单变量多项式)</p><p>注意这里使用的是最初版本的 <code>apply_generic</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">attach_tag = <span class="keyword">lambda</span> tag, lst: [tag] + lst</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_terms</span>(<span class="params">l1, l2</span>):</span><br><span class="line">    <span class="keyword">if</span> (is_empty_termlist(l1)):</span><br><span class="line">        <span class="keyword">return</span> l2</span><br><span class="line">    <span class="keyword">if</span> (is_empty_termlist(l2)):</span><br><span class="line">        <span class="keyword">return</span> l1</span><br><span class="line">    t1, t2 = first_term(l1), first_term(l2)</span><br><span class="line">    <span class="keyword">if</span> (order(t1) &gt; order(t2)):</span><br><span class="line">        <span class="keyword">return</span> adjoin_term(t1, add_terms(rest_terms(l1), l2))</span><br><span class="line">    <span class="keyword">if</span> (order(t1) &lt; order(t2)):</span><br><span class="line">        <span class="keyword">return</span> adjoin_term(t2, add_terms(l1, rest_terms(l2)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> adjoin_term(make_term(order(t1), </span><br><span class="line">                                 add(coeff(t1), coeff(t2))),</span><br><span class="line">                       add_terms(rest_terms(l1), rest_terms(l2)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_terms</span>(<span class="params">l1, l2</span>):</span><br><span class="line">    <span class="keyword">if</span> (is_empty_termlist(l1)):</span><br><span class="line">        <span class="keyword">return</span> the_empty_termlist</span><br><span class="line">    <span class="keyword">return</span> add_terms(mul_term_by_all_terms(first_term(l1), l2),</span><br><span class="line">                     mul_terms(rest_terms(l1), l2))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_term_by_all_terms</span>(<span class="params">t1, l</span>):</span><br><span class="line">    <span class="keyword">if</span> (is_empty_termlist(l)):</span><br><span class="line">        <span class="keyword">return</span> the_empty_termlist</span><br><span class="line">    t2 = first_term(l)</span><br><span class="line">    <span class="keyword">return</span> adjoin_term(make_term(order(t1) + order(t2),</span><br><span class="line">                                 mul(coeff(t1), coeff(t2))),</span><br><span class="line">                       mul_term_by_all_terms(t1, rest_terms(l)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">adjoin_term</span>(<span class="params">term, term_list</span>):</span><br><span class="line">    <span class="keyword">if</span> (is_zero(coeff(term))):</span><br><span class="line">        <span class="keyword">return</span> term_list</span><br><span class="line">    <span class="keyword">return</span> [term] + term_list</span><br><span class="line"></span><br><span class="line">the_empty_termlist = []</span><br><span class="line">first_term = <span class="keyword">lambda</span> x: x[<span class="number">0</span>]</span><br><span class="line">rest_terms = <span class="keyword">lambda</span> x: x[<span class="number">1</span>:]</span><br><span class="line">is_empty_termlist = <span class="keyword">lambda</span> x: <span class="built_in">len</span>(x) == <span class="number">0</span></span><br><span class="line">make_term = <span class="keyword">lambda</span> order, coeff: [order, coeff]</span><br><span class="line">order = <span class="keyword">lambda</span> term: term[<span class="number">0</span>]</span><br><span class="line">coeff = <span class="keyword">lambda</span> term: term[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">install_polynomial_package</span>():</span><br><span class="line">    make_poly = <span class="keyword">lambda</span> variable, term_list: [variable] + term_list</span><br><span class="line">    variable = <span class="keyword">lambda</span> p: p[<span class="number">0</span>]</span><br><span class="line">    is_variable = <span class="keyword">lambda</span> x: <span class="built_in">type</span>(x) == <span class="built_in">str</span></span><br><span class="line">    is_same_variable = <span class="keyword">lambda</span> x, y: is_variable(x) <span class="keyword">and</span> is_variable(y) \</span><br><span class="line">                                    <span class="keyword">and</span> x == y</span><br><span class="line"></span><br><span class="line">    term_list = <span class="keyword">lambda</span> x: x[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_poly</span>(<span class="params">p1, p2</span>):</span><br><span class="line">        <span class="keyword">if</span> (is_same_variable(variable(p1), variable(p2))):</span><br><span class="line">            <span class="keyword">return</span> make_poly(variable(p1), add_terms(term_list(p1), term_list(p2)))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mul_poly</span>(<span class="params">p1, p2</span>):</span><br><span class="line">        <span class="keyword">if</span> (is_same_variable(variable(p1), variable(p2))):</span><br><span class="line">            <span class="keyword">return</span> make_poly(variable(p1), mul_terms(term_list(p1), term_list(p2)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_nagative</span>(<span class="params">poly</span>):</span><br><span class="line">        terms = term_list(poly)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> terms:</span><br><span class="line">            x[<span class="number">1</span>] = -coeff(x)</span><br><span class="line">        <span class="keyword">return</span> [variable(poly)] + terms</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sub_poly</span>(<span class="params">p1, p2</span>):</span><br><span class="line">        <span class="keyword">return</span> add_poly(p1, to_nagative(p2))</span><br><span class="line"></span><br><span class="line">    tag = <span class="keyword">lambda</span> p: attach_tag(<span class="string">&quot;polynomial&quot;</span>, p)</span><br><span class="line">    put(<span class="string">&quot;add&quot;</span>, (<span class="string">&quot;polynomial&quot;</span>, <span class="string">&quot;polynomial&quot;</span>),</span><br><span class="line">        <span class="keyword">lambda</span> p1, p2: tag(add_poly(p1, p2)))</span><br><span class="line">    put(<span class="string">&quot;mul&quot;</span>, (<span class="string">&quot;polynomial&quot;</span>, <span class="string">&quot;polynomial&quot;</span>),</span><br><span class="line">        <span class="keyword">lambda</span> p1, p2: tag(mul_poly(p1, p2)))</span><br><span class="line">    put(<span class="string">&quot;sub&quot;</span>, (<span class="string">&quot;polynomial&quot;</span>, <span class="string">&quot;polynomial&quot;</span>),</span><br><span class="line">        <span class="keyword">lambda</span> p1, p2: tag(sub_poly(p1, p2)))</span><br><span class="line">    put(<span class="string">&quot;make&quot;</span>, <span class="string">&quot;polynomial&quot;</span>, </span><br><span class="line">        <span class="keyword">lambda</span> var, terms: tag(make_poly(var, terms)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_zero</span>(<span class="params">poly</span>):</span><br><span class="line">        term = first_term(term_list(poly))</span><br><span class="line">        <span class="keyword">return</span> order(term) == <span class="number">0</span> <span class="keyword">and</span> coeff(term) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;is_zero&quot;</span>, (<span class="string">&quot;polynomial&quot;</span>,), is_zero)</span><br><span class="line"></span><br><span class="line">make_polynomial = <span class="keyword">lambda</span> var, terms: get(<span class="string">&quot;make&quot;</span>, <span class="string">&quot;polynomial&quot;</span>)(var, terms)</span><br><span class="line"></span><br><span class="line">install_polynomial_package()</span><br></pre></td></tr></table></figure><p>加入了第二种表示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">attach_tag = <span class="keyword">lambda</span> tag, lst: [tag] + lst</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_terms</span>(<span class="params">l1, l2</span>):</span><br><span class="line">    <span class="keyword">if</span> (is_empty_termlist(l1)):</span><br><span class="line">        <span class="keyword">return</span> l2</span><br><span class="line">    <span class="keyword">if</span> (is_empty_termlist(l2)):</span><br><span class="line">        <span class="keyword">return</span> l1</span><br><span class="line">    t1, t2 = first_term(l1), first_term(l2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (order(t1) &gt; order(t2)):</span><br><span class="line">        <span class="keyword">return</span> adjoin_term(t1, add_terms(rest_terms(l1), l2))</span><br><span class="line">    <span class="keyword">if</span> (order(t1) &lt; order(t2)):</span><br><span class="line">        <span class="keyword">return</span> adjoin_term(t2, add_terms(l1, rest_terms(l2)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> adjoin_term(make_term(order(t1), </span><br><span class="line">                                 add(coeff(t1), coeff(t2))),</span><br><span class="line">                       add_terms(rest_terms(l1), rest_terms(l2)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_terms</span>(<span class="params">l1, l2</span>):</span><br><span class="line">    <span class="keyword">if</span> (is_empty_termlist(l1)):</span><br><span class="line">        <span class="keyword">return</span> l1</span><br><span class="line">    <span class="keyword">return</span> add_terms(mul_term_by_all_terms(first_term(l1), l2),</span><br><span class="line">                     mul_terms(rest_terms(l1), l2))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_terms</span>(<span class="params">l1, l2</span>):</span><br><span class="line">    <span class="keyword">return</span> add_terms(l1, to_negative_terms(l2))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_term_by_all_terms</span>(<span class="params">t1, l</span>):</span><br><span class="line">    <span class="keyword">if</span> (is_empty_termlist(l)):</span><br><span class="line">        <span class="keyword">return</span> l</span><br><span class="line">    t2 = first_term(l)</span><br><span class="line">    <span class="keyword">return</span> adjoin_term(make_term(order(t1) + order(t2),</span><br><span class="line">                                 mul(coeff(t1), coeff(t2))),</span><br><span class="line">                       mul_term_by_all_terms(t1, rest_terms(l)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">div_terms</span>(<span class="params">l1, l2</span>):</span><br><span class="line">    <span class="keyword">if</span> (is_empty_termlist(l1)):</span><br><span class="line">        <span class="keyword">return</span> [l1, l1]</span><br><span class="line">    t1, t2 = first_term(l1), first_term(l2)</span><br><span class="line">    <span class="keyword">if</span> (order(t1) &lt; order(t2)):</span><br><span class="line">        <span class="keyword">return</span> [[l1[<span class="number">0</span>]], l1]</span><br><span class="line">    new_c = coeff(t1) / coeff(t2)</span><br><span class="line">    new_o = order(t1) - order(t2)</span><br><span class="line"></span><br><span class="line">    tmp = mul_term_by_all_terms(make_term(new_o, new_c), l2)</span><br><span class="line">    rest_of_result = div_terms(sub_terms(l1, tmp), l2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [adjoin_term(make_term(new_o, new_c), rest_of_result[<span class="number">0</span>]),</span><br><span class="line">            rest_of_result[<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">is_empty_termlist = <span class="keyword">lambda</span> x: <span class="built_in">len</span>(x) == <span class="number">1</span></span><br><span class="line">make_term = <span class="keyword">lambda</span> order, coeff: [order, coeff]</span><br><span class="line">order = <span class="keyword">lambda</span> term: term[<span class="number">0</span>]</span><br><span class="line">coeff = <span class="keyword">lambda</span> term: term[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">install_polynomial_package</span>():</span><br><span class="line">    make_poly = <span class="keyword">lambda</span> variable, term_list: [variable] + term_list</span><br><span class="line">    variable = <span class="keyword">lambda</span> p: p[<span class="number">0</span>]</span><br><span class="line">    is_variable = <span class="keyword">lambda</span> x: <span class="built_in">type</span>(x) == <span class="built_in">str</span></span><br><span class="line">    is_same_variable = <span class="keyword">lambda</span> x, y: is_variable(x) <span class="keyword">and</span> is_variable(y) \</span><br><span class="line">                                    <span class="keyword">and</span> x == y</span><br><span class="line"></span><br><span class="line">    term_list = <span class="keyword">lambda</span> x: x[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_poly</span>(<span class="params">p1, p2</span>):</span><br><span class="line">        <span class="keyword">if</span> (is_same_variable(variable(p1), variable(p2))):</span><br><span class="line">            <span class="keyword">return</span> make_poly(variable(p1), add_terms(term_list(p1), term_list(p2)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mul_poly</span>(<span class="params">p1, p2</span>):</span><br><span class="line">        <span class="keyword">if</span> (is_same_variable(variable(p1), variable(p2))):</span><br><span class="line">            <span class="keyword">return</span> make_poly(variable(p1), mul_terms(term_list(p1), term_list(p2)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sub_poly</span>(<span class="params">p1, p2</span>):</span><br><span class="line">        <span class="keyword">if</span> (is_same_variable(variable(p1), variable(p2))):</span><br><span class="line">            <span class="keyword">return</span> make_poly(variable(p1), sub_terms(term_list(p1), term_list(p2)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">div_poly</span>(<span class="params">p1, p2</span>):</span><br><span class="line">        <span class="keyword">if</span> (is_same_variable(variable(p1), variable(p2))):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: tag(make_poly(variable(p1), x)),</span><br><span class="line">                            div_terms(term_list(p1), term_list(p2))))</span><br><span class="line"></span><br><span class="line">    tag = <span class="keyword">lambda</span> p: attach_tag(<span class="string">&quot;polynomial&quot;</span>, p)</span><br><span class="line">    put(<span class="string">&quot;add&quot;</span>, (<span class="string">&quot;polynomial&quot;</span>, <span class="string">&quot;polynomial&quot;</span>),</span><br><span class="line">        <span class="keyword">lambda</span> p1, p2: tag(add_poly(p1, p2)))</span><br><span class="line">    put(<span class="string">&quot;mul&quot;</span>, (<span class="string">&quot;polynomial&quot;</span>, <span class="string">&quot;polynomial&quot;</span>),</span><br><span class="line">        <span class="keyword">lambda</span> p1, p2: tag(mul_poly(p1, p2)))</span><br><span class="line">    put(<span class="string">&quot;sub&quot;</span>, (<span class="string">&quot;polynomial&quot;</span>, <span class="string">&quot;polynomial&quot;</span>),</span><br><span class="line">        <span class="keyword">lambda</span> p1, p2: tag(sub_poly(p1, p2)))</span><br><span class="line">    put(<span class="string">&quot;div&quot;</span>, (<span class="string">&quot;polynomial&quot;</span>, <span class="string">&quot;polynomial&quot;</span>),</span><br><span class="line">        <span class="keyword">lambda</span> p1, p2: div_poly(p1, p2))</span><br><span class="line">    put(<span class="string">&quot;make&quot;</span>, <span class="string">&quot;polynomial&quot;</span>, </span><br><span class="line">        <span class="keyword">lambda</span> var, terms: tag(make_poly(var, terms)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_zero</span>(<span class="params">poly</span>):</span><br><span class="line">        term = first_term(term_list(poly))</span><br><span class="line">        <span class="keyword">return</span> order(term) == <span class="number">0</span> <span class="keyword">and</span> coeff(term) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;is_zero&quot;</span>, (<span class="string">&quot;polynomial&quot;</span>,), is_zero)</span><br><span class="line"></span><br><span class="line">    reminder_terms = <span class="keyword">lambda</span> x, y: div_terms(x, y)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd_terms</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">if</span> (is_empty_termlist(b)):</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        <span class="keyword">return</span> gcd_terms(b, reminder_terms(a, b))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd_poly</span>(<span class="params">p1, p2</span>):</span><br><span class="line">        <span class="keyword">if</span> (variable(p1) == variable(p2)):</span><br><span class="line">            <span class="keyword">return</span> make_poly(variable(p1), gcd_terms(term_list(p1), term_list(p2)))</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;gcd&quot;</span>, (<span class="string">&quot;polynomial&quot;</span>, <span class="string">&quot;polynomial&quot;</span>), </span><br><span class="line">        <span class="keyword">lambda</span> x, y: tag(gcd_poly(x, y)))</span><br><span class="line"></span><br><span class="line">make_polynomial = <span class="keyword">lambda</span> var, terms: get(<span class="string">&quot;make&quot;</span>, <span class="string">&quot;polynomial&quot;</span>)(var, terms)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">install_sparse_term</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">adjoin_term</span>(<span class="params">term, term_list</span>):</span><br><span class="line">        <span class="keyword">if</span> (is_zero(coeff(term))):</span><br><span class="line">            <span class="keyword">return</span> term_list</span><br><span class="line">        <span class="keyword">return</span> [term] + term_list</span><br><span class="line">    first_term = <span class="keyword">lambda</span> term_list: term_list[<span class="number">0</span>]</span><br><span class="line">    rest_terms = <span class="keyword">lambda</span> term_list: term_list[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    tag = <span class="keyword">lambda</span> term_list: [<span class="string">&quot;sparse&quot;</span>] + term_list</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_negative_terms</span>(<span class="params">term_list</span>):</span><br><span class="line">        <span class="keyword">for</span> term <span class="keyword">in</span> term_list:</span><br><span class="line">            term[<span class="number">1</span>] = -term[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> term_list</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;adjoin_term&quot;</span>, <span class="string">&quot;sparse&quot;</span>, </span><br><span class="line">        <span class="keyword">lambda</span> term, term_list: tag(adjoin_term(term, term_list)))</span><br><span class="line">    put(<span class="string">&quot;first_term&quot;</span>, (<span class="string">&quot;sparse&quot;</span>,), </span><br><span class="line">        <span class="keyword">lambda</span> term_list: first_term(term_list))</span><br><span class="line">    put(<span class="string">&quot;rest_terms&quot;</span>, (<span class="string">&quot;sparse&quot;</span>,),</span><br><span class="line">        <span class="keyword">lambda</span> term_list: tag(rest_terms(term_list)))</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;to_negative_terms&quot;</span>, (<span class="string">&quot;sparse&quot;</span>,),</span><br><span class="line">        <span class="keyword">lambda</span> term_list: tag(to_negative_terms(term_list)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">install_dense_term</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">adjoin_term</span>(<span class="params">term, term_list</span>):</span><br><span class="line">        <span class="keyword">if</span> (is_zero(coeff(term))):</span><br><span class="line">            <span class="keyword">return</span> term_list</span><br><span class="line">        <span class="keyword">if</span> (order(term) == <span class="built_in">len</span>(term_list)):</span><br><span class="line">            <span class="keyword">return</span> [coeff(term)] + term_list</span><br><span class="line">        <span class="keyword">return</span> adjoin_term(term, [<span class="number">0</span>] + term_list)</span><br><span class="line"></span><br><span class="line">    first_term = <span class="keyword">lambda</span> term_list: [<span class="built_in">len</span>(term_list) - <span class="number">1</span>, term_list[<span class="number">0</span>]]</span><br><span class="line">    rest_terms = <span class="keyword">lambda</span> term_list: term_list[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_negative_terms</span>(<span class="params">term_list</span>):</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> term_list:</span><br><span class="line">            res.append(-x)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    tag = <span class="keyword">lambda</span> term_list: [<span class="string">&quot;dense&quot;</span>] + term_list</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;adjoin_term&quot;</span>, <span class="string">&quot;dense&quot;</span>, </span><br><span class="line">        <span class="keyword">lambda</span> term, term_list: tag(adjoin_term(term, term_list)))</span><br><span class="line">    put(<span class="string">&quot;first_term&quot;</span>, (<span class="string">&quot;dense&quot;</span>,),</span><br><span class="line">        <span class="keyword">lambda</span> term_list: first_term(term_list))</span><br><span class="line">    put(<span class="string">&quot;rest_terms&quot;</span>, (<span class="string">&quot;dense&quot;</span>,),</span><br><span class="line">        <span class="keyword">lambda</span> term_list: tag(rest_terms(term_list)))</span><br><span class="line">    put(<span class="string">&quot;to_negative_terms&quot;</span>, (<span class="string">&quot;dense&quot;</span>,),</span><br><span class="line">        <span class="keyword">lambda</span> term_list: tag(to_negative_terms(term_list)))</span><br><span class="line"></span><br><span class="line">install_polynomial_package()</span><br><span class="line">install_sparse_term()</span><br><span class="line">install_dense_term()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">adjoin_term</span>(<span class="params">term, term_list</span>):</span><br><span class="line">    <span class="keyword">return</span> get(<span class="string">&quot;adjoin_term&quot;</span>, term_list[<span class="number">0</span>])(term, term_list[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line">first_term = <span class="keyword">lambda</span> term_list: apply_generic(<span class="string">&quot;first_term&quot;</span>, term_list)</span><br><span class="line">rest_terms = <span class="keyword">lambda</span> term_list: apply_generic(<span class="string">&quot;rest_terms&quot;</span>, term_list)</span><br><span class="line">to_negative_terms = <span class="keyword">lambda</span> term_list: apply_generic(<span class="string">&quot;to_negative_terms&quot;</span>, term_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = make_polynomial(<span class="string">&quot;x&quot;</span>, [<span class="string">&quot;sparse&quot;</span>, [<span class="number">4</span>, <span class="number">1</span>], [<span class="number">3</span>, -<span class="number">1</span>], [<span class="number">2</span>, -<span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>]])</span><br><span class="line">b = make_polynomial(<span class="string">&quot;x&quot;</span>, [<span class="string">&quot;sparse&quot;</span>, [<span class="number">3</span>, <span class="number">1</span>], [<span class="number">1</span>, -<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">a = make_number(<span class="number">9</span>)</span><br><span class="line">b = make_number(<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">a = make_polynomial(<span class="string">&quot;x&quot;</span>, [<span class="string">&quot;sparse&quot;</span>, [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>]])</span><br><span class="line">b = make_polynomial(<span class="string">&quot;x&quot;</span>, [<span class="string">&quot;sparse&quot;</span>, [<span class="number">3</span>, <span class="number">1</span>], [<span class="number">0</span>, -<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">c = make_polynomial(<span class="string">&quot;x&quot;</span>, [<span class="string">&quot;sparse&quot;</span>, [<span class="number">1</span>, <span class="number">1</span>]])</span><br><span class="line">d = make_polynomial(<span class="string">&quot;x&quot;</span>, [<span class="string">&quot;sparse&quot;</span>, [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">0</span>, -<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 = make_polynomial(<span class="string">&quot;x&quot;</span>, [<span class="string">&quot;sparse&quot;</span>, [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">1</span>, -<span class="number">2</span>], [<span class="number">1</span>, <span class="number">1</span>]])</span><br><span class="line">p2 = make_polynomial(<span class="string">&quot;x&quot;</span>, [<span class="string">&quot;sparse&quot;</span>, [<span class="number">2</span>, <span class="number">11</span>], [<span class="number">0</span>, <span class="number">7</span>]])</span><br><span class="line">p3 = make_polynomial(<span class="string">&quot;x&quot;</span>, [<span class="string">&quot;sparse&quot;</span>, [<span class="number">1</span>, <span class="number">13</span>], [<span class="number">0</span>, <span class="number">5</span>]])</span><br><span class="line"></span><br><span class="line">q1 = mul(p1, p2)</span><br><span class="line">q2 = mul(p2, p3)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(greatest_common_divisor(q1, q2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>练习</h1><h2 id="2-1">2.1</h2><p>更改 <code>__init__</code> 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a = <span class="number">0</span>, b = <span class="number">1</span></span>):</span><br><span class="line">    tmpa, tmpb = <span class="built_in">abs</span>(a), <span class="built_in">abs</span>(b)</span><br><span class="line">    <span class="keyword">if</span> (a * b &lt; <span class="number">0</span>):</span><br><span class="line">        tmpa = -tmpa</span><br><span class="line">    self.numer, self.denom = tmpa, tmpb</span><br></pre></td></tr></table></figure><h2 id="2-2">2.2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    x, y = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a = <span class="number">0</span>, b = <span class="number">0</span></span>):</span><br><span class="line">        self.x, self.y = a, b</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">x_point</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">y_point</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;(<span class="subst">&#123;self.x&#125;</span>, <span class="subst">&#123;self.y&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Segment</span>:</span><br><span class="line">    x, y = Point(), Point()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a = Point(<span class="params"></span>), b = Point(<span class="params"></span>)</span>):</span><br><span class="line">        self.x, self.y = a, b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_segment</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.x</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">end_segment</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.y</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mid_segment</span>(<span class="params">self</span>):</span><br><span class="line">        p1, p2 = self.start_segment(), self.end_segment()</span><br><span class="line">        a, b, c, d = p1.x_point(), p1.y_point(), p2.x_point(), p2.y_point()</span><br><span class="line">        <span class="keyword">return</span> Point((a + b) / <span class="number">2</span>, (c + d) / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">x = Segment(Point(<span class="number">1</span>, <span class="number">1</span>), Point(<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(x.mid_segment())</span><br></pre></td></tr></table></figure><h2 id="2-3">2.3</h2><p>一个是用起始结束点表示, 一个是用对角线表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>:</span><br><span class="line">    start, end = Point(), Point()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b</span>):</span><br><span class="line">        self.start, self.end = a, b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_point</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.start</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">end_point</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle_2</span>:</span><br><span class="line">    diagonal = Segment()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seg = Segment(<span class="params"></span>)</span>):</span><br><span class="line">        self.diagonal = seg</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_point</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.diagonal.start_segment()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">end_point</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.diagonal.end_segment()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">length</span>(<span class="params">rec</span>):</span><br><span class="line">    p1, p2 = rec.start_point(), rec.end_point()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(p1.x_point() - p2.x_point())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">width</span>(<span class="params">rec</span>):</span><br><span class="line">    p1, p2 = rec.start_point(), rec.end_point()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(p1.y_point() - p2.y_point())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">perimeter</span>(<span class="params">rec</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * (length(rec) + width(rec))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">rec</span>):</span><br><span class="line">    <span class="keyword">return</span> length(rec) * width(rec)</span><br><span class="line">        </span><br><span class="line">a = Rectangle(Point(<span class="number">1</span>, <span class="number">1</span>), Point(<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">b = Rectangle_2(Segment(Point(<span class="number">1</span>, <span class="number">1</span>), Point(<span class="number">2</span>, <span class="number">3</span>)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(perimeter(a))</span><br><span class="line"><span class="built_in">print</span>(area(a))</span><br><span class="line"><span class="built_in">print</span>(perimeter(b))</span><br><span class="line"><span class="built_in">print</span>(area(b))</span><br></pre></td></tr></table></figure><h2 id="2-4">2.4</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cons</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> m: m(x, y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">car</span>(<span class="params">z</span>):</span><br><span class="line">    <span class="keyword">return</span> z(<span class="keyword">lambda</span> p, q: p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cdr</span>(<span class="params">z</span>):</span><br><span class="line">    <span class="keyword">return</span> z(<span class="keyword">lambda</span> p, q: q)</span><br><span class="line"></span><br><span class="line">t = cons(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(car(t), cdr(t))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cdr(t)</span><br><span class="line">cdr(lambda m: m(1, 2))</span><br><span class="line">(lambda m: m(1, 2))(lambda p, q: q)</span><br><span class="line">(lambda p, q: q)(1, 2)</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="2-5">2.5</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cons</span>(<span class="params">x, y</span>):</span><br><span class="line">    a, b = <span class="built_in">pow</span>(<span class="number">2</span>, x), <span class="built_in">pow</span>(<span class="number">3</span>, y)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> z: z(a, b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">car</span>(<span class="params">z</span>):</span><br><span class="line">    <span class="keyword">return</span> z(<span class="keyword">lambda</span> p, q: p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cdr</span>(<span class="params">z</span>):</span><br><span class="line">    <span class="keyword">return</span> z(<span class="keyword">lambda</span> p, q: q)</span><br><span class="line"></span><br><span class="line">t = cons(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(car(t), cdr(t))</span><br></pre></td></tr></table></figure><h2 id="2-6">2.6</h2><p>丘奇计数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">zero = <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: x</span><br><span class="line">one = <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f(x)</span><br><span class="line">two = <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f(f(x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add1</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f(n(f)(x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: a(f)(b(f)(x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">church_to_int</span>(<span class="params">n</span>):</span><br><span class="line">    x, y = <span class="number">0</span>, <span class="keyword">lambda</span> x: x + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n(y)(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">int_to_church</span>(<span class="params">n</span>):</span><br><span class="line">    res = zero</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        res = add1(res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(church_to_int(add(one, two)))</span><br><span class="line"><span class="built_in">print</span>(church_to_int(int_to_church(<span class="number">10</span>)))</span><br><span class="line"><span class="built_in">print</span>(church_to_int(two))</span><br></pre></td></tr></table></figure><h2 id="2-7">2.7</h2><p>见正文 2.1.4</p><h2 id="2-8">2.8</h2><p>$$<br>\begin{align}<br>&amp; 定义两个区间, Interval(al, au), Interval(bl, bu), 其中 al &lt; au, ; bl &lt; bu \\<br>&amp; p1, p2, p3, p4 = al - bl, al - bu, au - bl, au - bu \\<br>&amp; p1 - p2 = bu - bl &gt; 0, ; p1 &gt; p2 \\<br>&amp; p3 - p2 = au + bu - al - bl &gt; 0, ; p3 &gt; p2 \\<br>&amp; p4 - p2 = au - al &gt; 0, ; p4 &gt; p2 \\<br>&amp; p2 = min(p1, p2, p3, p4) \\<br>&amp; p1 - p3 = al - au &lt; 0, ; p1 &lt; p3 \\<br>&amp; p2 - p3 = -(p3 - p2) &lt; 0, ; p2 &lt; p3 \\<br>&amp; p4 - p3 = bu - bl &lt; 0, ; p4 &lt; p3 \\<br>&amp; p3 = max(p1, p2, p3, p4) \\<br>&amp; 综上, 新的区间应是 Interval(p2, p3)<br>\end{align}<br>$$</p><h2 id="2-9">2.9</h2><p>$$<br>\begin{align}<br>&amp; 定义两个区间, Interval(al, au), Interval(bl, bu), 其中 al &lt; au, ; bl &lt; bu \\<br>&amp; 加法结果 Interval(al + bl, au + bu), 减法结果 Interval(al - bu, au - bl) \\<br>&amp; 加法宽度: \frac{(au + bu - al + bl)} 2 = \frac{(au - al)}2 + \frac{(bu - bl)} 2 \\<br>&amp; 减法宽度: \frac{(au - bl - al + bu)} 2 = \frac{(au - al)}2 + \frac{(bu - bl)} 2 \\</p><p>\end{align}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = Interval(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">b = Interval(-<span class="number">4</span>, -<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a, b, (a * b), (a / b))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.width(), b.width(), (a * b).width(), (a / b).width())</span><br></pre></td></tr></table></figure><h2 id="2-10">2.10</h2><p>见 2.1.4 <code>__truediv__</code> 函数</p><h2 id="2-11">2.11</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">x, y</span>):</span><br><span class="line">    a, b, c, d = x.get(y)</span><br><span class="line">    resa, resb = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> (a &lt;= b &lt;= <span class="number">0</span> <span class="keyword">and</span> c &lt;= d &lt;= <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> Interval(b * d, a * c)</span><br><span class="line">    <span class="keyword">elif</span> (a &lt;= b &lt;= <span class="number">0</span> <span class="keyword">and</span> d &gt;= c &gt;= <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> Interval(a * d, b * c)</span><br><span class="line">    <span class="keyword">elif</span> (b &gt;= a &gt;= <span class="number">0</span> <span class="keyword">and</span> d &gt;= c &gt;= <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> Interval(a * c, b * d)</span><br><span class="line">    <span class="keyword">elif</span> (b &gt;= a &gt;= <span class="number">0</span> <span class="keyword">and</span> c &lt;= d &lt;= <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> Interval(b * c, a * d)</span><br><span class="line">    <span class="keyword">elif</span> (b &gt;= <span class="number">0</span> &gt;= a <span class="keyword">and</span> d &gt;= c &gt;= <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> Interval(a * d, b * d)</span><br><span class="line">    <span class="keyword">elif</span> (b &gt;= <span class="number">0</span> &gt;= a <span class="keyword">and</span> c &lt;= d &lt;= <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> Interval(b * c, a * c)</span><br><span class="line">    <span class="keyword">elif</span> (b &gt;= a &gt;= <span class="number">0</span> <span class="keyword">and</span> c &lt;= <span class="number">0</span> &lt;= d):</span><br><span class="line">        <span class="keyword">return</span> Interval(b * c, b * d)</span><br><span class="line">    <span class="keyword">elif</span> (a &lt;= b &lt;= <span class="number">0</span> <span class="keyword">and</span> c &lt;= <span class="number">0</span> &lt;= d):</span><br><span class="line">        <span class="keyword">return</span> Interval(a * d, a * c)</span><br><span class="line">    <span class="keyword">elif</span> (a &lt;= <span class="number">0</span> &lt;= b <span class="keyword">and</span> c &lt;= <span class="number">0</span> &lt;= d):</span><br><span class="line">        <span class="keyword">return</span> Interval(<span class="built_in">min</span>(a * d, b * c), <span class="built_in">max</span>(a * c, b * d))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确性测试</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_interval</span>():</span><br><span class="line">    a = random.randint(<span class="number">0</span>, <span class="number">10000</span>) - <span class="number">50</span></span><br><span class="line">    b = random.randint(<span class="number">0</span>, <span class="number">10000</span>) - <span class="number">50</span></span><br><span class="line">    <span class="keyword">if</span> (a &gt; b):</span><br><span class="line">        a, b = b, a</span><br><span class="line">    <span class="keyword">return</span> Interval(a, b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">equal</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a.lbound() == b.lbound() <span class="keyword">and</span> a.ubound() == b.ubound()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line">    x, y = random_interval(), random_interval()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">not</span> equal(mul(x, y), x * y)):</span><br><span class="line">        <span class="built_in">print</span>(mul(x, y), x * y)</span><br><span class="line">        <span class="keyword">raise</span> AssertionError</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;OK &quot;</span>, _)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间测试</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">    x, y = random_interval(), random_interval()</span><br><span class="line">    z = mul(x, y)</span><br><span class="line"></span><br><span class="line">end_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;time: &quot;</span>, end_time - start_time)</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">    x, y = random_interval(), random_interval()</span><br><span class="line">    z = x * y</span><br><span class="line"></span><br><span class="line">end_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;time: &quot;</span>, end_time - start_time)</span><br><span class="line"></span><br><span class="line"><span class="comment"># time:  2.0358922481536865</span></span><br><span class="line"><span class="comment"># time:  2.1305015087127686</span></span><br></pre></td></tr></table></figure><p>经过时间测试, 新的分类乘法函数比之前的函数快了一丁点</p><h2 id="2-12">2.12</h2><p>见 2.1.4 <code>PercentInterval</code> 类</p><h2 id="2-13">2.13</h2><p>令 $a, b = PercentInterval(x_1, p_1), PercentInterval(x_2, p_2)$ <br>两者相乘, $c = Interval(x_1 x_2(1-p_1)(1-p_2), (x_1 x_2(1+p_1)(1+p_2))$ <br>又因为 $p_1p_2$ 非常小, 所以 $c$ 可以近似为 $Interval(x_1x_2(1-p_1-p_2), x_1x_2(1+p_1+p_2))$ <br>所以可转换为 $c = PercentInterval(x_1x_2, p_1+p_2)$</p><h2 id="2-14">2.14</h2><p>浮点数误差导致误差甚至完全错误的结果</p><h2 id="2-15">2.15</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = PercentInterval(<span class="number">100</span>, <span class="number">0.5</span>)</span><br><span class="line">b = PercentInterval(<span class="number">100</span>, <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(part1(a, b))</span><br><span class="line"><span class="built_in">print</span>(part2(a, b))</span><br><span class="line"></span><br><span class="line"><span class="comment"># (8.333333333333334, 225.0)</span></span><br><span class="line"><span class="comment"># (25.0, 75.0)</span></span><br></pre></td></tr></table></figure><p>看似 <code>part2</code> 计算的结果更加准确</p><p><code>Eva</code> 的说法正确</p><h2 id="2-16">2.16</h2><p>这是区间的运算, 两种表达式并不等价</p><p>设计: …?</p><h2 id="2-17">2.17</h2><p>见正文</p><h2 id="2-18">2.18</h2><p>见正文</p><h2 id="2-19">2.19</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">car</span>(<span class="params">lst</span>):</span><br><span class="line">    <span class="keyword">return</span> lst[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cdr</span>(<span class="params">lst</span>):</span><br><span class="line">    <span class="keyword">return</span> lst[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">no_more</span>(<span class="params">coin_values</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(coin_values) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">first_denomination</span>(<span class="params">coin_values</span>):</span><br><span class="line">    <span class="keyword">return</span> car(coin_values)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">except_first_denomination</span>(<span class="params">coin_values</span>):</span><br><span class="line">    <span class="keyword">return</span> cdr(coin_values)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cc</span>(<span class="params">amount, coin_values</span>):</span><br><span class="line">    <span class="keyword">if</span> (amount == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (amount &lt; <span class="number">0</span> <span class="keyword">or</span> no_more(coin_values)):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    value = first_denomination(coin_values)</span><br><span class="line">    a = cc(amount, except_first_denomination(coin_values))</span><br><span class="line">    b = cc(amount - value, coin_values)</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">us_coins = [<span class="number">50</span>, <span class="number">25</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line">uk_coins = [<span class="number">100</span>, <span class="number">50</span>, <span class="number">25</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0.5</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cc(<span class="number">100</span>, uk_coins))</span><br></pre></td></tr></table></figure><p>不会, 因为组合方式是一定的</p><h2 id="2-20">2.20</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">same_parity</span>(<span class="params">*args</span>):</span><br><span class="line">    tmp, res = args[<span class="number">0</span>] % <span class="number">2</span>, []</span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">        <span class="keyword">if</span> (arg % <span class="number">2</span> == tmp):</span><br><span class="line">            res.append(arg)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(same_parity(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>))</span><br><span class="line"><span class="built_in">print</span>(same_parity(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>))</span><br></pre></td></tr></table></figure><h2 id="2-21">2.21</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square_list_items_1</span>(<span class="params">lst</span>):</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">        res.append(x * x)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">map</span>(<span class="params">lst, proc</span>):</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">        res.append(proc(x))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square_list_items_2</span>(<span class="params"><span class="built_in">list</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">map</span>(<span class="built_in">list</span>, <span class="keyword">lambda</span> x: x * x)</span><br><span class="line"></span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(square_list_items_1(lst))</span><br><span class="line"><span class="built_in">print</span>(square_list_items_2(lst))</span><br></pre></td></tr></table></figure><h2 id="2-22">2.22</h2><p>第一个程序是每次把结果放在开头<br>第二个程序是把一个 <code>list</code> <code>cons</code> 在一个 <code>atom</code> 上</p><h2 id="2-23">2.23</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">for_each</span>(<span class="params">lst, proc</span>):</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(lst) == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    proc(lst[<span class="number">0</span>])</span><br><span class="line">    for_each(lst[<span class="number">1</span>:], proc)</span><br></pre></td></tr></table></figure><h2 id="2-24">2.24</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">1</span> (<span class="name">2</span> (<span class="name">3</span> <span class="number">4</span>)))</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> </span><br><span class="line">  <span class="number">2</span></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">    <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="2-25">2.25</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">3</span>, [<span class="number">5</span>, <span class="number">7</span>], <span class="number">9</span>]</span><br><span class="line">y = [[<span class="number">7</span>]]</span><br><span class="line">z = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, [<span class="number">5</span>, [<span class="number">6</span>, <span class="number">7</span>]]]]]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">car</span>(<span class="params">lst</span>):</span><br><span class="line">    <span class="keyword">return</span> lst[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cdr</span>(<span class="params">lst</span>):</span><br><span class="line">    <span class="keyword">return</span> lst[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(car(cdr(car(cdr(cdr(x))))))</span><br><span class="line"><span class="built_in">print</span>(car(car(y)))</span><br><span class="line"><span class="built_in">print</span>(car(cdr(car(cdr(car(cdr(car(cdr((car(cdr((car(cdr(z)))))))))))))))</span><br></pre></td></tr></table></figure><h2 id="2-26">2.26</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>)</span><br><span class="line">((<span class="name">1</span> <span class="number">2</span> <span class="number">3</span>) <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>)</span><br><span class="line">((<span class="name">1</span> <span class="number">2</span> <span class="number">3</span>) (<span class="name">4</span> <span class="number">5</span> <span class="number">6</span>))</span><br></pre></td></tr></table></figure><h2 id="2-27">2.27</h2><p>见正文</p><h2 id="2-28">2.28</h2><p>见正文</p><h2 id="2-29">2.29</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mobile</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, l = <span class="literal">None</span>, r = <span class="literal">None</span></span>):</span><br><span class="line">        self.left, self.right = l, r</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">left_branch</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.left</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">right_branch</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">total_weight</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">cur_node</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(cur_node, Mobile):</span><br><span class="line">                a = <span class="built_in">iter</span>(cur_node.left_branch().branch_structure()) <span class="comment"># type: ignore</span></span><br><span class="line">                b = <span class="built_in">iter</span>(cur_node.right_branch().branch_structure()) <span class="comment"># type: ignore</span></span><br><span class="line">                <span class="keyword">return</span> a + b</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> cur_node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_balance</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">cur_node</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(cur_node, Mobile):</span><br><span class="line">                lb = cur_node.left_branch()</span><br><span class="line">                rb = cur_node.right_branch()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">assert</span>(lb != <span class="literal">None</span> <span class="keyword">and</span> rb != <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">                ls = lb.branch_structure()</span><br><span class="line">                rs = rb.branch_structure()</span><br><span class="line"></span><br><span class="line">                lw = ls <span class="keyword">if</span> <span class="built_in">type</span>(ls) == <span class="built_in">int</span> <span class="keyword">else</span> ls.total_weight()</span><br><span class="line">                rw = rs <span class="keyword">if</span> <span class="built_in">type</span>(rs) == <span class="built_in">int</span> <span class="keyword">else</span> rs.total_weight()</span><br><span class="line"></span><br><span class="line">                ll, rl = lb.branch_length(), rb.branch_length()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (lw * ll != rw * rl):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">                <span class="keyword">return</span> check(ls) <span class="keyword">and</span> check(rs)</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> check(self)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Branch</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, l, s</span>):</span><br><span class="line">        self.length, self.structure = l, s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">branch_length</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">branch_structure</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.structure</span><br><span class="line"></span><br><span class="line">lb = Branch(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">rb = Branch(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">m = Mobile(lb, rb)</span><br><span class="line"></span><br><span class="line">lb2 = Branch(<span class="number">2</span>, m)</span><br><span class="line">rb2 = Branch(<span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line">m2 = Mobile(lb2, rb2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(m2.total_weight())</span><br><span class="line"><span class="built_in">print</span>(m2.is_balance())</span><br></pre></td></tr></table></figure><p>只需要对选择函数做修改即可</p><h2 id="2-30">2.30</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> x * x</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">cur_node</span>):</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> cur_node.children:</span><br><span class="line">            res += [<span class="built_in">iter</span>(child)]</span><br><span class="line">        <span class="keyword">return</span> TreeNode(square(cur_node.value), res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(self)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(root.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x * x))</span><br><span class="line"><span class="built_in">print</span>(root.square())</span><br></pre></td></tr></table></figure><h2 id="2-31">2.31</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square_tree</span>(<span class="params">cur_node</span>):</span><br><span class="line">    <span class="keyword">return</span> cur_node.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x * x)</span><br></pre></td></tr></table></figure><h2 id="2-32">2.32</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">subsets</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">if</span> (s == []):</span><br><span class="line">        <span class="keyword">return</span> [[]]</span><br><span class="line">    rest = subsets(s[<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">return</span> rest + <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: [s[<span class="number">0</span>]] + x, rest))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先拿出第一个元素, 找出后面所有元素形成的子集 <br>然后把每个子集前面加上这第一个元素, 在算上原来的子集, 就是新子集</p><h2 id="2-33">2.33</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">map_new</span>(<span class="params">p, seq</span>):</span><br><span class="line">    <span class="keyword">return</span> accumulate(<span class="keyword">lambda</span> x, y: cons(p(x), y), [], seq)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">lst1, lst2</span>):</span><br><span class="line">    <span class="keyword">return</span> accumulate(cons, lst2, lst1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">length</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="keyword">return</span> accumulate(<span class="keyword">lambda</span> x, y: y + <span class="number">1</span>, <span class="number">0</span>, seq)</span><br></pre></td></tr></table></figure><p>def horner_eval(x, coefficient_sequence):<br>return accumulate(lambda this_coeff, higher_terms: this_coeff + higher_terms * x,<br>0, coefficient_sequence)</p><h2 id="2-34">2.34</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">horner_eval</span>(<span class="params">x, coefficient_sequence</span>):</span><br><span class="line">    <span class="keyword">return</span> accumulate(<span class="keyword">lambda</span> this_coeff, higher_terms: this_coeff + higher_terms * x, </span><br><span class="line">                      <span class="number">0</span>, coefficient_sequence)</span><br></pre></td></tr></table></figure><h2 id="2-35">2.35</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_leaves_new</span>(<span class="params">cur_node</span>):</span><br><span class="line">    <span class="keyword">return</span> accumulate(<span class="keyword">lambda</span> x, y: y + <span class="number">1</span>, <span class="number">0</span>, </span><br><span class="line">                      <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x, enumerate_tree(cur_node))))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-36">2.36</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">accumulate_n</span>(<span class="params">op, init, seqs</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">firsts</span>(<span class="params">seqs</span>):</span><br><span class="line">        <span class="keyword">return</span> [car(x) <span class="keyword">for</span> x <span class="keyword">in</span> seqs]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rests</span>(<span class="params">seqs</span>):</span><br><span class="line">        <span class="keyword">return</span> [cdr(x) <span class="keyword">for</span> x <span class="keyword">in</span> seqs]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(car(seqs)) == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">return</span> cons(accumulate(op, init, firsts(seqs)),</span><br><span class="line">                accumulate_n(op, init, rests(seqs)))</span><br></pre></td></tr></table></figure><h2 id="2-37">2.37</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix_vector</span>(<span class="params">m, v</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> mi: accumulate(add, <span class="number">0</span>, accumulate_n(mul, <span class="number">1</span>, [mi, v])), m))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transpose</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">return</span> accumulate_n(cons, [], m)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix_matrix</span>(<span class="params">m, n</span>):</span><br><span class="line">    cols = transpose(n)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> mi: matrix_vector(cols, mi), m))</span><br></pre></td></tr></table></figure><h2 id="2-38">2.38</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ford_left</span>(<span class="params">op, initial, lst</span>):</span><br><span class="line">    res = initial</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">        res = op(res, x)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">div</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a / b</span><br><span class="line"><span class="built_in">print</span>(accumulate(div, <span class="number">1</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line"><span class="built_in">print</span>(ford_left(div, <span class="number">1</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_list</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(args)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(accumulate(my_list, [], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line"><span class="built_in">print</span>(ford_left(my_list, [], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></table></figure><h2 id="2-39">2.39</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="keyword">return</span> accumulate(<span class="keyword">lambda</span> x, y: y + [x], [], seq)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_new</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="keyword">return</span> ford_left(<span class="keyword">lambda</span> x, y: [y] + x, [], seq)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(reverse([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line"><span class="built_in">print</span>(reverse_new([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></table></figure><h2 id="2-40">2.40</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">unique_pairs</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> flatmap(<span class="keyword">lambda</span> x: <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> y: [x, y], </span><br><span class="line">                                      enumerate_interval(<span class="number">1</span>, x - <span class="number">1</span>))),</span><br><span class="line">                   enumerate_interval(<span class="number">1</span>, n))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prime_sum_pairs</span>(<span class="params">n</span>):</span><br><span class="line">    tmp = unique_pairs(n)</span><br><span class="line">    tmp = <span class="built_in">filter</span>(<span class="keyword">lambda</span> pair: is_prime(<span class="built_in">sum</span>(pair)), tmp)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> pair: [*pair, <span class="built_in">sum</span>(pair)], tmp))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(prime_sum_pairs(<span class="number">6</span>))</span><br></pre></td></tr></table></figure><h2 id="2-41">2.41</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">unique_triple</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> flatmap(<span class="keyword">lambda</span> x: <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> y: [x] + y,</span><br><span class="line">                                     unique_pairs(x - <span class="number">1</span>))),</span><br><span class="line">                   enumerate_interval(<span class="number">1</span>, n))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question_2_41</span>(<span class="params">n, s</span>):</span><br><span class="line">    tmp = unique_triple(n)</span><br><span class="line">    tmp = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: <span class="built_in">sum</span>(x) == s, tmp)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(tmp)</span><br></pre></td></tr></table></figure><h2 id="2-42">2.42</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">queens</span>(<span class="params">board_size</span>):</span><br><span class="line"></span><br><span class="line">    empty_board = [[]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_safe</span>(<span class="params">k, positions</span>):</span><br><span class="line">        cur = positions[k - <span class="number">1</span>]</span><br><span class="line">        rest = positions[:k - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> (rest.count(cur) != <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, k - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> (k - i - <span class="number">1</span> == <span class="built_in">abs</span>(positions[i] - cur)):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">adjoin_position</span>(<span class="params">new_row, k, rest_of_queens</span>):</span><br><span class="line">        <span class="keyword">return</span> rest_of_queens + [new_row]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">queen_cols</span>(<span class="params">k</span>):</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> empty_board</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">filter</span>(<span class="keyword">lambda</span> positions: is_safe(k, positions),</span><br><span class="line">                      flatmap(<span class="keyword">lambda</span> rest_of_queens: </span><br><span class="line">                                <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> new_row: </span><br><span class="line">                                           adjoin_position(new_row, k, rest_of_queens),</span><br><span class="line">                                         enumerate_interval(<span class="number">1</span>, board_size))),</span><br><span class="line">                              queen_cols(k - <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> queen_cols(board_size)</span><br></pre></td></tr></table></figure><p>不抽象版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">new_queen</span>(<span class="params">n, cur, state</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_safe</span>(<span class="params">k, positions</span>):</span><br><span class="line">        cur = positions[k]</span><br><span class="line">        rest = positions[:k]</span><br><span class="line">        <span class="keyword">if</span> (rest.count(cur) != <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, k):</span><br><span class="line">            <span class="keyword">if</span> (k - i == <span class="built_in">abs</span>(positions[i] - cur)):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n == cur):</span><br><span class="line">        <span class="keyword">return</span> [state]</span><br><span class="line"></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> (is_safe(cur, state + [row])):</span><br><span class="line">            res += new_queen(n, cur + <span class="number">1</span>, state + [row])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="2-43">2.43</h2><p>原来是枚举 <code>queen_cols(k - 1)</code> 次 <code>enumerate_interval</code> <br>现在是枚举 <code>enumerate_interval</code> 次 <code>queen_cols(k - 1)</code></p><p>看似没有区别, 实际上原来往下递归之后结果就保存住了 <br>改代码之后往下递归被重复执行了 <code>board_size</code> 次 <br>所以大概时间是 $T * board_size$ 次</p><h2 id="2-44-2-52">2.44 ~ 2.52</h2><p>目前以作者能力无法实现 <code>painter</code>, 故无法运行代码 <br>难以确认作业代码的正确性, 故跳过</p><h2 id="2-53">2.53</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">a</span> b c)</span><br><span class="line">((<span class="name">george</span>))</span><br><span class="line">(<span class="name">y1</span> y2)</span><br><span class="line">#f</span><br><span class="line">#f</span><br><span class="line">#t</span><br></pre></td></tr></table></figure><h2 id="2-54">2.54</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">equal</span>(<span class="params">lst1, lst2</span>):</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(lst1) != <span class="built_in">len</span>(lst2)):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lst1)):</span><br><span class="line">        <span class="keyword">if</span> (lst1[i] != lst2[i]):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-55">2.55</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">car</span></span> &#x27;<span class="symbol">&#x27;abracadabra</span>)</span><br><span class="line">(<span class="name"><span class="built_in">car</span></span> &#x27;(quote abracadabra))</span><br><span class="line">(<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">quote</span></span> abracadabra))</span><br><span class="line">quote</span><br></pre></td></tr></table></figure><h2 id="2-56">2.56</h2><p>见正文 “功能更全面的实现” 的 <code>is_exponentiation</code> 和 <code>__pow__</code> 函数</p><h2 id="2-57">2.57</h2><p>在正文 “功能更全面的实现” 中 <code>second</code> 函数多加两行代码即可</p><h2 id="2-58">2.58</h2><p>更改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MidExpression</span>(<span class="title class_ inherited__">Expression</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">type</span>(self.val) == <span class="built_in">list</span>):</span><br><span class="line">            <span class="keyword">return</span> MidExpression(self.val[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">raise</span> AssertionError()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">type_exp</span>(<span class="params">self, which</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>(self.val) == <span class="built_in">list</span> <span class="keyword">and</span> self.val[<span class="number">1</span>] == which</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__pow__</span>(<span class="params">self, other</span>):</span><br><span class="line">        p1, p2 = self.val, other.val</span><br><span class="line">        <span class="keyword">if</span> (p2 == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> MidExpression(p1)</span><br><span class="line">        <span class="keyword">if</span> (p2 == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> MidExpression(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> MidExpression([p1, <span class="string">&quot;**&quot;</span>, p2])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        a1, a2 = self.val, other.val</span><br><span class="line">        <span class="keyword">if</span> (a1 == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> MidExpression(a2)</span><br><span class="line">        <span class="keyword">if</span> (a2 == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> MidExpression(a1)</span><br><span class="line">        <span class="keyword">if</span> (is_number(a1) <span class="keyword">and</span> is_number(a2)):</span><br><span class="line">            <span class="keyword">return</span> MidExpression(a1 + a2)</span><br><span class="line">        <span class="keyword">return</span> MidExpression([a1, <span class="string">&quot;+&quot;</span>, a2])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, other</span>):</span><br><span class="line">        m1, m2 = self.val, other.val</span><br><span class="line">        <span class="keyword">if</span> (m1 == <span class="number">0</span> <span class="keyword">or</span> m2 == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> MidExpression(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> (m1 == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> MidExpression(m2)</span><br><span class="line">        <span class="keyword">if</span> (m2 == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> MidExpression(m1)</span><br><span class="line">        <span class="keyword">if</span> (is_number(m1) <span class="keyword">and</span> is_number(m2)):</span><br><span class="line">            <span class="keyword">return</span> MidExpression(m1 * m2)</span><br><span class="line">        <span class="keyword">return</span> MidExpression([m1, <span class="string">&quot;*&quot;</span>, m2])</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>至于不带括号的表达式, 需要构建表达式树 <br>无法通过修改谓词和选择函数来解决</p><h2 id="2-59">2.59</h2><p>见正文 <code>union</code></p><h2 id="2-60">2.60</h2><ol><li><code>adjoin_set</code>, $\Theta(1)$</li><li><code>union_set</code>, $\Theta(n)$<br>其他复杂度相同</li></ol><p>但是这样做总体复杂度的系数比较大 <br>在插入操作较多时建议使用这种, 否则使用上一种</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MultiSet</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, lst = <span class="literal">None</span></span>):</span><br><span class="line">        self.val = lst <span class="keyword">if</span> lst != <span class="literal">None</span> <span class="keyword">else</span> []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_element_of_set</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> self.val:</span><br><span class="line">            <span class="keyword">if</span> (x == val):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">adjoin_set</span>(<span class="params">self, val</span>):</span><br><span class="line">        self.val.append(val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">union_set</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> MultiSet(self.val + other.val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">intersection_set</span>(<span class="params">self, other</span>):</span><br><span class="line">        res = MultiSet()</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> other.val:</span><br><span class="line">            <span class="keyword">if</span> (self.is_element_of_set(x)):</span><br><span class="line">                res.val.append(x)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self.val)</span><br></pre></td></tr></table></figure><h2 id="2-61-2-62">2.61 ~ 2.62</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SortedSet</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.val = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">copy</span>(<span class="params">self</span>):</span><br><span class="line">        res = SortedSet()</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> self.val:</span><br><span class="line">            res.val.append(x)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_element_of_set</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> self.val:</span><br><span class="line">            <span class="keyword">if</span> (x == val):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> (x &gt; val):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">adjoin_set</span>(<span class="params">self, val</span>):</span><br><span class="line">        pos, n = <span class="number">0</span>, <span class="built_in">len</span>(self.val)</span><br><span class="line">        <span class="keyword">while</span> (pos &lt; n <span class="keyword">and</span> val &gt; self.val[pos]):</span><br><span class="line">            pos = pos + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (pos == n <span class="keyword">or</span> (pos &lt; n <span class="keyword">and</span> val != self.val[pos])):</span><br><span class="line">            self.val.insert(pos, val)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">union_set</span>(<span class="params">self, other</span>):</span><br><span class="line">        i, j, n, m = <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(self.val), <span class="built_in">len</span>(other.val)</span><br><span class="line">        res = SortedSet()</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n <span class="keyword">and</span> j &lt; m):</span><br><span class="line">            <span class="keyword">if</span> (self.val[i] &lt; other.val[j]):</span><br><span class="line">                res.val.append(self.val[i])</span><br><span class="line">                i = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> (self.val[i] &gt; other.val[j]):</span><br><span class="line">                res.val.append(other.val[j])</span><br><span class="line">                j = j + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> (self.val[i] == other.val[j]):</span><br><span class="line">                res.val.append(self.val[i])</span><br><span class="line">                i, j = i + <span class="number">1</span>, j + <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; n):</span><br><span class="line">            res.val.append(self.val[i])</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (j &lt; m):</span><br><span class="line">            res.val.append(other.val[j])</span><br><span class="line">            j = j + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self.val)</span><br></pre></td></tr></table></figure><h2 id="2-63">2.63</h2><p>产生同样结果 <br>第一种方法使用 <code>append</code> 复杂度为 $\Theta(n)$, 总复杂度为 $\Theta(n^2)$ <br>第二种方法使用 <code>cons</code> 复杂度为 $\Theta(1)$, 总复杂度为 $\Theta(n)$</p><p>第二种方法更优</p><h2 id="2-64">2.64</h2><p>往下递归, 左半部分是左子树, 右半部分是右子树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line">     <span class="number">3</span></span><br><span class="line">          <span class="number">1</span></span><br><span class="line">          <span class="number">5</span></span><br><span class="line">     <span class="number">11</span></span><br><span class="line">          <span class="number">9</span></span><br></pre></td></tr></table></figure><h2 id="2-65">2.65</h2><p>见正文</p><h2 id="2-66">2.66</h2><p>残缺版, 没有 <code>key</code> 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lookup</span>(<span class="params">given_key, <span class="built_in">dir</span></span>):</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">dir</span> == <span class="literal">None</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    entry_key = key(<span class="built_in">dir</span>.val)</span><br><span class="line">    <span class="keyword">if</span> (entry_key == given_key):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dir</span>.val</span><br><span class="line">    <span class="keyword">if</span> (entry_key &gt; given_key):</span><br><span class="line">        <span class="keyword">return</span> lookup(given_key, <span class="built_in">dir</span>.right)</span><br><span class="line">    <span class="keyword">if</span> (entry_key &lt; given_key):</span><br><span class="line">        <span class="keyword">return</span> lookup(given_key, <span class="built_in">dir</span>.left)</span><br></pre></td></tr></table></figure><h2 id="2-67">2.67</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADABBCA</span><br></pre></td></tr></table></figure><h2 id="2-68">2.68</h2><p>见正文</p><p>得到结果相同</p><h2 id="2-69">2.69</h2><p>见正文</p><h2 id="2-70">2.70</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tree = generate_huffman_tree([[<span class="string">&quot;a&quot;</span>, <span class="number">2</span>], [<span class="string">&quot;na&quot;</span>, <span class="number">16</span>], [<span class="string">&quot;boom&quot;</span>, <span class="number">1</span>], [<span class="string">&quot;sha&quot;</span>, <span class="number">3</span>],</span><br><span class="line">                              [<span class="string">&quot;get&quot;</span>, <span class="number">2</span>], [<span class="string">&quot;yip&quot;</span>, <span class="number">9</span>], [<span class="string">&quot;job&quot;</span>, <span class="number">2</span>], [<span class="string">&quot;wah&quot;</span>, <span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">isinstance</span>(tree, CodeTree))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tree.encode([<span class="string">&quot;get&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;job&quot;</span>]))</span><br><span class="line"><span class="built_in">print</span>(tree.encode([<span class="string">&quot;sha&quot;</span>, <span class="string">&quot;na&quot;</span>, <span class="string">&quot;na&quot;</span>, <span class="string">&quot;na&quot;</span>, <span class="string">&quot;na&quot;</span>, <span class="string">&quot;na&quot;</span>, <span class="string">&quot;na&quot;</span>, <span class="string">&quot;na&quot;</span>, <span class="string">&quot;na&quot;</span>]))</span><br><span class="line"><span class="built_in">print</span>(tree.encode([<span class="string">&quot;get&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;job&quot;</span>]))</span><br><span class="line"><span class="built_in">print</span>(tree.encode([<span class="string">&quot;sha&quot;</span>, <span class="string">&quot;na&quot;</span>, <span class="string">&quot;na&quot;</span>, <span class="string">&quot;na&quot;</span>, <span class="string">&quot;na&quot;</span>, <span class="string">&quot;na&quot;</span>, <span class="string">&quot;na&quot;</span>, <span class="string">&quot;na&quot;</span>, <span class="string">&quot;na&quot;</span>]))</span><br><span class="line"><span class="built_in">print</span>(tree.encode([<span class="string">&quot;wah&quot;</span>, <span class="string">&quot;yip&quot;</span>, <span class="string">&quot;yip&quot;</span>, <span class="string">&quot;yip&quot;</span>, <span class="string">&quot;yip&quot;</span>, <span class="string">&quot;yip&quot;</span>, <span class="string">&quot;yip&quot;</span>, <span class="string">&quot;yip&quot;</span>, <span class="string">&quot;yip&quot;</span>]))</span><br><span class="line"><span class="built_in">print</span>(tree.encode([<span class="string">&quot;sha&quot;</span>, <span class="string">&quot;boom&quot;</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>总共的二进制位数量是 84 <br>使用定长编码数量是 36 * 3 = 108</p><h2 id="2-71">2.71</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">        *</span><br><span class="line">       /\</span><br><span class="line">      *  16</span><br><span class="line">     /\</span><br><span class="line">    *  8</span><br><span class="line">   / \</span><br><span class="line">  *   4</span><br><span class="line"> /\</span><br><span class="line">1  2</span><br><span class="line"></span><br><span class="line">                  *</span><br><span class="line">                 /\</span><br><span class="line">                *  512</span><br><span class="line">               /\</span><br><span class="line">              *  256</span><br><span class="line">             /\</span><br><span class="line">            * 128</span><br><span class="line">           /\</span><br><span class="line">          *  64</span><br><span class="line">         /\</span><br><span class="line">        *  32</span><br><span class="line">       /\</span><br><span class="line">      *  16</span><br><span class="line">     /\</span><br><span class="line">    *  8</span><br><span class="line">   / \</span><br><span class="line">  *   4</span><br><span class="line"> /\</span><br><span class="line">1  2</span><br></pre></td></tr></table></figure><p>最频繁 1 个, 最不频繁 $n - 1$ 个</p><h2 id="2-72">2.72</h2><p>对于特殊情况</p><p>编码一个最频繁: $\Theta(1)$, 一个最不频繁: $\Theta(n)$</p><h2 id="2-73">2.73</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">dir</span> = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_number</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">type</span>(x) == <span class="built_in">int</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_variable</span>(<span class="params">exp</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">type</span>(exp) != <span class="built_in">int</span> <span class="keyword">and</span> <span class="built_in">type</span>(exp) != <span class="built_in">list</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_same_variable</span>(<span class="params">exp, var</span>):</span><br><span class="line">    <span class="keyword">return</span> is_variable(exp) <span class="keyword">and</span> is_variable(var) <span class="keyword">and</span> exp == var</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">operator</span>(<span class="params">exp</span>):</span><br><span class="line">    <span class="keyword">return</span> exp[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">operands</span>(<span class="params">exp</span>):</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(exp) &gt; <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">return</span> exp[<span class="number">1</span>], [operator(exp), *exp[<span class="number">2</span>:]]</span><br><span class="line">    <span class="keyword">return</span> exp[<span class="number">1</span>], exp[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dir</span>[a][b]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">a, b, func</span>):</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">dir</span>.get(a) == <span class="literal">None</span>):</span><br><span class="line">        <span class="built_in">dir</span>[a] = <span class="built_in">dict</span>()</span><br><span class="line">    <span class="built_in">dir</span>[a][b] = func</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deriv</span>(<span class="params">exp, var</span>):</span><br><span class="line">    <span class="keyword">if</span> (is_number(exp)):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (is_variable(exp)):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(is_same_variable(exp, var))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> get(<span class="string">&quot;deriv&quot;</span>, operator(exp))(*operands(exp), var)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">install_deriv_package</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_helper</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">if</span> (is_number(a) <span class="keyword">and</span> is_number(b)):</span><br><span class="line">            <span class="keyword">return</span> a + b</span><br><span class="line">        <span class="keyword">elif</span> (a == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> b</span><br><span class="line">        <span class="keyword">elif</span> (b == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&quot;+&quot;</span>, a, b]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mul_helper</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> b</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">0</span> <span class="keyword">or</span> b == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&quot;*&quot;</span>, a, b]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pow_helper</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&quot;**&quot;</span>, a, b]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b, var</span>):</span><br><span class="line">        <span class="keyword">return</span> add_helper(deriv(a, var), deriv(b, var))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">a, b, var</span>):</span><br><span class="line">        <span class="keyword">return</span> add_helper(mul_helper(a, deriv(b, var)),</span><br><span class="line">                          mul_helper(deriv(a, var), b))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pow</span>(<span class="params">a, b, var</span>):</span><br><span class="line">        <span class="keyword">return</span> mul_helper(b - <span class="number">1</span>, </span><br><span class="line">                          mul_helper(pow_helper(a, b - <span class="number">1</span>),</span><br><span class="line">                                     deriv(a, var)))</span><br><span class="line"></span><br><span class="line">    put(<span class="string">&quot;deriv&quot;</span>, <span class="string">&quot;*&quot;</span>, mul)</span><br><span class="line">    put(<span class="string">&quot;deriv&quot;</span>, <span class="string">&quot;+&quot;</span>, add)</span><br><span class="line">    put(<span class="string">&quot;deriv&quot;</span>, <span class="string">&quot;**&quot;</span>, <span class="built_in">pow</span>)</span><br><span class="line"></span><br><span class="line">install_deriv_package()</span><br><span class="line"></span><br><span class="line">exp = [<span class="string">&quot;*&quot;</span>, <span class="number">3</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;x&quot;</span>, [<span class="string">&quot;+&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;1&quot;</span>]]</span><br><span class="line">exp = [<span class="string">&quot;**&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(deriv(exp, <span class="string">&quot;x&quot;</span>))</span><br><span class="line">        </span><br></pre></td></tr></table></figure><ol><li>把之前的 <code>is_sum</code>, <code>is_product</code> 等函数用 <code>get</code> 的第二个参数代替, 从而实现选择的功能 <br>因为 <code>number?</code> 和 <code>is_same_variable</code> 后面只有一个参数</li><li>见代码</li><li>加入乘幂</li><li>除了题中的改动, 只需要改动 <code>install_deriv_package</code> 下面的 <code>put</code> 语句</li></ol><h2 id="2-74">2.74</h2><p>题目不明确, 跳过</p><h2 id="2-75">2.75</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_from_mag_ang</span>(<span class="params">r, a</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">op</span>):</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;real_part&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> r * math.cos(a)</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;imag_part&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> r * math.sin(a)</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;magnitude&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> r</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;angle&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">return</span> dispatch</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-76">2.76</h2><ol><li>显式分派:<ol><li>增加新操作需要使用者避免命名冲突</li><li>增加新类型需要改动通用操作</li><li>结论: 输</li></ol></li><li>数据导向:<ol><li>很方便地通过包机制增加新类型和新的通用操作</li><li>结论: 赢</li></ol></li><li>消息传递:<ol><li>将数据对象和操作整合在一起, 可以很方便地增加新类型</li><li>增加新操作时所有对象都要全部重新实例化</li><li>结论: 寄</li></ol></li></ol><h2 id="2-77">2.77</h2><p>代码见正文</p><p>因为不加那几行代码的话, 直接调用的是 <code>complex</code> 包里面的 <code>magnitude</code> 操作 <br>此时 <code>complex</code> 包里面并没有这个操作, 所以加上就好了</p><p><code>magnitude</code> 有三个, 第一个是最外层的, 第二个是 <code>complex</code> 包里面的, 第三个是 <code>rectangle</code> 里面的\</p><p><code>apply_generic</code> 函数在前两次 <code>magnitude</code> 中被调用了两次<br>第一次剥去 <code>complex</code>, 第二次剥去 <code>rectangle</code></p><h2 id="2-78">2.78</h2><p>见正文</p><h2 id="2-79">2.79</h2><p>见正文</p><h2 id="2-80">2.80</h2><p>见正文</p><h2 id="2-81">2.81</h2><ol><li>没有相应的类型转换操作</li><li>如果没有相应的操作, 那么就进行自己到自己的类型转换 <br>从而陷入死循环, 寄</li><li>加一个 <code>if</code> 即可, 不写了</li></ol><h2 id="2-82">2.82</h2><p>举例: 只有 <code>complex</code> 才实现了这个功能, 而传入的参数最高才是 <code>rational</code>  <br>这样永远都找不到合适的过程</p><h2 id="2-83">2.83</h2><p>见正文中各个包的 <code>raise</code> 部分以及通用操作的 <code>raise</code></p><h2 id="2-84">2.84</h2><p>见正文 <code>install_depth_package</code>  使用了一种比较简单的形式</p><h2 id="2-85">2.85</h2><p>见代码</p><h2 id="2-86">2.86</h2><p>过于复杂, 暂时搁置</p><h2 id="2-87">2.87</h2><p>见正文</p><h2 id="2-88">2.88</h2><p>见正文</p><h2 id="2-89">2.89</h2><p>见正文</p><h2 id="2-90">2.90</h2><p>见正文</p><h2 id="2-91">2.91</h2><p>见正文</p><h2 id="2-92">2.92</h2><p>见正文</p><h2 id="2-93">2.93</h2><p>见正文</p><h2 id="2-94">2.94</h2><p>见正文</p><h2 id="2-95">2.95</h2><p>因为长除法的时候, 无法除尽, 出现精度问题</p><h2 id="2-96-2-97">2.96 ~ 2.97</h2><p>暂时搁置</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scheme </tag>
            
            <tag> Python </tag>
            
            <tag> SICP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SICP 学习笔记 (第三章)</title>
      <link href="/2023/07/02/3sicp/"/>
      <url>/2023/07/02/3sicp/</url>
      
        <content type="html"><![CDATA[<h1>Chapter 3: 模块化, 对象和状态</h1><p>前两章介绍了组成程序的基本元素, 把函数和数据组合在一起构造出复合的实体 <br>认识到抽象有着至关重要的作用</p><p>但我们还需要一些能够帮助我们构造起模块化的大型系统的策略 <br>使这些系统能够自然地划分为一些具有内聚力的部分, 从而使得这些部分能够分别开发和维护</p><p>有一种强有力的策略是基于被模拟系统的结构去设计程序的结构</p><ol><li>对于有关的物理系统里的每个对象, 我们构造起一个与之对应的计算对象</li><li>对于该系统中的每个活动, 在自己的计算系统中定义一种符号操作</li></ol><p>如果我们在系统的组织上非常成功, 那么在需要添加新特征或者排除旧东西错误的时候, 就只需要在局部工作</p><p>本章研究两种特点鲜明的组织策略</p><ol><li>将注意力集中在对象上, 将一个大型系统看成一大批对象</li><li>将注意力集中在流过系统的信息流上</li></ol><p>对于对象途径而言, 我们把必须关注计算对象可以怎么样变化又同时保证其标识 <br>这将迫使我们抛弃老的计算的代换模型, 转向环境模型</p><p>流方式能够用于松解对时间的模拟和各种事件发生的顺序, 可以通过延时求值来做到这一点</p><h2 id="3-1-赋值和局部状态">3.1 赋值和局部状态</h2><p>我们可以使用几个变量来刻画一个对象的状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">balance = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">withdraw</span>(<span class="params">amount</span>):</span><br><span class="line">    <span class="keyword">global</span> balance</span><br><span class="line">    <span class="keyword">if</span> (balance &gt;= amount):</span><br><span class="line">        balance = balance - amount</span><br><span class="line">        <span class="keyword">return</span> balance</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Insufficient fundds&quot;</span></span><br></pre></td></tr></table></figure><p>之前的所有函数都可以看作数学函数, 因为他们对某些确定的参数只会返回确定的结果</p><p>但这样的实现有些问题, 因为 <code>balance</code> 被定义在全局, 可以被其他函数检查或者修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">new_withdraw</span>():</span><br><span class="line">    balance = <span class="number">100</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">amount</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> balance</span><br><span class="line">        <span class="keyword">if</span> (balance &gt;= amount):</span><br><span class="line">            balance = balance - amount</span><br><span class="line">            <span class="keyword">return</span> balance</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Insufficient funds&quot;</span></span><br><span class="line">    <span class="keyword">return</span> helper</span><br><span class="line"></span><br><span class="line">x = new_withdraw()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x(<span class="number">25</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, balance</span>):</span><br><span class="line">        self.balance = balance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">withdraw</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="keyword">if</span> (self.balance &gt;= amount):</span><br><span class="line">            self.balance = self.balance - amount</span><br><span class="line">            <span class="keyword">return</span> self.balance</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Insufficient funds&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deposit</span>(<span class="params">self, amount</span>):</span><br><span class="line">        self.balance = self.balance</span><br><span class="line">        self.balance += amount</span><br><span class="line">        <span class="keyword">return</span> self.balance</span><br><span class="line"></span><br><span class="line">acc = Account(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(acc.withdraw(<span class="number">50</span>))</span><br><span class="line"><span class="built_in">print</span>(acc.withdraw(<span class="number">60</span>))</span><br><span class="line"><span class="built_in">print</span>(acc.deposit(<span class="number">40</span>))</span><br><span class="line"><span class="built_in">print</span>(acc.withdraw(<span class="number">60</span>))</span><br></pre></td></tr></table></figure><p>这类似于之前的消息传递过程</p><h3 id="3-1-2-引进赋值所带来的利益">3.1.2 引进赋值所带来的利益</h3><p>现在考虑如何设计出一个生成随机出的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x2 = rand_update(x1)</span><br><span class="line">x2 = rand_update(x2)</span><br></pre></td></tr></table></figure><p>蒙特卡洛模拟: 从大集合里面随机选择实验样本, 并对这些实验结果的统计估计做出推断</p><p>随机选取的两个整数之间最大公约数是 1 的概率为 $\frac{6}{\pi ^2}$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">estimate_pi</span>(<span class="params">trials</span>):</span><br><span class="line">    <span class="keyword">return</span> math.sqrt(<span class="number">6</span> / monte_carlo(trials, cesaro_test))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cesaro_test</span>():</span><br><span class="line">    <span class="keyword">return</span> math.gcd(random.randint(<span class="number">1</span>, <span class="number">100000</span>), random.randint(<span class="number">1</span>, <span class="number">100000</span>)) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">monte_carlo</span>(<span class="params">trials, experiment</span>):</span><br><span class="line">    passed_trials = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(trials):</span><br><span class="line">        <span class="keyword">if</span> (experiment()):</span><br><span class="line">            passed_trials += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> passed_trials / trials</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(estimate_pi(<span class="number">1000000</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rand_update</span>(<span class="params">_</span>):</span><br><span class="line">    <span class="keyword">return</span> random.randint(<span class="number">1</span>, <span class="number">1000000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_gcd_test</span>(<span class="params">trials, initial_x</span>):</span><br><span class="line">    x = initial_x</span><br><span class="line">    passed_trials = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(trials):</span><br><span class="line">        x1 = rand_update(x)</span><br><span class="line">        x2 = rand_update(x1)</span><br><span class="line">        <span class="keyword">if</span> (math.gcd(x1, x2) == <span class="number">1</span>):</span><br><span class="line">            passed_trials += <span class="number">1</span></span><br><span class="line">        x = x2</span><br><span class="line">    <span class="keyword">return</span> passed_trials / trials</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.sqrt(<span class="number">6</span> / random_gcd_test(<span class="number">100000</span>, <span class="number">1</span>)))</span><br></pre></td></tr></table></figure><p>第一段不需要显式地操作 $x_1$, $x_2$, 而且生成随机数的操作被隔离, 可以更好地进行模块化</p><p>与所有状态都必须显式地操作和传递额外参数的方法相比 <br>通过引进赋值和将状态隐藏在局部变量的技术, 可以让我们以一种更模块化的方式来构造系统</p><h3 id="3-1-3-引进赋值的代价">3.1.3 引进赋值的代价</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_simplified_withdraw</span>(<span class="params">balance</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">amount</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> balance</span><br><span class="line">        balance -= amount</span><br><span class="line">        <span class="keyword">return</span> balance</span><br><span class="line">    <span class="keyword">return</span> helper</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_decrementer</span>(<span class="params">balance</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> amount: balance - amount</span><br></pre></td></tr></table></figure><p>只要我们不适用赋值, 同样参数对于同一函数的两次求值结果必然相同, 相当于计算数学函数 \</p><p>代换模型的基础是: 变量只不过是值的名字</p><p>但是引入赋值之后, 一个变量就索引着一个保存值的位置</p><p><strong>同一和变化</strong>:</p><p>如果一个语言支持在表达式里&quot;同一的东西可以相互替换&quot;, <br>这种替换不会改变表达式的值, 这个语言就具有<strong>引用透明性</strong></p><p>包含赋值操作也就打破了引用透明性</p><p>不用任何赋值的程序设计称为函数式编程 <br>大量使用赋值的程序设计称为命令式编程</p><p>命令式编程的一个问题式需要考虑赋值的先后顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    product, counter = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        product *= counter</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> product</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorial(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>更换 <code>product</code> 和 <code>counter</code> 的求值顺序, 结果就会变得不同 <br>所以带有赋值的程序强迫人们去考虑赋值的相对顺序 <br>而在函数式编程中, 这样的问题根本不会存在 <br>在考虑并发执行的进程中, 命令式编程的复杂度还会增加</p><h2 id="3-2-求值的环境模型">3.2 求值的环境模型</h2><p>一个环境就是框架的一个序列, 每个框架是包含着约束的表格 <br>这些约束将一些变量名字关联于对应的值, 并且在同一个框架里, 一个变量至多只能有一个约束</p><p>每个框架还包含着一个指针, 指向这一框架的外围环境 (全局的框架没有这个指针)</p><h3 id="3-2-1-求值规则">3.2.1 求值规则</h3><p>在求值的环境模型里 <br>将一个函数应用于一些实参, 将构造出一个新框架, 将函数中的形参约束到调用时的实参 <br>之后在构造的新环境的上下文中求值函数主体, 新框架的外围环境就是调用函数时的环境</p><h3 id="3-2-2-简单过程的应用">3.2.2 简单过程的应用</h3><p>本节分析一个实例</p><h3 id="3-2-3-将框架看作局部状态的展台">3.2.3 将框架看作局部状态的展台</h3><p>本节分析另一个实例</p><h3 id="3-2-4-内部定义">3.2.4 内部定义</h3><p>内部定义的函数被约束到当前环境中</p><h2 id="3-3-用变动数据做模拟">3.3 用变动数据做模拟</h2><p>在第二章中, 各种数据抽象包括选择函数和构造函数 <br>现在我们要加入改变函数</p><h3 id="3-3-1-变动的表结构">3.3.1 变动的表结构</h3><p>第一部分讲了 <code>set-car</code>, <code>set-cdr</code></p><p>第二部分: 共享和相等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = [a] + [a]</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">b[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line">b = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>]]</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line">b[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><p>两次输出不同</p><p>通过 <code>is</code> 检查两者地址是否相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = [a] + [a]</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">b[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b[<span class="number">0</span>] <span class="keyword">is</span> b[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">b = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>]]</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line">b[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b[<span class="number">0</span>] <span class="keyword">is</span> b[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h3 id="3-3-2-队列的表示">3.3.2 队列的表示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val = <span class="literal">None</span>, <span class="built_in">next</span> = <span class="literal">None</span></span>):</span><br><span class="line">        self.val, self.<span class="built_in">next</span> = val, <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.f, self.r = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">front_queue</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> (self.is_empty()):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;empty queue&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.front_ptr().val</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert_queue</span>(<span class="params">self, item</span>):</span><br><span class="line">        tmp = LinkNode(item, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> (self.is_empty()):</span><br><span class="line">            self.f, self.r = tmp, tmp</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">assert</span>(<span class="built_in">isinstance</span>(self.r, LinkNode))</span><br><span class="line">            self.r.<span class="built_in">next</span>, self.r = tmp, tmp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete_queue</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> (self.is_empty()):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;empty queue&quot;</span></span><br><span class="line">        <span class="keyword">assert</span>(<span class="built_in">isinstance</span>(self.f, LinkNode))</span><br><span class="line">        self.f = self.f.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    is_empty = <span class="keyword">lambda</span> self: self.f == <span class="literal">None</span></span><br><span class="line">    front_ptr = <span class="keyword">lambda</span> self: self.f</span><br><span class="line">    rear_ptr = <span class="keyword">lambda</span> self: self.r</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_front_ptr</span>(<span class="params">self, ptr</span>):</span><br><span class="line">        self.f = ptr</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_rear_ptr</span>(<span class="params">self, ptr</span>):</span><br><span class="line">        self.r = ptr</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        first = self.f</span><br><span class="line">        res = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">while</span> (first != <span class="literal">None</span>):</span><br><span class="line">            res += [first.val]</span><br><span class="line">            first = first.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(res)</span><br></pre></td></tr></table></figure><h3 id="3-3-3-表格的表示">3.3.3 表格的表示</h3><p>一维表格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Table</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.records = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lookup</span>(<span class="params">self, key</span>):</span><br><span class="line">        record = self.assoc(key)</span><br><span class="line">        <span class="keyword">if</span> (record):</span><br><span class="line">            <span class="keyword">return</span> record[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, key, value</span>):</span><br><span class="line">        record = self.assoc(key)</span><br><span class="line">        <span class="keyword">if</span> (record):</span><br><span class="line">            record[<span class="number">1</span>] = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.records.append([key, value])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">assoc</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">for</span> record <span class="keyword">in</span> self.records:</span><br><span class="line">            <span class="keyword">if</span> (record[<span class="number">0</span>] == key):</span><br><span class="line">                <span class="keyword">return</span> record</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>二维表格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Table</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, same_key = <span class="keyword">lambda</span> x, y : x == y</span>):</span><br><span class="line">        self.records = []</span><br><span class="line">        self.same_key = same_key</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lookup</span>(<span class="params">self, key</span>):</span><br><span class="line">        record = self.assoc(key)</span><br><span class="line">        <span class="keyword">if</span> (record):</span><br><span class="line">            <span class="keyword">return</span> record[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, key, value</span>):</span><br><span class="line">        record = self.assoc(key)</span><br><span class="line">        <span class="keyword">if</span> (record):</span><br><span class="line">            record[<span class="number">1</span>] = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.records.append([key, value])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">assoc</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">for</span> record <span class="keyword">in</span> self.records:</span><br><span class="line">            <span class="keyword">if</span> (self.same_key(record[<span class="number">0</span>], key)):</span><br><span class="line">                <span class="keyword">return</span> record</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Table2D</span>(<span class="title class_ inherited__">Table</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lookup</span>(<span class="params">self, key1, key2</span>):</span><br><span class="line">        table = self.assoc(key1)</span><br><span class="line">        <span class="keyword">if</span> (table):</span><br><span class="line">            <span class="keyword">return</span> table[<span class="number">1</span>].lookup(key2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, key1, key2, value</span>):</span><br><span class="line">        table = self.assoc(key1)</span><br><span class="line">        <span class="keyword">if</span> (table):</span><br><span class="line">            table[<span class="number">1</span>].insert(key2, value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            table = Table(self.same_key)</span><br><span class="line">            table.insert(key2, value)</span><br><span class="line">            <span class="built_in">super</span>().insert(key1, table)</span><br></pre></td></tr></table></figure><h3 id="3-3-4-数字电路的模拟器">3.3.4 数字电路的模拟器</h3><p>数字逻辑模拟系统是事件驱动的模拟程序的一个代表, 事件引发在随后时间发生的事件</p><h1>练习</h1><h2 id="3-1">3.1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_accumulater</span>(<span class="params"><span class="built_in">sum</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> <span class="built_in">sum</span></span><br><span class="line">        <span class="built_in">sum</span> += x</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line">    <span class="keyword">return</span> helper</span><br><span class="line"></span><br><span class="line">A = make_accumulater(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(A(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(A(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><h2 id="3-2">3.2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_monitored</span>(<span class="params">func</span>):</span><br><span class="line">    times = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> times</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="string">&quot;how_many_calls?&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> times</span><br><span class="line">        <span class="keyword">elif</span> (x == <span class="string">&quot;reset_count&quot;</span>):</span><br><span class="line">            times = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            times += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> func(x)</span><br><span class="line">    <span class="keyword">return</span> dispatch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = make_monitored(math.sqrt)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s(<span class="number">100</span>))</span><br><span class="line"><span class="built_in">print</span>(s(<span class="string">&quot;how_many_calls?&quot;</span>))</span><br><span class="line">s(<span class="string">&quot;reset_count&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s(<span class="number">144</span>))</span><br><span class="line"><span class="built_in">print</span>(s(<span class="string">&quot;how_many_calls?&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="3-3">3.3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, balance, password</span>):</span><br><span class="line">        self.balance = balance</span><br><span class="line">        self.password = password</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">withdraw</span>(<span class="params">self, password, amount</span>):</span><br><span class="line">        <span class="keyword">if</span> (password != self.password):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Incorrect password&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (self.balance &gt;= amount):</span><br><span class="line">            self.balance = self.balance - amount</span><br><span class="line">            <span class="keyword">return</span> self.balance</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Insufficient funds&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deposit</span>(<span class="params">self, amount</span>):</span><br><span class="line">        self.balance = self.balance</span><br><span class="line">        self.balance += amount</span><br><span class="line">        <span class="keyword">return</span> self.balance</span><br><span class="line"></span><br><span class="line">s = Account(<span class="number">100</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s.withdraw(<span class="string">&quot;3&quot;</span>, <span class="number">50</span>))</span><br><span class="line"><span class="built_in">print</span>(s.withdraw(<span class="string">&quot;4&quot;</span>, <span class="number">50</span>))</span><br><span class="line"><span class="built_in">print</span>(s.withdraw(<span class="string">&quot;4&quot;</span>, <span class="number">50</span>))</span><br><span class="line"><span class="built_in">print</span>(s.withdraw(<span class="string">&quot;4&quot;</span>, <span class="number">50</span>))</span><br><span class="line"><span class="built_in">print</span>(s.withdraw(<span class="string">&quot;4&quot;</span>, <span class="number">50</span>))</span><br><span class="line"><span class="built_in">print</span>(s.withdraw(<span class="string">&quot;4&quot;</span>, <span class="number">50</span>))</span><br><span class="line"><span class="built_in">print</span>(s.withdraw(<span class="string">&quot;4&quot;</span>, <span class="number">50</span>))</span><br><span class="line"><span class="built_in">print</span>(s.withdraw(<span class="string">&quot;4&quot;</span>, <span class="number">50</span>))</span><br></pre></td></tr></table></figure><h2 id="3-4">3.4</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">call_the_cops = <span class="keyword">lambda</span>: <span class="string">&quot;cops are coming&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, balance, password</span>):</span><br><span class="line">        self.balance = balance</span><br><span class="line">        self.password = password</span><br><span class="line">        self.times = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">withdraw</span>(<span class="params">self, password, amount</span>):</span><br><span class="line">        <span class="keyword">if</span> (password != self.password):</span><br><span class="line">            self.times += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> (self.times == <span class="number">7</span>):</span><br><span class="line">                <span class="keyword">return</span> call_the_cops()</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Incorrect password&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (self.balance &gt;= amount):</span><br><span class="line">            self.balance = self.balance - amount</span><br><span class="line">            <span class="keyword">return</span> self.balance</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Insufficient funds&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deposit</span>(<span class="params">self, amount</span>):</span><br><span class="line">        self.balance = self.balance</span><br><span class="line">        self.balance += amount</span><br><span class="line">        <span class="keyword">return</span> self.balance</span><br><span class="line"></span><br><span class="line">s = Account(<span class="number">100</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s.withdraw(<span class="string">&quot;3&quot;</span>, <span class="number">50</span>))</span><br><span class="line"><span class="built_in">print</span>(s.withdraw(<span class="string">&quot;4&quot;</span>, <span class="number">50</span>))</span><br><span class="line"><span class="built_in">print</span>(s.withdraw(<span class="string">&quot;4&quot;</span>, <span class="number">50</span>))</span><br><span class="line"><span class="built_in">print</span>(s.withdraw(<span class="string">&quot;4&quot;</span>, <span class="number">50</span>))</span><br><span class="line"><span class="built_in">print</span>(s.withdraw(<span class="string">&quot;4&quot;</span>, <span class="number">50</span>))</span><br><span class="line"><span class="built_in">print</span>(s.withdraw(<span class="string">&quot;4&quot;</span>, <span class="number">50</span>))</span><br><span class="line"><span class="built_in">print</span>(s.withdraw(<span class="string">&quot;4&quot;</span>, <span class="number">50</span>))</span><br><span class="line"><span class="built_in">print</span>(s.withdraw(<span class="string">&quot;4&quot;</span>, <span class="number">50</span>))</span><br></pre></td></tr></table></figure><h2 id="3-5">3.5</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">x0, y0, r = <span class="number">100</span>, <span class="number">100</span>, <span class="number">50</span> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">estimate_integral</span>(<span class="params">p, x1, x2, y1, y2, trails</span>):</span><br><span class="line">    experiment = <span class="keyword">lambda</span>: p(x1, x2, y1, y2)</span><br><span class="line">    s = <span class="built_in">abs</span>(x1 - x2) * <span class="built_in">abs</span>(y1 - y2)</span><br><span class="line">    <span class="keyword">return</span> s * monte_carlo(trails, experiment) / r / r</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">p</span>(<span class="params">x1, x2, y1, y2</span>):</span><br><span class="line">    x = random.randint(x1, x2) - x0</span><br><span class="line">    y = random.randint(y1, y2) - y0</span><br><span class="line">    <span class="keyword">return</span> x * x + y * y &lt;= r * r</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(estimate_integral(p, <span class="number">0</span>, <span class="number">200</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">100000</span>))</span><br></pre></td></tr></table></figure><h2 id="3-6">3.6</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rand</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, init</span>):</span><br><span class="line">        self.cur = init</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">update_func</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        self.cur = update_func(self.cur)</span><br><span class="line">        <span class="keyword">return</span> self.cur</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.calculate()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>(<span class="params">self, new_value</span>):</span><br><span class="line">        self.cur = new_value</span><br></pre></td></tr></table></figure><h2 id="3-7">3.7</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">call_the_cops = <span class="keyword">lambda</span>: <span class="string">&quot;cops are coming&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, balance, password</span>):</span><br><span class="line">        self.balance = balance</span><br><span class="line">        self.password = password</span><br><span class="line">        self.times = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrong_password</span>(<span class="params">self</span>):</span><br><span class="line">        self.times += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.times == <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">return</span> call_the_cops()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Incorrect password&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">withdraw</span>(<span class="params">self, password, amount</span>):</span><br><span class="line">        <span class="keyword">if</span> password != self.password:</span><br><span class="line">            <span class="keyword">return</span> self.wrong_password()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.balance &gt;= amount:</span><br><span class="line">            self.balance -= amount</span><br><span class="line">            <span class="keyword">return</span> self.balance</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Insufficient funds&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deposit</span>(<span class="params">self, amount</span>):</span><br><span class="line">        self.balance += amount</span><br><span class="line">        <span class="keyword">return</span> self.balance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_joint</span>(<span class="params">self, old_pass, new_pass</span>):</span><br><span class="line">        <span class="keyword">if</span> old_pass != self.password:</span><br><span class="line">            <span class="keyword">return</span> self.wrong_password()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">JointAccount</span>(<span class="title class_ inherited__">Account</span>):</span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, original_account, new_pass</span>):</span><br><span class="line">                self.ori = original_account</span><br><span class="line">                self.password = new_pass</span><br><span class="line">                self.times = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">withdraw</span>(<span class="params">self, password, amount</span>):</span><br><span class="line">                <span class="keyword">if</span> (password == self.password):</span><br><span class="line">                    <span class="keyword">return</span> self.ori.withdraw(self.ori.password, amount)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">deposit</span>(<span class="params">self, amount</span>):</span><br><span class="line">                <span class="keyword">return</span> self.ori.deposit(amount)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JointAccount(self, new_pass)</span><br><span class="line"></span><br><span class="line">peter = Account(<span class="number">100</span>, <span class="string">&quot;111&quot;</span>)</span><br><span class="line">paul = peter.make_joint(<span class="string">&quot;111&quot;</span>, <span class="string">&quot;222&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">isinstance</span>(paul, Account)) <span class="comment">#type: ignore</span></span><br><span class="line">amy = paul.make_joint(<span class="string">&quot;222&quot;</span>, <span class="string">&quot;333&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">isinstance</span>(amy, Account)) <span class="comment">#type: ignore</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(peter.withdraw(<span class="string">&quot;111&quot;</span>, <span class="number">10</span>))  <span class="comment"># 输出: 90</span></span><br><span class="line"><span class="built_in">print</span>(peter.deposit(<span class="number">30</span>))</span><br><span class="line"><span class="built_in">print</span>(paul.withdraw(<span class="string">&quot;222&quot;</span>, <span class="number">10</span>))  <span class="comment"># 输出: 80</span></span><br><span class="line"><span class="built_in">print</span>(paul.deposit(<span class="number">30</span>))</span><br><span class="line"><span class="built_in">print</span>(amy.withdraw(<span class="string">&quot;333&quot;</span>, <span class="number">10</span>))  <span class="comment"># 输出: 70</span></span><br><span class="line"><span class="built_in">print</span>(amy.deposit(<span class="number">30</span>))</span><br></pre></td></tr></table></figure><p>还有另外一种取巧的写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">call_the_cops = <span class="keyword">lambda</span>: <span class="string">&quot;cops are coming&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, balance, password</span>):</span><br><span class="line">        self.balance = balance</span><br><span class="line">        self.password = [password]</span><br><span class="line">        self.times = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrong_password</span>(<span class="params">self</span>):</span><br><span class="line">        self.times += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.times == <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">return</span> call_the_cops()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Incorrect password&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">withdraw</span>(<span class="params">self, password, amount</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> password <span class="keyword">in</span> self.password:</span><br><span class="line">            <span class="keyword">return</span> self.wrong_password()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.balance &gt;= amount:</span><br><span class="line">            self.balance -= amount</span><br><span class="line">            <span class="keyword">return</span> self.balance</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Insufficient funds&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deposit</span>(<span class="params">self, amount</span>):</span><br><span class="line">        self.balance += amount</span><br><span class="line">        <span class="keyword">return</span> self.balance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_joint</span>(<span class="params">self, old_pass, new_pass</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> old_pass <span class="keyword">in</span> self.password:</span><br><span class="line">            <span class="keyword">return</span> self.wrong_password()</span><br><span class="line">        self.password += [new_pass]</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">peter = Account(<span class="number">100</span>, <span class="string">&quot;111&quot;</span>)</span><br><span class="line">paul = peter.make_joint(<span class="string">&quot;111&quot;</span>, <span class="string">&quot;222&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">isinstance</span>(paul, Account)) <span class="comment">#type: ignore</span></span><br><span class="line">amy = paul.make_joint(<span class="string">&quot;222&quot;</span>, <span class="string">&quot;333&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">isinstance</span>(amy, Account)) <span class="comment">#type: ignore</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(peter.withdraw(<span class="string">&quot;111&quot;</span>, <span class="number">10</span>))  <span class="comment"># 输出: 90</span></span><br><span class="line"><span class="built_in">print</span>(peter.deposit(<span class="number">30</span>))</span><br><span class="line"><span class="built_in">print</span>(paul.withdraw(<span class="string">&quot;222&quot;</span>, <span class="number">10</span>))  <span class="comment"># 输出: 80</span></span><br><span class="line"><span class="built_in">print</span>(paul.deposit(<span class="number">30</span>))</span><br><span class="line"><span class="built_in">print</span>(amy.withdraw(<span class="string">&quot;333&quot;</span>, <span class="number">10</span>))  <span class="comment"># 输出: 70</span></span><br><span class="line"><span class="built_in">print</span>(amy.deposit(<span class="number">30</span>))</span><br></pre></td></tr></table></figure><h2 id="3-8">3.8</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">y</span>):</span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    x *= y</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">a = f(<span class="number">0</span>)</span><br><span class="line">b = f(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a + b)</span><br><span class="line"></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">a = f(<span class="number">1</span>)</span><br><span class="line">b = f(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a + b)</span><br></pre></td></tr></table></figure><h2 id="3-9">3.9</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">                +------------------------------------------------------------------------------------------+</span><br><span class="line"><span class="keyword">global</span> env --&gt;  |                                                                                          |</span><br><span class="line">                |                                                                                          |</span><br><span class="line">                +------------------------------------------------------------------------------------------+</span><br><span class="line">                   ^               ^              ^                ^               ^               ^</span><br><span class="line">            (f <span class="number">6</span>)  |        (f <span class="number">5</span>)  |       (f <span class="number">4</span>)  |         (f <span class="number">3</span>)  |        (f <span class="number">2</span>)  |        (f <span class="number">1</span>)  |</span><br><span class="line">                   |               |              |                |               |               |</span><br><span class="line">                +------+        +------+        +------+         +------+        +------+        +------+</span><br><span class="line">                |      |        |      |        |      |         |      |        |      |        |      |</span><br><span class="line">          E1 -&gt; | n: <span class="number">6</span> |  E2-&gt;  | n: <span class="number">5</span> |  E3 -&gt; | n: <span class="number">4</span> |  E4 -&gt;  | n: <span class="number">3</span> |  E5 -&gt; | n: <span class="number">2</span> |  E6 -&gt; | n: <span class="number">1</span> |</span><br><span class="line">                |      |        |      |        |      |         |      |        |      |        |      |</span><br><span class="line">                +------+        +------+        +------+         +------+        +------+        +------+</span><br><span class="line"></span><br><span class="line">             (* <span class="number">6</span> (f <span class="number">5</span>))      (* <span class="number">5</span> (f <span class="number">4</span>))     (* <span class="number">4</span> (f <span class="number">3</span>))      (* <span class="number">3</span> (f <span class="number">2</span>))     (* <span class="number">2</span> (f <span class="number">1</span>))        <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">         +-----------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line"><span class="keyword">global</span>   |                                                                                                                             |</span><br><span class="line">env --&gt;  |                                                                                                                             |</span><br><span class="line">         |                                                                                                                             |</span><br><span class="line">         +-----------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">            ^               ^                 ^                ^               ^                 ^                  ^               ^</span><br><span class="line">      (f <span class="number">6</span>) |     (i <span class="number">1</span> <span class="number">1</span> <span class="number">6</span>) |       (i <span class="number">1</span> <span class="number">2</span> <span class="number">6</span>) |      (i <span class="number">2</span> <span class="number">3</span> <span class="number">6</span>) |     (i <span class="number">6</span> <span class="number">4</span> <span class="number">6</span>) |      (i <span class="number">24</span> <span class="number">5</span> <span class="number">6</span>) |      (i <span class="number">120</span> <span class="number">6</span> <span class="number">6</span>) |   (i <span class="number">720</span> <span class="number">7</span> <span class="number">6</span>) |</span><br><span class="line">            |               |                 |                |               |                 |                  |               |</span><br><span class="line">        +-------+        +-------+        +-------+        +-------+        +-------+        +-------+        +-------+        +-------+</span><br><span class="line">        |       |        | p: <span class="number">1</span>  |        | p: <span class="number">1</span>  |        | p: <span class="number">2</span>  |        | p: <span class="number">6</span>  |        | p: <span class="number">24</span> |        | p:<span class="number">120</span> |        | p:<span class="number">720</span> |</span><br><span class="line">  E1 -&gt; | n: <span class="number">6</span>  |  E2 -&gt; | c: <span class="number">1</span>  |  E3 -&gt; | c: <span class="number">2</span>  |  E4 -&gt; | c: <span class="number">3</span>  |  E5 -&gt; | c: <span class="number">4</span>  |  E6 -&gt; | c: <span class="number">5</span>  |  E7 -&gt; | c: <span class="number">6</span>  |  E8 -&gt; | c: <span class="number">7</span>  |</span><br><span class="line">        |       |        | m: <span class="number">6</span>  |        | m: <span class="number">6</span>  |        | m: <span class="number">6</span>  |        | m: <span class="number">6</span>  |        | m: <span class="number">6</span>  |        | m: <span class="number">6</span>  |        | m: <span class="number">6</span>  |</span><br><span class="line">        +-------+        +-------+        +-------+        +-------+        +-------+        +-------+        +-------+        +-------+</span><br><span class="line">        (i <span class="number">1</span> <span class="number">1</span> <span class="number">6</span>)        (i <span class="number">1</span> <span class="number">2</span> <span class="number">6</span>)        (i <span class="number">2</span> <span class="number">3</span> <span class="number">6</span>)        (i <span class="number">6</span> <span class="number">4</span> <span class="number">6</span>)       (i <span class="number">24</span> <span class="number">5</span> <span class="number">6</span>)       (i <span class="number">120</span> <span class="number">6</span> <span class="number">6</span>)      (i <span class="number">720</span> <span class="number">7</span> <span class="number">6</span>)       <span class="number">720</span></span><br></pre></td></tr></table></figure><h2 id="3-10">3.10</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">              +-----------------------------------------------------------------------------------------+</span><br><span class="line">global env -&gt; |                                                                                         |</span><br><span class="line">              |   w1                                        w2                                          |</span><br><span class="line">              +---|-----------------------------------------|-------------------------------------------+</span><br><span class="line">                  |                               ^         |                               ^</span><br><span class="line">                  |          (make-withdraw 100)  |         |                               |</span><br><span class="line">                  |                               |         |                               |</span><br><span class="line">                  |                    +--------------+     |                      +--------------+</span><br><span class="line">                  |                    |              |     |                      |              |</span><br><span class="line">                  |             E1 -&gt;  | initial: 100 |     |               E1 -&gt;  | initial: 100 |</span><br><span class="line">                  |                    |              |     |                      |              |</span><br><span class="line">                  |                    +--------------+     |                      +--------------+</span><br><span class="line">                  |                               ^         |                               ^</span><br><span class="line">                  | ((lambda (balance) ...) 100)  |         | ((lambda (balance) ...) 100)  |</span><br><span class="line">                  |                               |         |                               |</span><br><span class="line">                  |                    +--------------+     |                      +--------------+</span><br><span class="line">                  |                    |              |     |                      |              |</span><br><span class="line">                  |             E2 -&gt;  | balance: 50  |     |               E2 -&gt;  | balance: 100 |</span><br><span class="line">                  |                    |              |     |                      |              |</span><br><span class="line">                  |                    +--------------+     |                      +--------------+</span><br><span class="line">                  |                      |        ^         |                          |       ^</span><br><span class="line">                  |                      |        |         |                          |       |</span><br><span class="line">                  |                      v        |         |                          v       |</span><br><span class="line">                  +------------------&gt; [*][*]-----+         +-----------------------&gt;[*][*]----+</span><br><span class="line">                                        |                                             |</span><br><span class="line">                                        |                                             |</span><br><span class="line">                                        v                                             v</span><br><span class="line">                         parameters: amount                             parameters: amount</span><br><span class="line">                         body: (if (&gt;= balance amount)                  body: (if (&gt;= balance amount)</span><br><span class="line">                                   (begin (set! balance                           (begin (set! balance</span><br><span class="line">                                                (- balance amount))                      (- balance amount))</span><br><span class="line">                                          balance)                                balance)</span><br><span class="line">                                   &quot;Insufficient funds&quot;)                          &quot;Insufficient funds&quot;)</span><br></pre></td></tr></table></figure><h2 id="3-11">3.11</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">          +---------------------------------------------------------------+</span><br><span class="line">global -&gt; |                                                               |</span><br><span class="line">env       | make-account        acc2    acc                               |</span><br><span class="line">          +----|-----------------|--------|-------------------------------+</span><br><span class="line">               |       ^         |        |             ^</span><br><span class="line">               |       |         |        |             |</span><br><span class="line">               v       |         |        |   E1 -&gt; +------------------+</span><br><span class="line">             [*][*]----+         |        |         | balance: 30      |&lt;----------+</span><br><span class="line">              |                  |        |         |                  |           |</span><br><span class="line">              |                  |        |         | withdraw ---------------&gt;[*][*]----&gt; parameters: amount</span><br><span class="line">              v                  |        |         |                  |                   body: ...</span><br><span class="line">  parameters: balance            |        |         |                  |&lt;----------+</span><br><span class="line">  body: (define withdraw ...)    |        |         |                  |           |</span><br><span class="line">        (define deposit ...)     |        |         | deposit ----------------&gt;[*][*]----&gt; parameters: amount</span><br><span class="line">        (define dispatch ...)    |        |         |                  |                   body: ...</span><br><span class="line">        (lambda (m) ...)         |        |         |                  |&lt;----------+</span><br><span class="line">                                 |        |         |                  |           |</span><br><span class="line">                                 |        +----------&gt;dispatch ---------------&gt;[*][*]----&gt; parameters: m</span><br><span class="line">                                 |                  |                  |                   body: ...</span><br><span class="line">                                 |                  +------------------+</span><br><span class="line">                                 |</span><br><span class="line">                                 |</span><br><span class="line">                                 |</span><br><span class="line">                                 |  E6 -&gt; +------------------+</span><br><span class="line">                                 |        | balance: 100     |&lt;----------+</span><br><span class="line">                                 |        |                  |           |</span><br><span class="line">                                 |        | withdraw ---------------&gt;[*][*]----&gt; parameters: amount</span><br><span class="line">                                 |        |                  |                   body: ...</span><br><span class="line">                                 |        |                  |&lt;----------+</span><br><span class="line">                                 |        |                  |           |</span><br><span class="line">                                 |        | deposit ----------------&gt;[*][*]----&gt; parameters: amount</span><br><span class="line">                                 |        |                  |                   body: ...</span><br><span class="line">                                 |        |                  |&lt;----------+</span><br><span class="line">                                 |        |                  |           |</span><br><span class="line">                                 +---------&gt;dispatch ---------------&gt;[*][*]----&gt; parameters: m</span><br><span class="line">                                          |                  |                   body: ...</span><br><span class="line">                                          +------------------+</span><br></pre></td></tr></table></figure><p><code>acc</code> 的局部状态保存在环境 <code>E1</code> 中 <br>因为环境不同, 所以局部状态不同 <br>两者并不共享任何部分</p><h2 id="3-12">3.12</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">x --&gt; [*]----&gt; [*]----&gt; &#x27;()</span><br><span class="line">       |        |</span><br><span class="line">       v        v</span><br><span class="line">       &#x27;a       &#x27;b</span><br><span class="line"></span><br><span class="line">y --&gt; [*]----&gt; [*]----&gt; &#x27;()</span><br><span class="line">       |        |</span><br><span class="line">       v        v</span><br><span class="line">       &#x27;c       &#x27;d</span><br><span class="line"></span><br><span class="line">z --&gt; [*]----&gt;[*]----&gt;[*]----&gt;[*]----&gt; &#x27;()</span><br><span class="line">       |       |       |       |</span><br><span class="line">       v       v       v       v</span><br><span class="line">      &#x27;a      &#x27;b      &#x27;c      &#x27;d</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">w------+</span><br><span class="line">       |</span><br><span class="line">       |</span><br><span class="line">       v</span><br><span class="line">x --&gt; [*]----&gt; [*]----+</span><br><span class="line">       |        |     |</span><br><span class="line">       v        v     |</span><br><span class="line">       &#x27;a       &#x27;b    |</span><br><span class="line">                      |</span><br><span class="line">       +--------------+</span><br><span class="line">       |</span><br><span class="line">       v</span><br><span class="line">y --&gt; [*]----&gt; [*]----&gt; &#x27;()</span><br><span class="line">       |        |</span><br><span class="line">       v        v</span><br><span class="line">       &#x27;c       &#x27;d</span><br><span class="line"></span><br><span class="line">z --&gt; [*]----&gt;[*]----&gt;[*]----&gt;[*]----&gt; &#x27;()</span><br><span class="line">       |       |       |       |</span><br><span class="line">       v       v       v       v</span><br><span class="line">      &#x27;a      &#x27;b      &#x27;c      &#x27;d</span><br></pre></td></tr></table></figure><p>两个 <code>&lt;response&gt;</code>:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">b</span>)</span><br><span class="line">(<span class="name">b</span> c d)</span><br></pre></td></tr></table></figure><h2 id="3-13">3.13</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">         +-----------------------+</span><br><span class="line">         |                       |</span><br><span class="line">         v                       |</span><br><span class="line">z ----&gt; [*]----&gt; [*]----&gt; [*]----+</span><br><span class="line">         |        |        |</span><br><span class="line">         v        v        v</span><br><span class="line">        &#x27;a       &#x27;b       &#x27;c</span><br></pre></td></tr></table></figure><p>无限循环</p><h2 id="3-14">3.14</h2><p>数组反转</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">a</span> b c d)</span><br><span class="line">(<span class="name">d</span> c b a)</span><br></pre></td></tr></table></figure><h2 id="3-15">3.15</h2><p>改变的是 <code>x</code></p><p><code>z1</code> 变两个<br><code>z2</code> 只变一个</p><h2 id="3-16">3.16</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">car = <span class="keyword">lambda</span> x: x[<span class="number">0</span>]</span><br><span class="line">cdr = <span class="keyword">lambda</span> x: x[<span class="number">1</span>:] <span class="keyword">if</span> <span class="built_in">len</span>(x) &gt; <span class="number">1</span> <span class="keyword">else</span> []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_pairs</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">not</span> <span class="built_in">type</span>(x) == <span class="built_in">list</span> <span class="keyword">or</span> x == []):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> count_pairs(car(x)) + count_pairs(cdr(x)) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">c</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">x, memo_list</span>):</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">type</span>(x) == <span class="built_in">list</span> <span class="keyword">and</span> x != []</span><br><span class="line">            <span class="keyword">and</span> (<span class="keyword">not</span> x <span class="keyword">in</span> memo_list)):</span><br><span class="line">            <span class="keyword">return</span> inner(car(x), inner(cdr(x), [x] + memo_list))</span><br><span class="line">        <span class="keyword">return</span> memo_list</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(inner(x, []))</span><br><span class="line"></span><br><span class="line">x = [[<span class="number">1</span>], <span class="number">2</span>]</span><br><span class="line">y = [[[<span class="number">1</span>]], <span class="number">1</span>]</span><br><span class="line">z = [[[<span class="number">1</span>], <span class="number">1</span>], [<span class="number">1</span>], <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(count_pairs(x), c(x))</span><br><span class="line"><span class="built_in">print</span>(count_pairs(y), c(y))</span><br><span class="line"><span class="built_in">print</span>(count_pairs(z), c(z))</span><br></pre></td></tr></table></figure><h2 id="3-17">3.17</h2><p>见 3.16</p><h2 id="3-18">3.18</h2><p>用 <code>python</code> 中的 <code>list</code> 实在是不好模拟, 所以用链表<br>直接用的快慢指针法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val, <span class="built_in">next</span></span>):</span><br><span class="line">        self.val, self.<span class="built_in">next</span> = val, <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">x = LinkNode(<span class="number">3</span>, LinkNode(<span class="number">4</span>, LinkNode(<span class="number">5</span>, <span class="literal">None</span>)))</span><br><span class="line"></span><br><span class="line">x.<span class="built_in">next</span> = x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">head</span>):</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">None</span> <span class="keyword">or</span> head.<span class="built_in">next</span> == <span class="literal">None</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    slow, fast = head, head.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">while</span> (fast <span class="keyword">and</span> fast.<span class="built_in">next</span>):</span><br><span class="line">        <span class="keyword">if</span> (slow == fast):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        slow, fast = slow.<span class="built_in">next</span>, fast.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(check(x))</span><br></pre></td></tr></table></figure><h2 id="3-19">3.19</h2><p>见 3.18</p><h2 id="3-20">3.20</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">          +-------------------------------------------------------+</span><br><span class="line">global -&gt; |                                                       |</span><br><span class="line">env       |  z                           x                        |</span><br><span class="line">          +--|---------------------------|------------------------+</span><br><span class="line">             |           ^               |          ^</span><br><span class="line">             |           |               |          |</span><br><span class="line">             |           |               |      +----------+</span><br><span class="line">             |           |               |      | x: 17    |</span><br><span class="line">             |           |               |      | y: 2     |</span><br><span class="line">             |           |               |      |          |</span><br><span class="line">             |           |               |      | set-x! -----&gt; ...</span><br><span class="line">             |           |               |      | set-y! -----&gt; ...</span><br><span class="line">             |           |               +-------&gt;dispatch ---&gt; parameters: m</span><br><span class="line">             |           |                      |  ^ ^     |    body: ...</span><br><span class="line">             |           |                      +--|-|-----+</span><br><span class="line">             |        +----------+                 | |</span><br><span class="line">             |  E2 -&gt; | x: ------------------------+ |</span><br><span class="line">             |        | y: --------------------------+</span><br><span class="line">             |        |          |</span><br><span class="line">             |        | set-x! -----&gt; ...</span><br><span class="line">             |        | set-y! -----&gt; ...</span><br><span class="line">             +---------&gt;dispatch ---&gt; parameters: m</span><br><span class="line">                      |          |    body: (cond ((eq? m &#x27;car) &#x27;car)</span><br><span class="line">                      +----------+                ((eq? m &#x27;cdr) &#x27;cdr)</span><br><span class="line">                                                  ((eq? m &#x27;set-car!) &#x27;set-car!)</span><br><span class="line">                                                  ((eq? m &#x27;set-cdr!) &#x27;set-cdr!)</span><br><span class="line">                                                  (else</span><br><span class="line">                                                    (error &quot;...&quot; m)))</span><br></pre></td></tr></table></figure><h2 id="3-21">3.21</h2><p>因为队列存储的是两个指针, 并不是实际的队列, 直接打印是由问题的</p><p>代码见正文 <code>__str__</code> 函数</p><h2 id="3-22">3.22</h2><p>正文使用的类表示, 与之类似</p><h2 id="3-23">3.23</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DoublyLink</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val = <span class="literal">None</span>, l = <span class="literal">None</span>, r = <span class="literal">None</span></span>):</span><br><span class="line">        self.val, self.ptr = val, [l, r]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Deque</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.pos = [<span class="literal">None</span>, <span class="literal">None</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.pos[<span class="number">0</span>] == <span class="literal">None</span> <span class="keyword">or</span> self.pos[<span class="number">1</span>] == <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, which</span>):</span><br><span class="line">        <span class="keyword">if</span> (self.is_empty()):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Empty queue&quot;</span></span><br><span class="line">        <span class="keyword">assert</span>(<span class="built_in">isinstance</span>(self.pos[which], DoublyLink))</span><br><span class="line">        <span class="keyword">return</span> self.pos[which].val</span><br><span class="line"></span><br><span class="line">    front_deque = <span class="keyword">lambda</span> self: self.get(<span class="number">0</span>)</span><br><span class="line">    rear_deque = <span class="keyword">lambda</span> self: self.get(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, item, which</span>):</span><br><span class="line">        tmp = DoublyLink(item, <span class="literal">None</span>, self.pos[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> (which == <span class="number">1</span>):</span><br><span class="line">            tmp = DoublyLink(item, self.pos[<span class="number">1</span>], <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> (self.is_empty()):</span><br><span class="line">            self.pos = [tmp, tmp]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">assert</span>(<span class="built_in">isinstance</span>(self.pos[which], DoublyLink))</span><br><span class="line">            self.pos[which].ptr[which], self.pos[which] = tmp, tmp <span class="comment"># type: ignore</span></span><br><span class="line"></span><br><span class="line">    front_insert_deque = <span class="keyword">lambda</span> self, item: self.insert(item, <span class="number">0</span>)</span><br><span class="line">    rear_insert_deque = <span class="keyword">lambda</span> self, item: self.insert(item, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, which</span>):</span><br><span class="line">        <span class="keyword">if</span> (self.is_empty()):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Empty queue&quot;</span></span><br><span class="line">        <span class="keyword">assert</span>(<span class="built_in">isinstance</span>(self.pos[which], DoublyLink))</span><br><span class="line">        tmp = self.pos[which].ptr[which ^ <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> (tmp != <span class="literal">None</span>):</span><br><span class="line">            tmp.ptr[which] = <span class="literal">None</span></span><br><span class="line">        self.pos[which] = tmp</span><br><span class="line"></span><br><span class="line">    front_delete_queue = <span class="keyword">lambda</span> self: self.delete(<span class="number">0</span>)</span><br><span class="line">    rear_delete_queue = <span class="keyword">lambda</span> self: self.delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        ptr = self.pos[<span class="number">0</span>]</span><br><span class="line">        res = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">while</span> (ptr != <span class="literal">None</span>):</span><br><span class="line">            res += [ptr.val]</span><br><span class="line">            ptr = ptr.ptr[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(res)</span><br></pre></td></tr></table></figure><h2 id="3-24">3.24</h2><p>见正文二维表格 <code>Table</code> 的 <code>__init__</code> 函数和 <code>assoc</code> 函数</p><h2 id="3-25">3.25</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MultiTable</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, same_key = <span class="keyword">lambda</span> x, y : x == y</span>):</span><br><span class="line">        self.records = []</span><br><span class="line">        self.same_key = same_key</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">assoc</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">for</span> record <span class="keyword">in</span> self.records:</span><br><span class="line">            <span class="keyword">if</span> (self.same_key(record[<span class="number">0</span>], key)):</span><br><span class="line">                <span class="keyword">return</span> record</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lookup</span>(<span class="params">self, key_table</span>):</span><br><span class="line">        ptr = self</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> key_table:</span><br><span class="line">            tmp = ptr.assoc(key)</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">not</span> tmp):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            ptr = tmp[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> ptr</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, key_table, value</span>):</span><br><span class="line">        ptr = self</span><br><span class="line">        <span class="keyword">for</span> i, key <span class="keyword">in</span> <span class="built_in">enumerate</span>(key_table):</span><br><span class="line">            tmp = ptr.assoc(key)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">not</span> tmp):</span><br><span class="line">                tmp = [key, MultiTable(self.same_key)]</span><br><span class="line">                ptr.records.append(tmp)</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="built_in">len</span>(key_table) - <span class="number">1</span>):</span><br><span class="line">                tmp[<span class="number">1</span>] = value</span><br><span class="line"></span><br><span class="line">            ptr = tmp[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="3-26">3.26</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key = <span class="string">&quot;None&quot;</span>, val = <span class="literal">None</span>, left = <span class="literal">None</span>, right = <span class="literal">None</span></span>):</span><br><span class="line">        self.val = [key, val]</span><br><span class="line">        self.left, self.right = left, right</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BST</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.root = Node()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self, key</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">cur_node</span>):</span><br><span class="line">            <span class="keyword">if</span> (cur_node == <span class="literal">None</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> (cur_node.val[<span class="number">0</span>] == key):</span><br><span class="line">                <span class="keyword">return</span> cur_node.val</span><br><span class="line">            <span class="keyword">if</span> (cur_node.val[<span class="number">0</span>] &lt; key):</span><br><span class="line">                <span class="keyword">return</span> helper(cur_node.right)</span><br><span class="line">            <span class="keyword">if</span> (cur_node.val[<span class="number">0</span>] &gt; key):</span><br><span class="line">                <span class="keyword">return</span> helper(cur_node.left)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper(self.root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, key, value</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">cur_node</span>):</span><br><span class="line">            <span class="keyword">if</span> (cur_node == <span class="literal">None</span>):</span><br><span class="line">                <span class="keyword">return</span> Node(key, value)</span><br><span class="line">            <span class="keyword">if</span> (cur_node.val[<span class="number">0</span>] == key):</span><br><span class="line">                cur_node.val[<span class="number">1</span>] = value</span><br><span class="line">            <span class="keyword">elif</span> (cur_node.val[<span class="number">0</span>] &lt; key):</span><br><span class="line">                cur_node.right = helper(cur_node.right)</span><br><span class="line">            <span class="keyword">elif</span> (cur_node.val[<span class="number">0</span>] &gt; key):</span><br><span class="line">                cur_node.left = helper(cur_node.left)</span><br><span class="line">            <span class="keyword">return</span> cur_node</span><br><span class="line"></span><br><span class="line">        helper(self.root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">cur_node, depth</span>):</span><br><span class="line">            <span class="keyword">if</span> (cur_node == <span class="literal">None</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            res = <span class="string">&quot; &quot;</span> * depth * <span class="number">5</span> + <span class="built_in">str</span>(cur_node.val) + <span class="string">&quot;\n&quot;</span></span><br><span class="line">            res += helper(cur_node.left, depth + <span class="number">1</span>) + \</span><br><span class="line">                   helper(cur_node.right, depth + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper(self.root, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Table</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.tree = BST()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">return</span> self.tree.find(key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lookup</span>(<span class="params">self, keys</span>):</span><br><span class="line">        ptr = self</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> keys:</span><br><span class="line">            tmp = ptr.get(key)</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">not</span> tmp):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            ptr = tmp[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> ptr</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, keys, value</span>):</span><br><span class="line">        ptr = self</span><br><span class="line">        <span class="keyword">for</span> i, key <span class="keyword">in</span> <span class="built_in">enumerate</span>(keys):</span><br><span class="line">            tmp = ptr.get(key)</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">not</span> tmp):</span><br><span class="line">                tmp = [key, Table()]</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="built_in">len</span>(keys) - <span class="number">1</span>):</span><br><span class="line">                    tmp[<span class="number">1</span>] = value</span><br><span class="line">                ptr.tree.insert(*tmp)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="built_in">len</span>(keys) - <span class="number">1</span>):</span><br><span class="line">                tmp[<span class="number">1</span>] = value</span><br><span class="line">            ptr = tmp[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="3-27">3.27</h2><p>记忆化, 因为对于每个 <code>n</code> 只计算一次</p><p>不可以, 因为还没算</p><h2 id="3-28">3.28</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">or_gate</span>(<span class="params">a1, a2, output</span>):</span><br><span class="line">    new_value = logical_or(a1.get_signal(), a2.get_signal())</span><br><span class="line">    or_action_procedure = after_delay(or_gate_delay,</span><br><span class="line">                                      <span class="keyword">lambda</span>: output.set_signal(new_value))</span><br><span class="line">    a1.add_action(or_action_procedure)</span><br><span class="line">    a2.add_action(or_action_procedure)</span><br></pre></td></tr></table></figure><h2 id="3-29">3.29</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">or_gate_delay = <span class="number">2</span> * inverter_delay + and_gate_delay</span><br><span class="line"><span class="comment"># 输入的两个 反 同时进行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">or_gate</span>(<span class="params">a1, a2, output</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">or_action_procedure</span>():</span><br><span class="line">        new_value = logical_or(a1.get_signal(), a2.get_signal())</span><br><span class="line">        after_delay(or_gate_delay, <span class="keyword">lambda</span>: output.set_signal(new_value))</span><br><span class="line"></span><br><span class="line">    a1.add_action(or_action_procedure)</span><br><span class="line">    a2.add_action(or_action_procedure)</span><br></pre></td></tr></table></figure><h2 id="3-30">3.30</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">half_adder_delay = <span class="built_in">max</span>(or_gate_delay, and_gate_delay + inverter_delay) + and_gate_delay</span><br><span class="line">full_adder_delay = <span class="number">2</span> * half_adder_delay + or_gate_delay</span><br><span class="line">adder = n * full_adder_delay</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scheme </tag>
            
            <tag> Python </tag>
            
            <tag> SICP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scheme 学习笔记</title>
      <link href="/2023/07/01/scheme/"/>
      <url>/2023/07/01/scheme/</url>
      
        <content type="html"><![CDATA[<h1>前期准备</h1><ol><li>安装 <code>MIT scheme</code>: <code>sudo apt-get install mit-scheme</code></li><li>在命令行输入 <code>scheme</code> 进入 <code>scheme</code> 解释器</li></ol><h1>基本表达式</h1><p><code>scheme</code> 中一对括号代表一次计算的步骤, 括号中的计算式采用前缀表达式 <br>形如这些由括号, 标记, 分隔符组成的式子, 被称为 <code>S-表达式</code></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">2</span>) <span class="comment">;3</span></span><br><span class="line">(<span class="name"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span>) <span class="comment">;7</span></span><br></pre></td></tr></table></figure><p>当然括号可以嵌套</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">*</span></span> (<span class="name"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">3</span>) (<span class="name"><span class="built_in">-</span></span> <span class="number">3</span> <span class="number">1</span>)) <span class="comment">;8</span></span><br></pre></td></tr></table></figure><p>像 <code>+</code>, <code>1</code>, <code>2</code> 这些基本表达式被称为原子(<code>atom</code>)<br>每个表达式用空格, 制表符或换行符来分割</p><h2 id="四则运算">四则运算</h2><ol><li><code>+</code>, <code>-</code>, <code>*</code></li><li><code>/</code> 注意<code>scheme</code>会处理分数, 比如 <figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">/</span></span> <span class="number">3</span> <span class="number">4</span>) <span class="comment">;3/4</span></span><br><span class="line">(<span class="name"><span class="built_in">/</span></span> <span class="number">29</span> <span class="number">3</span> <span class="number">7</span>) <span class="comment">;29/21</span></span><br></pre></td></tr></table></figure>函数 <code>exact-&gt;inexact</code> 用于把分数转换为小数</li></ol><h2 id="其他运算">其他运算</h2><ol><li><code>quotient</code> 整除, <code>modulo</code> 取模, <code>sqrt</code> 求平方根</li><li><code>sin</code>, <code>cos</code>, <code>tan</code>, <code>asin</code>, <code>acos</code>, <code>atan</code></li><li><code>(exp a b)</code> 求指数, <code>(log x)</code> 求以 <code>e</code> 为底的对数</li></ol><h1>生成表 (<code>list</code>)</h1><h2 id="Cons-单元">Cons 单元</h2><p>表的元素称为 <code>Cons单元</code>,是一个存放了两个地址的内存空间</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">cons</span></span> <span class="number">1</span> <span class="number">2</span>) <span class="comment">;(1 . 2)</span></span><br><span class="line">(<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">cons</span></span> <span class="number">1</span> <span class="number">3</span>) (<span class="name"><span class="built_in">cons</span></span> <span class="number">2</span> <span class="number">3</span>)) <span class="comment">;((1 . 3) 2 . 3)</span></span><br></pre></td></tr></table></figure><p><code>cons</code> 分配了两个地址空间, 一个指向 1, 一个指向 2 , <code>cons</code> 也是 <code>construction</code> 的简称 <br>指向 1 的部分被称作 <code>car</code> -&gt; <code>Contents of the Address part of the Register</code> <br>指向 2 的部分被称作 <code>cdr</code> -&gt; <code>Contents of the Department part of the Register</code></p><h2 id="表">表</h2><p>表是一个由 <code>Cons单元</code> 串起来的类似链表的结构, 末尾为空列表 <code>'()</code></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">cons</span></span> <span class="number">2</span> (<span class="name"><span class="built_in">cons</span></span> <span class="number">3</span> (<span class="name"><span class="built_in">cons</span></span> <span class="number">4</span> &#x27;()))) <span class="comment">;(2 3 4)</span></span><br><span class="line">(<span class="name">cosn</span> x y) <span class="comment">;如果 y 是个表, 那么就把 x 插到表头</span></span><br></pre></td></tr></table></figure><h2 id="原子">原子</h2><p>不使用 <code>cons</code> 来构建的元素都为原子 (<code>atom</code>)<br>如 数字, 字符, 字符串, 空表</p><h2 id="引用">引用</h2><p><code>quote</code> 阻止表达式被求值, 可以简写成 <code>'</code></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">quote</span></span> (<span class="name"><span class="built_in">+</span></span> <span class="number">3</span> <span class="number">5</span>)) <span class="comment">;(+ 3 5)</span></span><br><span class="line">&#x27;(+ <span class="number">3</span> <span class="number">5</span>) <span class="comment">;(+ 3 5)</span></span><br></pre></td></tr></table></figure><h2 id="特殊形式">特殊形式</h2><p>除了 <code>quote</code>, <code>define</code>, <code>lambda</code>, <code>if</code>, <code>set!</code> 等都是特殊形式</p><h2 id="car-和-cdr"><code>car</code> 和 <code>cdr</code></h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 这里使用引用就是不让表达式 (2 3 4) 被求值, 也无法求值</span></span><br><span class="line">(<span class="name"><span class="built_in">car</span></span> &#x27;(<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>)) <span class="comment">;2</span></span><br><span class="line">(<span class="name"><span class="built_in">cdr</span></span> &#x27;(<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>)) <span class="comment">;(3 4)</span></span><br></pre></td></tr></table></figure><h2 id="list"><code>list</code></h2><p><code>list</code> 函数可以有多个参数, 构建任意长度的表</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">list</span></span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> &#x27;(<span class="number">3</span> <span class="number">4</span>) &#x27;((<span class="number">3</span> <span class="number">4</span> <span class="number">5</span>) (<span class="number">4</span>))) <span class="comment">;(2 3 4 (3 4) ((3 4 5) (4)))</span></span><br></pre></td></tr></table></figure><h1>定义函数</h1><ol><li>定义变量(没有参数的函数) <figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> x <span class="number">5</span>) </span><br></pre></td></tr></table></figure></li><li>定义函数的两种方法<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> func </span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (arguments)</span><br><span class="line">    (<span class="name"><span class="built_in">+</span></span> arguments <span class="number">5</span>)))</span><br><span class="line"><span class="comment">;; 以下是短形式</span></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">func</span> arguments)</span><br><span class="line">  (<span class="name"><span class="built_in">+</span></span> arguments <span class="number">5</span>))</span><br></pre></td></tr></table></figure></li></ol><p>使用 <code>(load [filename])</code> 载入文件从而测试函数</p><h1>条件分支</h1><ol><li><p><code>if</code> 表达式: <code>(if condition process1 process2)</code> <br>如果 <code>condition</code> 为真, 则执行 <code>process1</code>, 否则 <code>process2</code>, 这两个都是 <code>S-表达式</code></p></li><li><p><code>and</code> 和 <code>or</code> 接受多个参数, 有短路特性</p></li><li><p><code>cond</code> 表达式: 字面意思, 很好懂</p> <figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">cond</span></span> </span><br><span class="line">  (<span class="name">condition1</span> process1)</span><br><span class="line">  (<span class="name">condition2</span> process2)</span><br><span class="line">  ....</span><br><span class="line">  (<span class="name"><span class="built_in">else</span></span> process_else))</span><br></pre></td></tr></table></figure></li></ol><p>其他做出判断的函数</p><ol><li>函数 <code>null?</code> 表示表是否为空</li><li><code>eq?</code> 比较两个参数的地址, <code>eqv?</code> 比较两个参数的值(不能为表或字符串) <br><code>equal?</code> 比较值(适用于字符串和表)</li><li><code>pair?</code>, <code>list?</code> 顾名思义, 注意空表是 <code>list</code> 不是 <code>pair</code></li><li><code>=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code> 接受任意数量的数字参数</li><li><code>char=?</code>, <code>char&lt;?</code>, <code>char&gt;?</code>, <code>char&lt;=</code>, <code>char&gt;=</code></li><li><code>string=?</code>, <code>string-ci=?</code></li></ol><h1>局部变量</h1><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">let</span></span> ((<span class="name">name1</span> value1)</span><br><span class="line">      (<span class="name">name2</span> value2)</span><br><span class="line">      ....</span><br><span class="line">      (<span class="name">namen</span> valuen))</span><br><span class="line">  (<span class="name">body</span>))</span><br></pre></td></tr></table></figure><p><code>letrec</code> 替代 <code>let</code> 之后可以允许变量递归调用自己</p><p>注意这些局部变量只能在 <code>body</code> 中使用</p><h2 id="递归和尾递归">递归和尾递归</h2><p>普通的线性递归转换为尾递归的方法就是把结果传到参数里, 这样可以直接返回, 避免空间占用</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fact</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">1</span>) </span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    (<span class="name"><span class="built_in">*</span></span> n fact (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>))))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fact</span> n res)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">1</span>) </span><br><span class="line">    res</span><br><span class="line">    (<span class="name">fact</span> (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>) (<span class="name"><span class="built_in">*</span></span> n res))))</span><br></pre></td></tr></table></figure><h1>高阶函数</h1><p>类似 <code>python</code>, 略</p><h1>副作用</h1><p><code>begin</code> 表达式后可跟多个参数, 依次执行这些参数之后返回最后一个参数结果</p><h1>宏</h1><h2 id="Common-Lisp-式">Common Lisp 式</h2><p>编写代码的代码, 在CS61A的 Project4 中实现的是这种形式</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">`() 括号里的东西都被引用</span><br><span class="line">,x 解除x的引用</span><br><span class="line">,@x 把作为列表的x展开</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scheme </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NewComputerConfig</title>
      <link href="/2023/06/04/NewComputerConfig/"/>
      <url>/2023/06/04/NewComputerConfig/</url>
      
        <content type="html"><![CDATA[<h1>验机</h1><p>检测屏幕, 硬盘, 配置单, 注意不要联网<br>联网激活Office, 安全下车</p><h1>卸载及安装</h1><ul><li><p>卸载内置联想套系, 除了 <code>Legion Zone</code>, 这是调节电脑性能的工具</p></li><li><p>安装 QQ, Wechat 分在 <code>D://Software/ChatTools</code> 中</p><ul><li>更改 QQ, Wechat 默认文件下载位置为 <code>D://Files/QQFiles</code> 和 <code>D://Files/WechatFiles</code></li></ul></li><li><p>安装网易云, 更改默认缓存目录 <code>D://Files/CloudMusicCache</code></p></li><li><p>安装 Steam, <code>D://Games/Steam</code></p></li><li><p>安装 Bandzip, <code>D://Software/CompressionTools</code></p></li><li><p>安装 Clash, <code>D://Software/Clash</code>, 然后改代理</p><ul><li>开启 Allow Lan, 开启 IPV6, 开启 Start with Windows, 开启 System Proxy</li><li>打开 UWP Loopback 全选后保存</li></ul></li><li><p>根据当前硬件安装各种驱动在 <code>D://Drivers</code> 中</p></li></ul><h1>安装 WSL</h1><p>管理员模式打开 cmd</p><p><code>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</code><br><code>dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</code><br><code>Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform -NoRestart</code><br>重启<br>在 Microsoft Store 中安装 Ubuntu, 打开后设置用户名和密码</p><p><code>wsl -l -v</code> 确认安装 Ubuntu 版本及 WSL 版本</p><h2 id="Windows-Terminal-配置">Windows Terminal 配置</h2><p>启动:</p><ol><li>默认配置文件 Ubuntu 22.04.2 LTS</li><li>默认终端应用程序: Windows 终端</li></ol><p>进入 Ubuntu 子页面中的外观<br><a href="https://link.zhihu.com/?target=https%3A//www.nerdfonts.com/font-downloads">下载</a> NerdFonts, 并在 Ubuntu 中选择该字体<br><a href="https://link.zhihu.com/?target=https%3A//www.nerdfonts.com/cheat-sheet">检测</a> 字体是否安装成功</p><h2 id="Ubuntu-配置">Ubuntu 配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf .config/</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:lzlcs/.config.git .config</span><br><span class="line">sudo apt update &amp;&amp; sudo apt upgrade -y</span><br></pre></td></tr></table></figure><h3 id="配置代理">配置代理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> hostip=$(<span class="built_in">cat</span> /etc/resolv.conf |grep -oP <span class="string">&#x27;(?&lt;=nameserver\ ).*&#x27;</span>)</span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&quot;http://<span class="variable">$&#123;hostip&#125;</span>:7890&quot;</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;http://<span class="variable">$&#123;hostip&#125;</span>:7890&quot;</span></span><br><span class="line"><span class="built_in">export</span> all_proxy=<span class="string">&quot;socks5://<span class="variable">$&#123;hostip&#125;</span>:7890&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Git-配置">Git 配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name lzl</span><br><span class="line">git config --global user.email 3012386836@qq.com</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;3012386836@qq.com&quot;</span></span><br></pre></td></tr></table></figure><p>复制 <code>~/.ssh/id_rsa.pub</code> 中内容, 到 github 上添加 ssh 密钥</p><h3 id="安装-Hexo">安装 Hexo</h3><ul><li>安装 nvm: <code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash</code>, 重启终端</li><li>安装 node, npm: <code>nvm install node</code></li><li>安装 hexo: <code>npm install -g hexo-cli</code><br>*  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b <span class="built_in">source</span> git@github.com:lzlcs/lzlcs.github.io.git</span><br><span class="line"><span class="built_in">mv</span> lzlcs.github.io Blog</span><br><span class="line"><span class="built_in">cd</span> Blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li></ul><h3 id="安装-nvim-lvim">安装 nvim lvim</h3><p>下载 nvim 安装包，解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;~/Apps/nvim/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>安装 pip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-is-python3 -y</span><br><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">python get-pip.py</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;~/.local/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="built_in">rm</span> get-pip.py</span><br></pre></td></tr></table></figure><p>安装 cargo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install cargo -y</span><br></pre></td></tr></table></figure><p>安装 lazygit</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Apps/</span><br><span class="line">LAZYGIT_VERSION=$(curl -s <span class="string">&quot;https://api.github.com/repos/jesseduffield/lazygit/releases/latest&quot;</span> | grep -Po <span class="string">&#x27;&quot;tag_name&quot;: &quot;v\K[^&quot;]*&#x27;</span>)</span><br><span class="line">curl -Lo lazygit.tar.gz <span class="string">&quot;https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_<span class="variable">$&#123;LAZYGIT_VERSION&#125;</span>_Linux_x86_64.tar.gz&quot;</span></span><br><span class="line">tar xf lazygit.tar.gz lazygit</span><br><span class="line">sudo install lazygit /usr/local/bin</span><br><span class="line"><span class="built_in">rm</span> lazygit.tar.gz</span><br></pre></td></tr></table></figure><p>安装 lvim</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LV_BRANCH=<span class="string">&#x27;release-1.3/neovim-0.9&#x27;</span> bash &lt;(curl -s https://raw.githubusercontent.com/LunarVim/LunarVim/release-1.3/neovim-0.9/utils/installer/install.sh)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;~/.cargo/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="Clone-各种项目">Clone 各种项目</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>编程入门:CS61A (Fall2022)</title>
      <link href="/2023/05/08/CS61A/"/>
      <url>/2023/05/08/CS61A/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/lzlcs/Courses">Lab 和 hw 的 Github 地址</a></p><h1>完成 lab 的基础</h1><h3 id="安装">安装</h3><ul><li>安装: WSL2 &amp; WindowsTerminal</li><li>安装 <code>pyhton3</code>: <code>sudo apt install python3</code></li><li>安装编辑器: <code>neovim</code></li></ul><h3 id="使用终端">使用终端</h3><ul><li><code>~</code> 表示 <code>home</code> 目录</li><li><code>echo $HOME$</code> 显示 <code>home</code> 目录的路径</li><li><code>pwd</code> 显示当前目录路径</li></ul><blockquote><p>注意分辨你在终端中还是 <code>python</code> 解释器中</p></blockquote><h3 id="组织文件">组织文件</h3><ul><li><code>ls</code> 列出当前目录下所有文件</li><li><code>cd directoryname</code> 进入子目录<ul><li><code>cd ..</code> 进入父目录</li></ul></li><li><code>mkdir directoryname</code> 创建一个文件夹</li><li><code>unzip lab00.zip</code> 解压文件</li><li><code>mv PATH1 PATH2</code> 移动文件</li></ul><h3 id="Python-基础"><code>Python</code> 基础</h3><ul><li><code>python3</code> 进入 <code>python</code> 解释器</li><li>算数表达式 <code>+</code>, <code>-</code>, <code>*</code>, <code>%</code>.<br><code>**</code> (幂), <code>/</code>(浮点除法), <code>//</code>(整除).</li><li>一些被 <code>'</code> 或者  <code>&quot;</code> 包含的字符序列</li><li>赋值语句: <code>=</code>.</li></ul><h3 id="完成作业">完成作业</h3><ul><li><code>python3 ok -q python-basics -u --local</code> 在 <code>lab00</code> 目录下<ul><li><code>--local</code> 跳过邮箱验证</li></ul></li><li>在 <code>lab00.py</code> 补全代码, <code>python3 ok --local</code>.</li></ul><h3 id="有用的-python-命令行中命令">有用的 <code>python</code> 命令行中命令</h3><ul><li><code>-i</code> 逐行运行 <code>python</code></li></ul><h1>Textbook</h1><h2 id="Chapter-1">Chapter 1</h2><h3 id="1-1-Getting-Started">1.1 Getting Started</h3><ul><li>安装 Python: <code>sudo apt-get install python3</code></li><li>使用命令 <code>python</code> 进入 Python 解释器, <code>&gt;&gt;&gt;</code> 是提示符</li><li><code>&lt;C-p&gt;</code>, <code>&lt;C-n&gt;</code> 获得历史记录中下一条 / 上一条命令</li><li><code>&lt;C-d&gt;</code> 退出 <code>python</code> 解释器</li></ul><p><strong>永远不用担心错误, 直面它</strong></p><h3 id="1-2-Elements-of-Programming">1.2 Elements of Programming</h3><p>每一个强大的编程语言都有这样三种机制</p><ul><li><p>基元表达式和语句</p></li><li><p>组合的方法</p></li><li><p>抽象的方法</p></li><li><p>所有表达式都可以使用函数调用表示法</p></li><li><p><code>Python</code> 使用表达式树来计算表达式</p></li><li><p><code>&lt;C-l&gt;</code> 清空屏幕</p></li></ul><h3 id="1-3-Defining-New-Funtions">1.3 Defining New Funtions</h3><ul><li>定义函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def &lt;函数名&gt;(&lt;形式参数&gt;):</span><br><span class="line">    return &lt;表达式&gt;</span><br></pre></td></tr></table></figure><ul><li>引入函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from &lt;库名称&gt; import &lt;函数名称&gt; </span><br></pre></td></tr></table></figure><p><code>def</code> 语句和赋值语句就是把一个值和一个名称绑定, 且任何这个名字之前的绑定都会丢失<br>连续赋值 <code>A, B, C = 1, 2, 3</code></p><p>程序用来维护这些内容的内存即环境, 程序用来维护这些内容的内存即环境<br>当调用一个函数的时候, 就进入了以这个函数的环境中<br>在这里寻找名称绑定的时候优先使用函数内部的变量名(包括形参列表)<br>如果没有找到才会使用函数外的变量名</p><ul><li>纯函数: 函数执行功能并产生一个返回值, 所以更容易形成嵌套的表达式</li><li>非纯函数: 函数在执行过程中执行一些其他的动作比如打印</li></ul><p>形参的名称并不影响函数功能</p><p>命名时的共同约定:</p><ol><li>函数名, 变量名使用小写字母, 单词之间以下划线分隔</li><li>函数名, 变量名使用描述性的语言, 便于了解功能</li><li>避免使用单个字符, 除了它的作用显而易见</li><li>尽量不使用 l 或 o 等单个字符变量以免与数字混淆</li></ol><p>函数作为一层抽象, 用户并不需要了解它的内部实现</p><h3 id="1-4-Designing-Funtions">1.4 Designing Funtions</h3><p>好的函数应该具备以下几个特点:</p><ol><li>每个函数都应该只有一个具体的工作</li><li>不要重复自己的代码, 如果有, 请抽象成一个函数</li><li>对函数进行一般定义, 如 pow(x, 2) 可以取代 square(x), 所以只有 pow 在 Python 标准库中</li></ol><hr><p>给函数写注释:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    返回 a 的平方</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a * a</span><br></pre></td></tr></table></figure><p>此时使用 <code>help(square)</code> 可以看到三个双引号包裹的内容, 按 q 退出</p><p>在写 Python 程序的时候, 除了最简单的函数其他都要写注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi = <span class="number">3.14</span> <span class="comment"># 圆周率近似为 3.14</span></span><br></pre></td></tr></table></figure><p>使用 # 号开头的作为单行注释, 解释器忽略其后的内容</p><hr><p>函数的默认参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>(<span class="params">a, b = <span class="number">10</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br></pre></td></tr></table></figure><p>如果调用 <code>fun1(10)</code> 则会打印 20, 此时 b 的值默认为 10<br>如果用 <code>fun1(10, 20)</code> 则会打印 30, b 重新被定为 20</p><p>注意具有默认参数的形参只能统一放在函数列表后方</p><h3 id="1-5-Control">1.5 Control</h3><p>注意缩进时每个套件内都要使用相同的缩进方式, 否则会报错</p><p>条件表达式</p><ol><li>False, True 两个布尔值, 注意仅 0, None, False 的值为 False</li><li>&gt;, &lt;, &lt;=, &gt;=, ==, != 顾名思义</li><li>or, and, not 与或非<ol><li>or 的短路特性: A or B 当 A 为 True 时, 返回 A, 不再计算 B, 否则返回 B</li><li>and 的短路特性: A and B 当 A 为 False 时, 返回 A, 不再计算 B, 否则返回 B</li></ol></li></ol><p>条件语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;表达式&gt;:</span><br><span class="line">    &lt;套件&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;表达式&gt;:</span><br><span class="line">    &lt;套件&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;套件&gt;</span><br></pre></td></tr></table></figure><p>环语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while &lt;表达式&gt;:</span><br><span class="line">    &lt;循环主体&gt;</span><br></pre></td></tr></table></figure><p>注意使用 <code>&lt;C-c&gt;</code> 来结束无限循环</p><p>测试语句</p><ol><li>assert</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert &lt;表达式&gt;</span><br></pre></td></tr></table></figure><p>表达式为真时, assert 不会有任何效果, 当表达式为假时会报错<br>2. doctest</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">a</span>)</span><br><span class="line">    <span class="string">&quot;&quot;&quot; print(a)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fun(1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fun(2)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fun(3)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"><span class="keyword">from</span> doctest <span class="keyword">import</span> testmod</span><br><span class="line">testmod()</span><br></pre></td></tr></table></figure><p>testmod 函数把定义过的函数并且有如此形式的函数全部做测试, 如果函数运行结果不符则报错<br>当然可以单独测试某个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> doctest <span class="keyword">import</span> run_docstring_examples</span><br><span class="line">run_docstring_examples(fun, <span class="built_in">globals</span>(), <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>第一个参数是函数名字, 第二个参数为 globals() 的返回值, 第三个 True 表示你想看到测试过程</p><h3 id="1-6-Higher-Order-Functions">1.6 Higher-Order Functions</h3><p>操纵函数的函数称为高阶函数, 把函数作为参数传入可以实现更高度的抽象<br>在本地定义的函数称为闭包<br>把有两个参数 x, y 的函数 转化为 使用一个参数 x 的高阶函数返回一个参数为 y 的函数, 这种转换称为柯里化</p><p>lambda 表达式动态创建函数值, 返回值是一个未命名的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">combine</span>(<span class="params">f, g</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: f(g(x))</span><br><span class="line">combine(<span class="keyword">lambda</span> x: x * x, <span class="keyword">lambda</span> x: x + <span class="number">1</span>)</span><br><span class="line">s = <span class="keyword">lambda</span> x: x * x * x</span><br><span class="line">s(<span class="number">12</span>)</span><br></pre></td></tr></table></figure><p>在 Python 中, 函数是一等公民, 它可以被传递, 分配给其他变量, 并作为参数传递给其他函数<br>Python 装饰器本身是一个函数, 它可以修改被装饰函数的行为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="comment"># 在调用被装饰函数之前的额外逻辑</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在调用被装饰函数之前的额外逻辑&quot;</span>)</span><br><span class="line">        result = func(x)</span><br><span class="line">        <span class="comment"># 在调用被装饰函数之后的额外逻辑</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在调用被装饰函数之后的额外逻辑&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><h3 id="1-7-Recusive-Functions">1.7 Recusive Functions</h3><p>一个在内部调用自身的函数称作递归函数</p><p>递归基本结构</p><ol><li>一个条件判断语句, 是判断当递归进入最简单的情况时的边界情况</li><li>相信你下一层递归的结果, 然后借此来计算本层的递归结果<br>类似一种归纳证明的模式<br>递归函数可以避免一些本地名称分配的问题, 不需要很多变量即可实现所需功能</li></ol><ul><li>两个互相调用的函数称作互递归, 有些互递归的函数可以转换为普通递归</li><li>一个函数多次调用自己就是树递归</li></ul><h2 id="Chapter-2">Chapter 2</h2><h3 id="2-1-Introduction">2.1 Introduction</h3><p><code>type</code> 函数可以检测任何值的类型</p><ul><li>数字类型: <code>int</code>, <code>float</code>, <code>complex</code><ul><li>注意 float 类型是个近似表示, 有系统误差</li></ul></li></ul><h3 id="2-2-Data-Abstraction">2.2 Data Abstraction</h3><p>将程序中处理数据表示的部分和处理数据操作的部分分离开来的设计方法称为数据抽象</p><p>列表: 通过方括号中的一系列用逗号隔开的表达式构建而成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pair = [<span class="number">10</span>, <span class="number">20</span>]</span><br></pre></td></tr></table></figure><p>访问方式:</p><ol><li>使用变量 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x, y = pair</span><br></pre></td></tr></table></figure></li><li>使用下标访问 <code>pair[0]</code>, <code>pair[1]</code></li><li><code>getitem(pair, 0)</code></li></ol><p>使用数据抽象的时候, 最好让函数不依赖于特定表述, 从而方便维护</p><h3 id="2-3-Sequences">2.3 Sequences</h3><p><code>list</code> 是一个可以有任意长度的序列, 有很多的内置行为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">seq = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">len</span>(seq) <span class="comment"># 输出 seq 长度</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>] + seq <span class="comment"># + 代表连接序列</span></span><br><span class="line">seq * <span class="number">2</span> <span class="comment"># * 代表复制, 即 * 2 就是复制两次</span></span><br></pre></td></tr></table></figure><p>当然, <code>list</code> 可以包含很多数据类型, 包括 <code>list</code> 自己, 这样就形成了二维 <code>list</code></p><p><code>for</code> 语句可以遍历序列的每一个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> seq:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><p><code>for</code> 还可以用来拆包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pairs = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> pairs:</span><br><span class="line">    <span class="built_in">print</span>(x, <span class="string">&#x27; &#x27;</span>, y)</span><br></pre></td></tr></table></figure><p><code>range(a, b)</code> 左开右闭, a 默认为 0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>, <span class="number">40</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment"># 当 for 后面定义的名称在循环中用不到时, 应使用 _</span></span><br><span class="line"><span class="comment"># 这不是硬性要求, 但是这是一个习惯</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></figure><p>列表推导式, 当想对序列中每个元素做相同的操作时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">seq2 = [x + <span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> seq]</span><br><span class="line">seq3 = [x <span class="keyword">for</span> x <span class="keyword">in</span> seq <span class="keyword">if</span> (<span class="number">25</span> % x == <span class="number">0</span>)]</span><br><span class="line">seq4 = [x <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">else</span> x + <span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> seq]</span><br><span class="line"><span class="comment"># 一般形式</span></span><br><span class="line">[&lt;映射表达式&gt; <span class="keyword">for</span> &lt;名称&gt; <span class="keyword">in</span> &lt;序列表达式&gt; <span class="keyword">if</span> &lt;筛选表达式&gt;]</span><br></pre></td></tr></table></figure><p>聚合: 把序列中的值经过某种运算最后留下一个值, 如 <code>min</code>, <code>max</code>, <code>sum</code>等</p><p>列表成员</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">seq = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="number">3</span> <span class="keyword">in</span> seq <span class="comment"># 输出 True</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">in</span> seq <span class="comment"># 输出 False</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">not</span> <span class="keyword">in</span> seq <span class="comment"># 输出 True</span></span><br></pre></td></tr></table></figure><p>切片: <code>seq[a:b]</code> 表示下标为 a~b 的这些元素组成的序列, a 默认为 0, b 默认为 <code>list</code> 长度</p><p>空列表: <code>not list == True</code></p><hr><p>字符串: <code>string</code>, 由单引号或双引号包围的任意文本</p><p>字符串有长度, 支持用下标选择某个字符, 支持 <code>+</code>, <code>*</code>, 成员</p><p>三个引号可以表示多行字符串</p><p>字符串强制转换: 可以转换数字, 列表</p><hr><p>用列表作为其他列表元素的能力被称为数据类型的闭包属性</p><p>组合的结果本身可以使用相同的方法进行组合, 则这种方法有闭包属性</p><p>可以使用列表来构造一棵树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">tree</span>(<span class="params">root_label, branches=[]</span>):</span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches:</span><br><span class="line">        <span class="keyword">assert</span> is_tree(branch), <span class="string">&#x27;branches must be trees&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> [root_label] + <span class="built_in">list</span>(branches)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">label</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">branches</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_tree</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(tree) != <span class="built_in">list</span> <span class="keyword">or</span> <span class="built_in">len</span>(tree) &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches(tree):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_tree(branch):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_leaf</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> branches(tree)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建斐波那契树</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib_tree</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> tree(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        left, right = fib_tree(n-<span class="number">2</span>), fib_tree(n-<span class="number">1</span>)</span><br><span class="line">        fib_n = label(left) + label(right)</span><br><span class="line">        <span class="keyword">return</span> tree(fib_n, [left, right])</span><br></pre></td></tr></table></figure><hr><p>可以使用列表构建链表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">empty = <span class="string">&#x27;empty&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_link</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;s is a linked list if it is empty or a (first, rest) pair.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> s == empty <span class="keyword">or</span> (<span class="built_in">len</span>(s) == <span class="number">2</span> <span class="keyword">and</span> is_link(s[<span class="number">1</span>]))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">link</span>(<span class="params">first, rest</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Construct a linked list from its first element and the rest.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> is_link(rest), <span class="string">&quot;rest must be a linked list.&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [first, rest]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the first element of a linked list s.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> is_link(s), <span class="string">&quot;first only applies to linked lists.&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> s != empty, <span class="string">&quot;empty linked list has no first element.&quot;</span></span><br><span class="line">    <span class="keyword">return</span> s[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rest</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the rest of the elements of a linked list s.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> is_link(s), <span class="string">&quot;rest only applies to linked lists.&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> s != empty, <span class="string">&quot;empty linked list has no rest.&quot;</span></span><br><span class="line">    <span class="keyword">return</span> s[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">len_link</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the length of linked list s.&quot;&quot;&quot;</span></span><br><span class="line">    length = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> s != empty:</span><br><span class="line">        s, length = rest(s), length + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> length</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getitem_link</span>(<span class="params">s, i</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the element at index i of linked list s.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> i &gt; <span class="number">0</span>:</span><br><span class="line">        s, i = rest(s), i - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> first(s)</span><br></pre></td></tr></table></figure><h3 id="2-4-Mulable-Data">2.4 Mulable Data</h3><p>对象把数据值和行为结合在一起</p><ol><li>对象具有属性: <code>&lt;表达式&gt;.&lt;属性名称&gt;</code></li><li>对象具有方法: <code>&lt;表达式&gt;.&lt;方法名称&gt;</code></li></ol><p>可变对象: 列表, 字典, 集合<br>不可变对象: 整数, 浮点数, 字符串, 元组</p><p>列表:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = a</span><br><span class="line"><span class="comment"># 此时 a, b 指向同一个列表</span></span><br><span class="line">b += [<span class="number">4</span>] <span class="comment"># a 也会被改变</span></span><br><span class="line"><span class="built_in">print</span>(a) </span><br></pre></td></tr></table></figure><p>可以使用列表复制来避免这个问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="built_in">list</span>(a)</span><br><span class="line">c += [<span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># a 没有受到上一条语句的影响</span></span><br></pre></td></tr></table></figure><p><code>is</code> 可以检测两个对象所指的列表是否是同一个列表, 这比 <code>==</code> 限制条件更强</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c.pop()</span><br><span class="line">c == a <span class="comment"># True</span></span><br><span class="line">c <span class="keyword">is</span> a <span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>列表的其他常用方法</p><ul><li><code>append(el)</code>: el加到末尾。返回None。</li><li><code>extend(lst)</code>: 在后方连接lst。返回None。</li><li><code>insert(i, el)</code>: 在索引i处插入el。返回None。</li><li><code>remove(el)</code>: 移除第一个el。返回None。如果 el 不在列表中会报错</li><li><code>pop(i)</code>: 移除并返回索引i处的元素。</li></ul><hr><p>元组 (tuple) 是一个不可变对象, 类似 list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>, [<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">t[<span class="number">2</span>].pop() <span class="comment"># 如果 tuple 中的元素是可变对象, 那就可以改变这个元素的值</span></span><br><span class="line"><span class="comment"># 但是需要使用 可变对象自身的方法</span></span><br><span class="line"><span class="comment"># t[2] += [4] Error</span></span><br><span class="line">t[<span class="number">2</span>].append(<span class="number">4</span>) <span class="comment"># 可行</span></span><br><span class="line"><span class="comment"># t[0] = 3 不可行, 整数类型不可变</span></span><br><span class="line"><span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure><p>字典 (dictionary) 是一个可变对象, 可以以任何不可变对象为索引 <br>当然, 使用元组作为索引的时候, 元组内不能包含可变对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = &#123; <span class="string">&quot;A&quot;</span>: <span class="number">5</span> &#125;</span><br><span class="line">t.get(<span class="string">&quot;A&quot;</span>, <span class="number">0</span>) <span class="comment"># 第一个参数为简直, 第二个参数为默认值 (如果键值不存在才返回)</span></span><br><span class="line">t.get(<span class="string">&quot;B&quot;</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>还有使用 for 来创建一个字典的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = &#123; x: x + 1 for x in range(3) &#125;</span><br></pre></td></tr></table></figure><p><code>nonlocal</code> 关键字: 使得内嵌函数能使用上一级函数的变量 <br>实际应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_save</span>(<span class="params">money</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">out</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> money</span><br><span class="line">        <span class="keyword">if</span> (x &gt; money):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;余额不足&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            money -= x</span><br><span class="line">        <span class="keyword">return</span> money</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line">money = my_save(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(money(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(money(<span class="number">80</span>))</span><br><span class="line"><span class="built_in">print</span>(money(<span class="number">20</span>))</span><br></pre></td></tr></table></figure><p>可变对象不需要 nonlocal 关键字, 因为他们指向的内存是同一个</p><h3 id="2-5-Object-Orient-Programming">2.5 Object-Orient Programming</h3><p>对象是具有属性和方法的值<br>定义类, 类中每个方法的第一个参数都是 <code>self</code>, 但是在调用的时候不用传入这个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> &lt;name&gt;:</span><br><span class="line">    &lt;suite&gt;</span><br></pre></td></tr></table></figure><p>初始化对象的方法有特定的名字 <code>__init__()</code>, 称作构造函数 <br>通过赋值将对象绑定到新名称不会创建一个新对象</p><p>点表达式: <code>&lt;expression&gt;.&lt;name&gt;</code>, 通过点表达式访问类内部的属性和方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getattr(a, &quot;xxx&quot;) # 调用名称为 xxx 的属性</span><br><span class="line">hasattr(a, &quot;xxx&quot;) # 查询是否有名为 xxx 的属性</span><br></pre></td></tr></table></figure><p>有两种方法调用类内部定义的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;类名称&gt;.&lt;函数名&gt;(实例化名称, 1)</span><br><span class="line">&lt;实例化名称&gt;.&lt;函数名&gt;(1)</span><br></pre></td></tr></table></figure><p>命名约定:</p><ol><li>类名称使用驼峰命名法</li><li>属性名称使用下划线分割由小写字母组成的单词</li><li>以下划线开头的名称通常是由类内部的方法访问, 而不是由外部访问</li></ol><p>对于每个实例化对象, 有些属性一直不变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    interest = <span class="number">0.02</span>  <span class="comment"># 一个类属性</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, account_holder</span>):</span><br><span class="line">        self.balance = <span class="number">0</span></span><br><span class="line">        self.holder = account_holder</span><br><span class="line">    <span class="comment"># 这里可以定义其他方法</span></span><br><span class="line"></span><br><span class="line">Account.interest = <span class="number">0.04</span> <span class="comment"># 这种方法会改变所有实例化对象的 interest 属性</span></span><br><span class="line"><span class="comment"># 单独改变某一实例化对象的 interest 属性不会影响其他实例化对象</span></span><br></pre></td></tr></table></figure><hr><p>继承: 子类可以覆盖基类特定的属性和方法, 未指定的内容则视为和基类相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一个具有非负余额的银行账户。&quot;&quot;&quot;</span></span><br><span class="line">    interest = <span class="number">0.02</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, account_holder</span>):</span><br><span class="line">        self.balance = <span class="number">0</span></span><br><span class="line">        self.holder = account_holder</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deposit</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将账户余额增加指定金额并返回新的余额。&quot;&quot;&quot;</span></span><br><span class="line">        self.balance = self.balance + amount</span><br><span class="line">        <span class="keyword">return</span> self.balance</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">withdraw</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将账户余额减少指定金额并返回新的余额。&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> amount &gt; self.balance:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Insufficient funds&#x27;</span></span><br><span class="line">        self.balance = self.balance - amount</span><br><span class="line">        <span class="keyword">return</span> self.balance</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CheckingAccount</span>(<span class="title class_ inherited__">Account</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一个收取取款费用的银行账户。&quot;&quot;&quot;</span></span><br><span class="line">    withdraw_charge = <span class="number">1</span></span><br><span class="line">    interest = <span class="number">0.01</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">withdraw</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="keyword">return</span> Account.withdraw(self, amount + self.withdraw_charge)</span><br></pre></td></tr></table></figure><p>多重继承: 一个子类可以继承自多个基类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SavingsAccount</span>(<span class="title class_ inherited__">Account</span>):</span><br><span class="line">    deposit_charge = <span class="number">2</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deposit</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="keyword">return</span> Account.deposit(self, amount - self.deposit_charge)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AsSeenOnTVAccount</span>(CheckingAccount, SavingsAccount):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, account_holder</span>):</span><br><span class="line">        self.holder = account_holder</span><br><span class="line">        self.balance = <span class="number">1</span>  <span class="comment"># 一美元免费！</span></span><br></pre></td></tr></table></figure><p>如果多个基类都有同一个方法, 继承的顺序不在本节讨论范围内</p><h3 id="2-9-Recusive-Objects">2.9 Recusive Objects</h3><p>对象可以把其他对象当作属性值, 这样的对象称为递归对象</p><p>链表类:</p><ol><li>空链表用空元组表示, 长度为零, 没有元素</li><li>内置方法名字为 <code>__len__</code> 时, 当使用 python 内置函数 <code>len</code> 的时候就会调用这个方法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">link_expression</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回一个表示s的字符串。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> s.rest <span class="keyword">is</span> Link.empty:</span><br><span class="line">        rest = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rest = <span class="string">&#x27;, &#x27;</span> + link_expression(s.rest)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Link(&#123;0&#125;&#123;1&#125;)&#x27;</span>.<span class="built_in">format</span>(s.first, rest)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">join_link</span>(<span class="params">s, separator</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 链表输出更紧凑 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> s <span class="keyword">is</span> Link.empty:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> s.rest <span class="keyword">is</span> Link.empty:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(s.first)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(s.first) + separator + join_link(s.rest, separator)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">map_link</span>(<span class="params">f, s</span>):</span><br><span class="line">    <span class="keyword">if</span> s <span class="keyword">is</span> Link.empty:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Link(f(s.first), map_link(f, s.rest))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_link</span>(<span class="params">f, s</span>):</span><br><span class="line">    <span class="keyword">if</span> s <span class="keyword">is</span> Link.empty:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        filtered = filter_link(f, s.rest)</span><br><span class="line">        <span class="keyword">if</span> f(s.first):</span><br><span class="line">            <span class="keyword">return</span> Link(s.first, filtered)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> filtered</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Link</span>:</span><br><span class="line">    empty = ()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, first, rest=empty</span>):</span><br><span class="line">        <span class="keyword">assert</span> rest <span class="keyword">is</span> Link.empty <span class="keyword">or</span> <span class="built_in">isinstance</span>(rest, Link)</span><br><span class="line">        <span class="comment"># instance 是内置函数 </span></span><br><span class="line">        <span class="comment"># 如果 rest 是 Link 的实例或者是 Link的某个子类的实例, 返回 True</span></span><br><span class="line">        self.first = first</span><br><span class="line">        self.rest = rest</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, i</span>):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.first</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.rest[i-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">len</span>(self.rest)</span><br><span class="line">    __repr__ = link_expression</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>树的实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tree</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, label, branches=(<span class="params"></span>)</span>):</span><br><span class="line">        self.label = label</span><br><span class="line">        <span class="keyword">for</span> branch <span class="keyword">in</span> branches:</span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">isinstance</span>(branch, Tree)</span><br><span class="line">        self.branches = branches</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.branches:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Tree(&#123;0&#125;, &#123;1&#125;)&#x27;</span>.<span class="built_in">format</span>(self.label, <span class="built_in">repr</span>(self.branches))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Tree(&#123;0&#125;)&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">repr</span>(self.label))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_leaf</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> self.branches</span><br></pre></td></tr></table></figure><p>集合的实现:</p><ol><li>通过链表</li><li>通过有序序列</li><li>通过二叉搜索树, 随机插入元素时复杂度较优</li><li>通过平衡树, 任意元素插入时复杂度较优</li></ol><p>python 内部集合的实现: 基于哈希的一种方法, 超出课程讨论范围</p><h2 id="Chapter-3">Chapter 3</h2><h3 id="3-1-Introduction">3.1 Introduction</h3><p>本章重点介绍程序本身, 研究解释器的设计和执行程序时他们创建的计算过程</p><h3 id="3-2-Functional-Programming">3.2 Functional Programming</h3><p>本节介绍 <code>Scheme</code> 语言的一个子集, 只使用表达式, 专门用于符号计算, 没有可变值</p><p><code>Scheme</code> 完全使用前缀表示法, 使用小括号来分割操作符和操作数</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">3</span>)</span><br><span class="line">(<span class="name"><span class="built_in">&gt;=</span></span> <span class="number">2</span> <span class="number">1</span>)</span><br><span class="line">(<span class="name"><span class="built_in">if</span></span> &lt;condition&gt; &lt;consequent&gt; &lt;alternative&gt;)</span><br><span class="line">(<span class="name"><span class="built_in">and</span></span> &lt;e1&gt; ... &lt;en&gt;)</span><br><span class="line">(<span class="name"><span class="built_in">or</span></span> &lt;e1&gt; ... &lt;en&gt;)</span><br><span class="line">(<span class="name"><span class="built_in">not</span></span> &lt;e1&gt;)</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> pi <span class="number">3.14</span>)</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">square</span> x) (<span class="name"><span class="built_in">*</span></span> x x))</span><br><span class="line">(<span class="name"><span class="built_in">lambda</span></span> (x) (<span class="name">x</span> * x)) </span><br><span class="line"><span class="comment">; 匿名函数, 功能等同于上一句</span></span><br><span class="line">(<span class="name">square</span> <span class="number">21</span>)</span><br><span class="line">(<span class="name">square</span> (<span class="name"><span class="built_in">+</span></span> <span class="number">5</span> <span class="number">2</span>))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> x (<span class="name"><span class="built_in">cons</span></span> <span class="number">1</span> <span class="number">2</span>))</span><br><span class="line">(<span class="name"><span class="built_in">car</span></span> x) </span><br><span class="line"><span class="comment">; 第一个</span></span><br><span class="line">(<span class="name">crd</span> x) </span><br><span class="line"><span class="comment">; 第二个 </span></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">list</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>)</span><br><span class="line">(<span class="name"><span class="built_in">car</span></span>) </span><br><span class="line"><span class="comment">; 1</span></span><br><span class="line">(<span class="name">crd</span>)</span><br><span class="line"><span class="comment">; 2 3 4</span></span><br></pre></td></tr></table></figure><h3 id="3-3-Exceptions">3.3 Exceptions</h3><p>在设计程序时, 应该时刻注意程序中有可能出现的错误 <br>设计持久服务的程序更应该对错误具有健壮性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    &lt;<span class="keyword">try</span> suite&gt;</span><br><span class="line"><span class="keyword">except</span> &lt;exception <span class="keyword">class</span>&gt; <span class="keyword">as</span> &lt;name&gt;:</span><br><span class="line">    &lt;<span class="keyword">except</span> suite&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>异常对象的应用: 第一章中牛顿插值中出现 ValueError 时返回最后一次猜测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IterImproveError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, last_guess</span>):</span><br><span class="line">        self.last_guess = last_guess</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">improve</span>(<span class="params">update, done, guess=<span class="number">1</span>, max_updates=<span class="number">1000</span></span>):</span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> done(guess) <span class="keyword">and</span> k &lt; max_updates:</span><br><span class="line">            guess = update(guess)</span><br><span class="line">            k = k + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> guess</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">raise</span> IterImproveError(guess)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_zero</span>(<span class="params">f, guess=<span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">done</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> f(x) == <span class="number">0</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> improve(newton_update(f), done, guess)</span><br><span class="line">    <span class="keyword">except</span> IterImproveError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> e.last_guess</span><br></pre></td></tr></table></figure><h3 id="3-4-Interpreters-for-Languages-with-Combination">3.4 Interpreters for Languages with Combination</h3><p>元语言抽象: 一种以其他语言为基础建立语言的技术</p><p>现在来用 python 实现一个 scheme 格式的计算器<br>它将以字符串为输入, 并将这些表达式求值后返回结果 <br>如果输入的字符串不符合语法规则, 程序将引发适当的异常</p><p>实现一个 Pair 类来存储表达式树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expr = Pair(<span class="string">&#x27;+&#x27;</span>, Pair(Pair(<span class="string">&#x27;*&#x27;</span>, Pair(<span class="number">3</span>, Pair(<span class="number">4</span>, nil))), Pair(<span class="number">5</span>, nil)))</span><br><span class="line"><span class="built_in">print</span>(expr) <span class="comment"># (+ (* 3 4) 5)</span></span><br></pre></td></tr></table></figure><p>解释器分为词法分析器和语法分析器</p><ol><li>词法分析器 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tokenize_line(<span class="string">&#x27;(+ 1 (* 2.3 45))&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="number">2.3</span>, <span class="number">45</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;)&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li>语法分析器: 一个树递归的过程</li></ol><p>解释器: 解析, 评估, 应用, 评估/应用 循环</p><h3 id="3-5-Interpreters-for-Languages-with-Abstraction">3.5 Interpreters for Languages with Abstraction</h3><h2 id="Chapter-4">Chapter 4</h2><h3 id="4-1">4.1</h3><h3 id="4-2-Implict-Sequences">4.2 Implict Sequences</h3><p>序列可以不显性地创造, 可以在用到这个值的时候延迟计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r = <span class="built_in">range</span>(<span class="number">100</span>, <span class="number">100000000</span>)</span><br><span class="line"><span class="built_in">print</span>(r[<span class="number">11234214</span>])</span><br></pre></td></tr></table></figure><p>迭代器: python 中按顺序处理数据的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">it = <span class="built_in">iter</span>(p)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it)) <span class="comment"># StopIteration</span></span><br></pre></td></tr></table></figure><p>类似的, 对于迭代器, 多个名字指向的是同一个迭代器, 对迭代器使用 iter 函数也返回它自己而不是一个副本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it2 = it1</span><br><span class="line"><span class="built_in">next</span>(it2) <span class="comment"># StopIteration</span></span><br><span class="line">it3 = <span class="built_in">iter</span>(p)</span><br><span class="line"><span class="built_in">next</span>(it3)</span><br><span class="line">it4 = <span class="built_in">iter</span>(it3)</span><br><span class="line"><span class="built_in">next</span>(it4)</span><br></pre></td></tr></table></figure><p>迭代器就可以像这样每次计算出下一个迭代器, 从而实现顺序访问</p><p>通常来说, <code>range()</code>, <code>list</code>, <code>dictionary</code>, <code>set</code>, <code>tuple</code> 是可以被迭代的对象 <br>特殊的, 迭代器本身也是可迭代对象, 因为它可以作为 <code>iter()</code> 函数的参数</p><p>但是, <code>dictionary</code>, <code>set</code> 这些对象的值改变不影响迭代器, 键的增加和删除会让之前的迭代器全部失效</p><p>内置迭代器:</p><ul><li><code>map(f, iterable)</code> - 为可迭代对象中的每个元素 x 创建一个 f(x) 的迭代器。在某些情况下，计算这个可迭代对象中的值列表将给我们与 [func(x) for x in iterable] 相同的结果。但是，请记住，迭代器可以具有无限的值，因为它们是惰性求值的，而列表不能具有无限的元素。</li><li><code>filter(f, iterable)</code> - 为可迭代对象中满足 f(x) 的每个元素 x 创建一个迭代器。</li><li><code>zip(iterables*)</code> - 创建一个迭代器，其中包含来自每个可迭代对象的对应元素的元组。</li><li><code>reversed(iterable)</code> - 以逆序创建一个包含输入可迭代对象中所有元素的迭代器。</li><li><code>list(iterable)</code> - 创建一个包含输入的可迭代对象中所有元素的列表。</li><li><code>tuple(iterable)</code> - 创建一个包含输入的可迭代对象中所有元素的元组。</li><li><code>sorted(iterable)</code> - 创建一个包含输入的可迭代对象中所有元素的排序列表。</li><li><code>reduce(f, iterable)</code> - 必须导入 functools。将两个参数函数 f 从左到右累积地应用于可迭代对象的项，以将序列减少为单个值。</li></ul><p>for 语句就是使用可迭代对象的迭代器进行循环的, 可以使用 while 来模拟</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">        x = <span class="built_in">next</span>(it)</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">except</span> StopIteration:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><hr><p>生成器函数是一类特殊的函数, 使用 <code>yield</code> 而不是 <code>return</code> 来返回一系列元素 <br>每次调用生成器的 <code>next</code> 方法时, 生成器函数会运行到下一个 <code>yield</code> 语句为止</p><h1>SQL</h1><p><code>SQL</code> 是一种声明式语言, 程序是描述结果, 解释器指出如何生成结果<br>命令式语言: 程序是计算过程的描述, 解释器执行该过程</p><ol><li><code>select</code> 语句从零创建一个新表, 或者从之前的表中创建<ul><li><code>select</code> 语句总是包含以逗号分割的列描述来说明表</li><li>一个列描述是一个表达式, 后面可以接 <code>as</code> 和表的名称</li><li><code>select [expression] as [name], [expression] as [name]....;</code></li><li><code>select [columns] from [table] where [condition] order by [order]</code></li><li>所有的 <code>SQL</code> 语句都以分号结尾</li></ul></li><li><code>creat table</code> 为表创建一个全局名称<ul><li><code>creat table [name] as [select statement]</code></li></ul></li><li><code>analyze</code>, <code>delete</code>, <code>explain</code>, <code>insert</code>, <code>replace</code>, <code>update</code></li></ol><p>安装 <code>sqlite</code> 来解释 <code>SQL</code> 代码</p>]]></content>
      
      
      <categories>
          
          <category> Course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scheme </tag>
            
            <tag> Python </tag>
            
            <tag> Course </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim 学习笔记</title>
      <link href="/2023/01/11/Learnvim/"/>
      <url>/2023/01/11/Learnvim/</url>
      
        <content type="html"><![CDATA[<p>A note about learning vim.</p><span id="more"></span><h2 id="Chapter-1-The-Vim-Way">Chapter 1: The Vim Way</h2><h3 id="Tip-1-Meet-the-Dot-Command">Tip 1: Meet the Dot Command</h3><blockquote><p><code>.</code> is to repeat the last change</p></blockquote><ul><li>The Dot Command is a Micro Macro.</li></ul><h3 id="Tip-2-Don’t-Repeat-Yourself">Tip 2: Don’t Repeat Yourself</h3><blockquote><p>Move and use the dot command</p></blockquote><ul><li>Reduce Extraneous Movement</li></ul><h3 id="Tip-3-Take-One-Step-Back-Then-Three-Forward">Tip 3: Take One Step Back, Then Three Forward</h3><ul><li>Make the change repeatable</li><li>Make the motion repeatable</li><li>All together</li></ul><h3 id="Tip-4-Act-Repeat-Reverse">Tip 4: Act, Repeat, Reverse</h3><blockquote><p>Notice that many commands have its reversed form to themselves.<br>So you can undo almost everything.</p></blockquote><h3 id="Tip-5-Find-and-Replace-by-Hand">Tip 5: Find and Replace by Hand</h3><ul><li>Use <code>:%s/content/copy/g</code> to replace all in this file<ul><li>Or use <code>/content</code> and <code>.</code> to replace one by one with your judgement.</li></ul></li></ul><h3 id="Tip-6-Meet-the-Dot-Formula">Tip 6: Meet the Dot Formula</h3><ul><li>One Keystroke to Move, One Keystroke to Execute.</li></ul><h2 id="Chapter-2-Normal-Mode">Chapter 2: Normal Mode</h2><h3 id="Tip-7-Pause-with-Your-Brush-Off-the-Page">Tip 7: Pause with Your Brush Off the Page</h3><blockquote><p>When you ask yourself whether you should enter the normal mode, then do it.</p></blockquote><h3 id="Tip-8-Chunk-Your-Undos">Tip 8: Chunk Your Undos</h3><ul><li><code>u</code> is the undo command.<ul><li><code>u</code> and <code>&lt;C-r&gt;</code> are relative commands.</li></ul></li></ul><h3 id="Tip-9-Compose-Repeatable-Changes">Tip 9: Compose Repeatable Changes</h3><ul><li>In a word, make your command repeatable as possible as you can,<br>so when you find the next operator can be done by <code>.</code>, you`ll be happy.</li></ul><h3 id="Tip-10-Use-Counts-to-Do-Simple-Arithmetic">Tip 10: Use Counts to Do Simple Arithmetic</h3><ul><li><code>&lt;C-a&gt;</code> and <code>&lt;C-x&gt;</code> perform addition and substraction on numbers.</li></ul><h3 id="Tip-11-Don’t-Count-If-You-Can-Repeat">Tip 11: Don’t Count If You Can Repeat</h3><ul><li>You can use <code>dw.......</code> rather than <code>d7w</code> because you counting time are long.<ul><li>Also, if you type dot one more time, you can type <code>u</code> to undo it easily.</li></ul></li><li>But you can use <code>d7w</code> to have a cleaner undo tree if you like counting.</li></ul><p>Which to use is up to you.</p><h3 id="Tip-12-Combine-and-Conquer">Tip 12: Combine and Conquer</h3><ul><li>Operator + Motion = Action</li><li>Try to map your own keys</li></ul><h2 id="Chapter-3-Insert-Mode">Chapter 3 Insert Mode</h2><h3 id="Tip-13-Make-Corrections-Instantly-from-Insert-Mode">Tip 13: Make Corrections Instantly from Insert Mode</h3><ul><li><code>&lt;C-h&gt;</code> is the same as the <code>&lt;BS&gt;</code></li><li><code>&lt;C-w&gt;</code> is the same as <code>db</code></li><li><code>&lt;C-u&gt;</code> is the same as <code>d^</code></li></ul><h3 id="Tip-14-Get-Back-to-Normal-Mode">Tip 14: Get Back to Normal Mode</h3><ul><li><code>&lt;C-[&gt;</code> is the same as <code>&lt;esc&gt;</code></li><li><code>&lt;C-o&gt;</code> is to enter the insert normal mode.</li></ul><h3 id="Tip-15-Paste-from-a-Register-Without-Leaving-Insert-Mode">Tip 15: Paste from a Register Without Leaving Insert Mode</h3><ul><li><code>&lt;C-r&gt;&#123;register&#125;</code> is to paste text from the register.</li><li>In my opinion, it’s not better than <code>&lt;C-o&gt;p</code></li></ul><h3 id="Tip-16-Do-Back-of-the-Envelope-Calculations-in-Place">Tip 16: Do Back-of-the-Envelope Calculations in Place</h3><ul><li><code>&lt;C-r&gt;=&#123;expression&#125;&lt;CR&gt;</code> can calculate the value of the expression.</li></ul><h3 id="Tip-17-Insert-Unusual-Characters-by-Character-Code">Tip 17: Insert Unusual Characters by Character Code</h3><ul><li><code>&lt;C-v&gt;&#123;code&#125;</code> can insert some special characters.<ul><li>To know more, see <code>:h i_CTRL_V_digit</code> for more details.</li><li>Also, you can use <code>ga</code> to know the code of the letter under the cursor.</li><li><code>&lt;C-v&gt;&lt;Tab&gt;</code> is to insert the tab rather than any spaces<br>whether you use the <code>expandtab</code> option.</li></ul></li></ul><h3 id="Tip-18-Insert-Unusual-Characters-by-Digraph">Tip 18: Insert Unusual Characters by Digraph</h3><ul><li><code>&lt;C_k&gt;&#123;char1&#125;&#123;char2&#125;</code> can type digraphs.<ul><li>Use <code>:digraph</code> for more details.</li></ul></li></ul><h3 id="Tip-19-Overwrite-Existing-Text-with-Replace-Mode">Tip 19: Overwrite Existing Text with Replace Mode</h3><ul><li><code>R</code> is to enter the replace mode under the normal mode</li><li><code>r&#123;letter&#125;</code> is to replace the letter under the cursor with the {letter}.</li><li>Overwrite Tab Characters with Virtual Replace Mode<ul><li>If you didn’t set <code>expandtab</code>, replacing a tab means that<br>replace many characters with one. (Many is due to the option <code>tabstop</code>.</li><li>Also you can use <code>gR</code> to avoid it, use <code>gr</code> similarly.</li></ul></li></ul><h2 id="Chapter-4">Chapter 4</h2><h3 id="Tip-20-Grok-Visual-Mode">Tip 20: Grok Visual Mode</h3><ul><li><p>Use <code>v</code> to enter the visual mode.</p></li><li><p>Most commands are the same as themselves in the normal mode.</p><ul><li>The operator commands such as <code>y</code>, it needs you to confirm operation<br>object such as <code>iw</code>, but in the visual mode, the operation object directly<br>becomes the areas you have selected.</li></ul></li><li><p>Use <code>&lt;C-g&gt;</code> to enter the select mode, it is similar to the other editor.</p><ul><li>When you type any printable letter, the area you have selected will be<br>deleted and you will enter the insert mode with the letter printed.</li></ul></li></ul><h3 id="Tip-21-Define-a-Visual-Selection">Tip 21: Define a Visual Selection</h3><ul><li>Use <code>v</code> to enter the character-wise visual mode.</li><li>Use <code>V</code> to enter the line-wise visual mode.</li><li>Use <code>&lt;C-v&gt;</code> to enter the block-wise visual mode.</li><li>Use <code>gv</code> to reselect the last visual selection.</li></ul><p>Also they can be use to change visual mode from the other visual mode.</p><ul><li>Use <code>o</code> to move to the other end of the selection.</li></ul><h3 id="Tip-22-Repeat-Line-Wise-Visual-Commands">Tip 22: Repeat Line-Wise Visual Commands</h3><ul><li><code>.</code> command in the visual mode is to reselect the last visual selection<br>and do the same things such as indenting.</li></ul><h3 id="Tip-23-Prefer-Operators-to-Visual-Commands-Where-Possible">Tip 23: Prefer Operators to Visual Commands Where Possible</h3><ul><li>You’d better use dot command in the normal mode so that it can be repeatable.</li></ul><h3 id="Tip-24-Edit-Tabular-Data-with-Visual-Block-Mode">Tip 24: Edit Tabular Data with Visual-Block Mode</h3><ul><li>Use <code>&lt;C-v&gt;</code> to add the <code>|</code> in the same column for many lines.</li><li>Use <code>V</code> to change the whole line into <code>-</code> by <code>r-</code></li></ul><h3 id="Tip-25-Change-Columns-of-Text">Tip 25: Change Columns of Text</h3><ul><li>Return to the normal mode so that the change can be loaded.</li></ul><h3 id="Tip-26-Append-After-a-Ragged-Visual-Block">Tip 26: Append After a Ragged Visual Block</h3><ul><li><code>i</code> and <code>a</code> have another meanings under the visual mode.<br>We’ll expain it later.</li></ul><h2 id="Chapter-5-Command-Line-Mode">Chapter 5: Command-Line Mode</h2><h3 id="Tip-27-Meet-Vim’s-Command-Line">Tip 27: Meet Vim’s Command Line</h3><ul><li>See <code>:h delete</code>, <code>:h yank</code>, <code>:h put</code>, <code>:h copy</code>, <code>:h move</code>,<br><code>:h join</code>, <code>:h normal</code>, <code>:h substitute</code>, <code>:h global</code> for help.</li></ul><h3 id="Tip-28-Execute-a-Command-on-One-or-More-Consecutive-Lines">Tip 28: Execute a Command on One or More Consecutive Lines</h3><ul><li>See <code>:h range</code>, <code>:h pattern</code>, <code>:h mark</code> for help.</li></ul><h3 id="Tip-29-Duplicate-or-Move-Lines-Using-‘-t’-and-‘-m’-Commands">Tip 29: Duplicate or Move Lines Using ‘:t’ and ‘:m’ Commands</h3><ul><li><code>:t</code> is the same as <code>:copy</code>.</li></ul><h3 id="Tip-30-Run-Normal-Mode-Commands-Across-a-Range">Tip 30: Run Normal Mode Commands Across a Range</h3><ul><li>Use <code>:normal</code> to execute normal commands on the [range].</li></ul><h3 id="Tip-31-Repeat-the-Last-Ex-Command">Tip 31: Repeat the Last Ex Command</h3><ul><li>Use <code>@:</code> to execute the last ex command.<ul><li><code>:bnext</code> can jump to the next buffer, but <code>&lt;C-o&gt;</code> can jump to the last<br>position of the cursor so that after using <code>@:</code> you can use it to reverse.</li><li>Also for <code>:bprev</code> and <code>&lt;C-i&gt;</code>.</li></ul></li></ul><h3 id="Tip-32-Tab-Complete-Your-Ex-Commands">Tip 32: Tab-Complete Your Ex Commands</h3><ul><li><code>&lt;C-d&gt;</code> can reveal the list of possible completions.</li></ul><h3 id="Tip-33-Insert-the-Current-Word-at-the-Command-Prompt">Tip 33: Insert the Current Word at the Command Prompt</h3><ul><li><code>\*</code> can find the next match for the word under the cursor.</li><li><code>&lt;C-r&gt;&lt;C-w&gt;</code> can enter the word under the cursor in the command mode.</li></ul><h3 id="Tip-34-Recall-Commands-from-History">Tip 34: Recall Commands from History</h3><ul><li><p><code>&lt;Up&gt;</code> and <code>&lt;Down&gt;</code> can recall history commands.</p></li><li><p><code>&lt;C-p&gt;</code> and <code>&lt;C-n&gt;</code> can also do that.</p><ul><li>But they have a disadvantage.</li><li>When you type <code>:h </code> and use the arrow keystroke, it will filter the commands<br>you can try out.</li></ul></li><li><p>Use map to solve this problem.</p></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;&lt;C-p&gt;&quot;</span>, <span class="string">&quot;&lt;Up&gt;&quot;</span>, &#123; noremap = <span class="literal">true</span> &#125;)</span><br><span class="line">map(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;&lt;C-n&gt;&quot;</span>, <span class="string">&quot;&lt;Down&gt;&quot;</span>, &#123; noremap = <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure><ul><li><p><code>p:</code> can call a window which can list the history of commands, you can use<br><code>&lt;CR&gt;</code> to execute the command under the cursor.</p><ul><li>You can use any command in every mode, such as gather two lines divided by<br><code>|</code> and <code>&lt;CR&gt;</code> to execute.</li></ul></li><li><p><code>p/</code> call a window which list the search history.</p></li><li><p><code>&lt;C-f&gt;</code> in the command mode can do the same as <code>p:</code>.</p></li></ul><h3 id="Tip-35-Run-Commands-in-the-Shell">Tip 35: Run Commands in the Shell</h3><ul><li><p><code>:!&#123;command&#125;</code> execute commands under the terminal</p></li><li><p><code>:read !&#123;command&#125;</code> paste the outputs of commands to this buffer.</p></li><li><p><code>:write !&#123;command&#125;</code> use the content of this buffer as the input of commands.</p><ul><li>Notice: <code>:write! &#123;command&#125;</code> is different from the previous command,<br>see <code>:h write!</code> for help.</li></ul></li><li><p><code>:[range]!&#123;command&#125;</code> can execute commands specially for this [range].</p></li><li><p>See <code>:h !</code> for a convenient shortcut for setting the range.</p></li></ul><h3 id="Tip-36-Run-Multiple-Ex-Commands-as-a-Batch">Tip 36: Run Multiple Ex Commands as a Batch</h3><ul><li><p>You can save a list of commands in a <code>xxx.vim</code>, and use <code>:source xxx.vim</code> to execute it.</p></li><li><p>To files in <code>:args</code>, you can use <code>:argdo source xxx.vim</code> to execute every files.</p></li></ul><h2 id="Chapter-6-Manage-Multiple-Files">Chapter 6: Manage Multiple Files</h2><h3 id="Tip-37-Track-Open-Files-with-the-Buffer-List">Tip 37: Track Open Files with the Buffer List</h3><ul><li><p>When you execute <code>nvim [filename]</code>, the nvim will creat a copy of this file.<br>So what you do is on this copy, you can change the real file when you save it.</p></li><li><p>You can use wildcards to edit files, for instance, <code>nvim \*\.cpp</code></p></li><li><p>Then use <code>:ls</code> to see all buffers,<br>you can see a <code>%a</code> in front of your current buffer’s name.</p></li><li><p><code>:bnext</code> and <code>:bprev</code> can change the current buffer.</p></li><li><p><code>:bfirst</code> and <code>:blast</code> are easy to comprehense.</p></li><li><p><code>&lt;C-6&gt;(&lt;C-^&gt;)</code> can change to the buffer whose name has a <code>#</code> in front of itself.</p></li></ul><h3 id="Tip-38-Group-Buffers-into-a-Collection-with-the-Argument-List">Tip 38: Group Buffers into a Collection with the Argument List</h3><ul><li><code>:args &#123;lists&#125;</code> can add {lists} to populate argument lists.</li><li>Use <code>:args</code> to print the argument list, with the current file in square brackets.</li></ul><ol><li>List every file’s name.</li><li>Use wildcards.</li></ol><ul><li><code>*</code> matches anything, including nothing</li><li><code>**</code> matches anything, including nothing, recurses into directories</li></ul><ol start="3"><li>Use shell commands’ outputs.</li></ol><ul><li><p><code>:args \</code>cat filename.txt``</p></li><li><p>Use arguments list rather than buffers.</p></li></ul><h3 id="Tip-39-Manage-Hidden-Files">Tip 39: Manage Hidden Files</h3><ul><li><p>When a buffer is modified but not saved, <code>:ls</code> will show a <code>+</code> in front of this buffer.</p></li><li><p>The letter before the buffers indicates status, <code>a</code> means active, <code>h</code> means hidden.</p></li><li><p>If a hidden buffer isn’t be saved, quiting vim with <code>:q</code> is not allowed.</p></li><li><p>After seeing the words, vim will load the first unsaved file when you use <code>enter</code>.</p></li><li><p>Use <code>:qa!</code> can quit vim without saving changes.</p></li><li><p><code>:first</code>, <code>:last</code>, <code>:next</code>, <code>:prev</code> can jump to other files in the arguments.</p></li></ul><h3 id="Tip-40-Divide-Your-Workspace-into-Split-Windows">Tip 40: Divide Your Workspace into Split Windows</h3><ul><li><p><code>&lt;C-w&gt;s</code>, <code>&lt;C-w&gt;v</code> can split a new window which has same height or width as the former window.</p><ul><li>The new window will display the same buffer as previous window.<ul><li>You can use <code>:edit &#123;filename&#125;</code> to edit a new file.</li><li>Also you can us <code>:split &#123;filename&#125;</code> or <code>:vsp &#123;filename&#125;</code> instead.</li></ul></li></ul></li><li><p><code>&lt;C-w&gt;w</code> will circle among opened windows.</p></li><li><p><code>&lt;C-w&gt;h/l/j/k</code> will jump to the h/l/j/k window.</p></li><li><p><code>&lt;C-w&gt;c</code> close the current window.</p></li><li><p><code>&lt;C-w&gt;o</code> close other windows.</p></li><li><p><code>&lt;C-w&gt;=</code> equalize width and height of all windows.</p></li><li><p><code>&lt;C-w&gt;_</code> Maximize height of the active window.</p></li><li><p><code>&lt;C-w&gt;|</code> Maximize width of the active window.</p></li><li><p><code>[N]&lt;C-w&gt;_</code> Set active window height to [N] rows.</p></li><li><p><code>[N]&lt;C-w&gt;|</code> Set active window width to [N] rows.</p></li><li><p>You won’t resize windows at most time, so you can use mouse ultimately.</p></li><li><p>See <code>:h window-moving</code> to know more about it.</p></li></ul><h3 id="Tip-41-Organize-Your-Window-Layouts-with-Tab-Pages">Tip 41: Organize Your Window Layouts with Tab Pages</h3><ul><li><p>Tab page can collect lots of windows, so you can open a new tab to do otherthings<br>and you can come back when you want.</p></li><li><p><code>lcd &#123;path&#125;</code> can change working directory locally for the current window.<br>So we can creat a new tab to edit a diffrent project such as your nvim config.</p></li><li><p><code>:windo lcd &#123;path&#125;</code> can change all windows’ directory to {path}.</p></li><li><p><code>&lt;C-w&gt;T</code> can move the current window to a new tab page.</p></li><li><p><code>:tabedit &#123;filename&#125;</code> can edit {filename} in a new tab page.</p></li><li><p><code>:tabclose</code> and <code>:tabonly</code> are similar to <code>&lt;C-w&gt;c</code> and <code>&lt;C-w&gt;o</code>.</p></li></ul><h2 id="Chapter-7-Open-Files-and-Save-Them-to-Disk">Chapter 7: Open Files and Save Them to Disk</h2><h3 id="Tip-42-Open-a-File-by-Its-Filepath-Using-‘-edit’">Tip 42: Open a File by Its Filepath Using ‘:edit’</h3><ul><li><p><code>:pwd</code> can show absolute path of the current file.</p></li><li><p>We can use relative or absolute path after <code>:edit</code>.</p></li><li><p><code>:edit %&lt;Tab&gt;</code> can print absolute path of the current file from the directory<br>which ordered by <code>:lcd</code>.</p></li><li><p><code>:edit %:h&lt;Tab&gt;</code> can print absolute path of the current file’s directory.</p></li></ul><h3 id="Tip-43-Open-a-File-by-Its-Filename-Using-‘-find’">Tip 43: Open a File by Its Filename Using ‘:find’</h3><ul><li><code>find &#123;filename&#125;</code> can search {filename} in path. (Use <code>&lt;Tab&gt;</code> to autocomplete)<ul><li>Path can be set by <code>:set path = &#123;path&#125;,&#123;path&#125;,...</code>.(See <code>:h path</code> for help)</li><li><code>:set path+=&#123;path&#125;</code> can add {path} to the end of the former path.<ul><li><code>:set path=./**</code> so that every files under <code>.</code> will be included.</li></ul></li></ul></li></ul><h3 id="Tip-44-Explore-the-File-System-with-netrw">Tip 44: Explore the File System with netrw</h3><ul><li>If you use <code>NvimTree</code>, <code>netrw</code> is always been banned.</li></ul><h3 id="Tip-45-Save-Files-to-Nonexistent-Directories">Tip 45: Save Files to Nonexistent Directories</h3><ul><li><code>&lt;C-g&gt;</code> can show file’s path and other information.</li><li><code>:!mkdir -p %:h</code> can creat directories so that you can save.</li></ul><h3 id="Tip-46-Save-a-File-as-the-Super-User">Tip 46: Save a File as the Super User</h3><ul><li><code>:w !sudo tee % &gt; &#123;path&#125;</code></li></ul><h2 id="Chapter-8-Navigate-Inside-Files-with-Motions">Chapter 8: Navigate Inside Files with Motions</h2><h3 id="Tip-47-Keep-Your-Fingers-on-the-Home-Row">Tip 47: Keep Your Fingers on the Home Row</h3><ul><li>When you use three or more times <code>h</code>, you should consider how to optimize your operators.</li></ul><h3 id="Tip-48-Distinguish-Between-Real-Lines-and-Display-Lines">Tip 48: Distinguish Between Real Lines and Display Lines</h3><ul><li><code>j</code>, <code>k</code>, <code>l</code>, <code>h</code>, <code>$</code>, <code>^</code>, is used to move on real lines.</li><li><code>gj</code>, <code>gk</code>, <code>gl</code>, <code>gh</code>, <code>g$</code>, <code>g^</code> is used to move on display lines.</li></ul><h3 id="Tip-49-Move-Word-Wise">Tip 49: Move Word-Wise</h3><ul><li>See <code>:h w</code>, <code>:h e</code>, <code>:h b</code>, <code>:h ge</code> for help</li><li>See <code>:h W</code>, <code>:h E</code>, <code>:h B</code>, <code>:h gE</code> for help</li></ul><h3 id="Tip-50-Find-by-Character">Tip 50: Find by Character</h3><ul><li><p>See <code>:h f</code>,<code>:h F</code>,<code>:h t</code>,<code>:h T</code>,<code>:h ,</code>,<code>:h ;</code> for help</p></li><li><p>Always use <code>f/F</code> in the normal mode and <code>t/T</code> under the operator-pending mode.</p></li><li><p>Always find the letter with a low frequency of occurrence, this will make you faster.</p></li></ul><h3 id="Tip-51-Search-to-Navigate">Tip 51: Search to Navigate</h3><ul><li>Use <code>/</code> to find patterns in this file so that you can move quickly.</li><li>Use <code>d/xxx</code> to delete, it won’t delete the first letter of {pattern}, cool.</li></ul><h3 id="Tip-52-Trace-Your-Selection-with-Precision-Text-Objects">Tip 52: Trace Your Selection with Precision Text Objects</h3><ul><li><p>See <code>:h text-objects</code> for help.</p></li><li><p>Vim’s text-objects consist of two letters.</p></li><li><p><code>ib</code> is the same as <code>i(</code>, <code>iB</code> is the same as <code>i&#123;</code>.</p></li></ul><blockquote><p>Text objects are the next level up. If the f{char} and /pattern <CR> commands<br>are like a flying kick to the head, then text objects are like a scissors kick<br>that strikes two targets with a single move.</p></blockquote><p>It’s funny, haha.</p><h3 id="Tip-53-Delete-Around-or-Change-Inside">Tip 53: Delete Around, or Change Inside</h3><ul><li><p>Now we will discuss vim’s text-objects which interact with chunks of text.<br><code>iw</code>, <code>iW</code>, <code>ip</code>, <code>is</code>. A sentense.</p></li><li><p>As usual, <code>d&#123;motion&#125;</code> command tends to work well with <code>aw</code>, <code>as</code> and <code>ap</code>.</p></li><li><p>As usual, <code>c&#123;motion&#125;</code> command tends to work well with <code>iw</code>, <code>is</code> and <code>ip</code>.</p></li></ul><h3 id="Tip-54-Mark-Your-Place-and-Snap-Back-to-It">Tip 54: Mark Your Place and Snap Back to It</h3><ul><li><p><code>m&#123;mark&#125;</code> can set a mark under the cursor.</p></li><li><p><code>'&#123;mark&#125;</code> can jump to the first non-whitespace character of the line which has mark.</p></li><li><p><code>\</code>{mark}` can jump to the marked position.</p></li><li><p><code>Automatic Marks</code> are useful, see <code>h: mark</code> for help.</p></li></ul><h3 id="Tip-55-Jump-Between-Matching-Parentheses">Tip 55: Jump Between Matching Parentheses</h3><ul><li><p><code>%</code> can move between opening and closing pairs of parentheses,<br>ans creat a mark call <code>\``, so you can move back by </code>```.</p></li><li><p>It is recommended to install <code>surround</code> plugin.</p></li></ul><h2 id="Chapter-9-Navigate-Between-Files-with-Jumps">Chapter 9: Navigate Between Files with Jumps</h2><h3 id="Tip-56-Traverse-the-Jump-List">Tip 56: Traverse the Jump List</h3><ul><li><p><code>:jumps</code> can show the jump list, these commands can be seen a jump.</p><ul><li>Changing the active file for the current window.</li><li>Moving directly to a line number.</li><li>Sentense-wise and paragraph-wise motions.</li><li>Jumping to a mark.</li><li>Finding patterns.</li></ul></li><li><p>Use <code>&lt;C-i&gt;</code>, ‘<C-o>’ can jump to the next and previous one in the jump list.</p></li><li><p>Vim can maintain many jump list for each separate window.</p></li><li><p>Note: <code>&lt;C-i&gt;</code> is the same as <code>&lt;Tab&gt;</code>, so if you map <code>&lt;Tab&gt;</code>, <code>&lt;C-i&gt;</code> will also be mapped.</p></li></ul><h3 id="Tip-57-Traverse-the-Change-List">Tip 57: Traverse the Change List</h3><ul><li><p><code>:changes</code> can show the change list.</p><ul><li><code>u</code> and <code>&lt;C-r&gt;</code> can undo and redo.</li><li><code>g;</code> and <code>g,</code> can move the cursor to<br>the previous and next position of changes in the change list.</li></ul></li><li><p>Use mark to jump:</p><ul><li><code>.</code> is the position of last change.</li><li><code>^</code> is the position of the cursor the last time of quitting insert mode.</li></ul></li><li><p><code>gi</code> is the same as <code>'^i</code>.</p></li><li><p>Vim will maintain a change list to every buffer, it is diffrent from the jump list.</p></li></ul><h3 id="Tip-58-Jump-to-the-Filename-Under-the-Cursor">Tip 58: Jump to the Filename Under the Cursor</h3><ul><li><code>gf</code> can jump to the file under the cursor.</li><li><code>:set suffixesadd+=.lua</code> can ask vim to add the suffix to the filename when opening files.</li><li>Combined with <code>:set path</code>, it will be useful.</li></ul><h3 id="Tip-59-Snap-Between-Files-Using-Global-Marks">Tip 59: Snap Between Files Using Global Marks</h3><ul><li><p><code>m&#123;letter&#125;</code> can creat a mark so you can jump back quickly.</p><ul><li>Lowercase letters creat local marks.</li><li>Uppercase letters creat global marks.</li></ul></li><li><p>Remember to mark when you want to use any command that interact with the quickfix list.</p></li></ul><h2 id="Chapter-10-Copy-and-Paste">Chapter 10: Copy and Paste.</h2><h3 id="Tip-60-Delete-Yank-and-Put-with-Vim’s-Unnamed-Register">Tip 60: Delete, Yank, and Put with Vim’s Unnamed Register</h3><ul><li>Transposing Characters: <code>xp</code></li><li>Transposing Lines: <code>ddp</code></li><li>Duplicating Lines: <code>yyp</code></li></ul><h3 id="Tip-61-Grok-Vim’s-Registers">Tip 61: Grok Vim’s Registers</h3><ul><li><p>We can specify which register we want to use by prefixing the command with <code>&quot;&#123;register&#125;</code>.</p><ul><li>Commands can be delete, yank and put.</li></ul></li><li><p>There is a special register called black hole which will truely delete something.</p><ul><li><code>&quot;_d</code> can do that.</li></ul></li><li><p><code>&quot;a</code> is a named register, there are 26 registers to use, they work respectively.</p></li><li><p><code>&quot;&quot;</code> is a unnamed register, which commands set contents of.</p></li><li><p>The Yank Register (&quot;0) is only written when you use <code>y</code>, also the contents will be<br>copied to the register <code>&quot;&quot;</code>.</p></li><li><p><code>&quot;=</code> register is the expression register, when you use it, you will be orderd to<br>type expression under the command mode and it will use the result of your expression.</p></li><li><p>&quot;% Name of the current file</p></li><li><p>&quot;# Name of the alternate file</p></li><li><p>&quot;. Last inserted text</p></li><li><p>&quot;: Last Ex command</p></li><li><p>&quot;/ Last search pattern</p></li></ul><h3 id="Tip-62-Replace-a-Visual-Selection-with-a-Register">Tip 62: Replace a Visual Selection with a Register</h3><ul><li><p>When you are in the visual mode, <code>p</code> is to replace the selection<br>with the contents of the specified register</p></li><li><p>You can change two blocks of text.</p><ul><li>Delete one block, select the other block and <code>p</code>, go back to <code>p</code> one more.</li><li>You can use mark to quickly go back.</li></ul></li></ul><h3 id="Tip-63-Paste-from-a-Register">Tip 63: Paste from a Register</h3><ul><li><p>当你使用 <code>yy</code> 等面向行的操作时, vim 将会创建面向行的寄存器.</p></li><li><p>当你使用面向字符或者单词的操作时, vim 将会创建面向字符的寄存器.</p></li><li><p>面向字符的粘贴: 由于 <code>p</code> 和 <code>P</code> 的区别, 考虑粘贴在光标前后令人烦躁, 故在插入模式下使用 <code>&lt;C-r&gt;0</code>.</p></li><li><p>面向行的粘贴: <code>p</code> 和 <code>P</code> 会把他们粘贴到当前行之前或者之后, 同时光标落在粘贴部分的开头.</p><ul><li><code>gp</code> 和 <code>gP</code> 作用同上, 但是光标会在粘贴部分的末尾</li></ul></li></ul><h3 id="Tip-64-与系统剪贴板交互">Tip 64: 与系统剪贴板交互</h3><ul><li>请使用 <code>&quot;+</code> 寄存器来与系统剪贴板进行交互.</li></ul><h2 id="Chapter-10-宏">Chapter 10: 宏</h2><h1>起步</h1><ul><li><p><code>:q</code> 退出, <code>:q!</code> 不保存强制退出</p></li><li><p><code>:w</code> 保存, <code>:w file.txt</code> 保存新建的文件并命名</p></li><li><p><code>:h</code> 帮助, <code>:h write-quit</code> 查看特定命令的帮助</p></li><li><p><code>nvim file.txt</code> 打开文件, <code>nvim file1.txt file2.txt file3.txt</code></p></li></ul><blockquote><p>nvim 在不同 <code>buffer</code> 中打开文件</p></blockquote><ul><li><code>nvim --version</code> 查看版本, <code>:version</code> 在 <code>vim</code> 内查看版本</li><li><code>nvim +&#123;cmd&#125; file.txt</code> 打开文件后立即执行 <code>&#123;cmd&#125;</code></li></ul><blockquote><p>可使用 <code>nvim +&#123;cmd1&#125; +&#123;cmd2&#125; file.txt</code> 执行多个命令<br><code>nvim -c &#123;cmd&#125;</code> 也有相同效果</p></blockquote><ul><li><p><code>nvim -o2</code> 打开两个水平分隔窗口</p></li><li><p><code>nvim -o5 file1.txt file2.txt</code> 五个水平分隔的窗口并在前两个显示 <code>file1.txt</code> 和 <code>file2.txt</code></p></li><li><p><code>nvim -O2</code> 打开两个垂直分隔窗口</p></li><li><p><code>&lt;C-z&gt;</code> 用来挂起 <code>nvim</code>, 使用 <code>fg</code> 返回 <code>nvim</code></p></li></ul><blockquote><p><code>:suspend</code> 和 <code>:stop</code> 和 <code>&lt;C-z&gt;</code> 有相同效果</p></blockquote><h1>Buffers</h1><ul><li><code>:buffers</code> 查看所有 <code>buffer</code></li></ul><blockquote><p><code>:ls</code> 和 <code>:files</code> 有相同作用</p></blockquote><ul><li><p><code>:bn</code> 跳转到下一个 <code>buffer</code>, <code>:bp</code> 跳转到上一个 <code>buffer</code></p></li><li><p><code>:b &lt;filename&gt;</code> 跳转到特定文件, <code>:b n</code> 跳转到第n个 <code>buffer</code></p></li><li><p><code>&lt;C-o&gt;</code> 跳转到跳转列表中旧位置, <code>&lt;C-i&gt;</code> 跳转到跳转列表新位置, <code>&lt;C-^&gt;</code> 跳转到先前编辑的 <code>buffer</code></p></li><li><p><code>:bd</code> 删除当前 <code>buffer</code>, <code>:bd n</code>, <code>:bd &lt;filename&gt;</code> 删除特定 <code>buffer</code></p></li><li><p><code>:qa</code> 退出全部 <code>buffer</code>, <code>:wa</code> 保存所有 <code>buffer</code>, <code>:qa!</code> 强制退出所有 <code>buffer</code></p></li></ul><h1>Windows</h1><ul><li><code>:sp &lt;filename&gt;</code> 水平分割窗口, 并在新窗口打开文件</li></ul><blockquote><p><code>&lt;C-w&gt; s</code> 打开一个水平分割的窗口</p></blockquote><ul><li><code>:vsp &lt;filename&gt;</code> 垂直分割窗口, 并在新窗口打开文件</li></ul><blockquote><p><code>&lt;C-w&gt; v</code> 打开一个垂直分割的窗口</p></blockquote><ul><li><p><code>:new &lt;filename&gt;</code> 创建新窗口并打开文件</p></li><li><p><code>&lt;C-w&gt;j</code> 移动到下方窗口, <code>hkl</code> 同理</p></li><li><p><code>:buffer &lt;buffername&gt;</code> 使当前窗口显示此 <code>buffer</code></p></li><li><p><code>:q</code> 关闭当前窗口, <code>&lt;C-w&gt; c</code> 关闭当前窗口, <code>&lt;C-w&gt; o</code> 关闭除当前窗口的其他窗口</p></li></ul><h1>Tabs</h1><ul><li><code>:tabnew &lt;filename&gt;</code> 新 <code>tab</code></li><li><code>:tabclose</code> 关闭 <code>tab</code></li><li><code>:tabnext</code> 下一个, <code>:tabprevious</code> 上一个, <code>:tablast</code> 最后一个, <code>:tabfirst</code> 第一个</li><li><code>nvim -p file1.txt file2.txt file3.txt</code> 在多个 <code>tab</code> 中打开文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learn Git &amp; GitHub</title>
      <link href="/2023/01/07/LearnGitGithub/"/>
      <url>/2023/01/07/LearnGitGithub/</url>
      
        <content type="html"><![CDATA[<p>A note about learning Git.</p><span id="more"></span><h1>Git</h1><p>Git is a popular version control system.</p><h2 id="Get-started">Get started</h2><h3 id="Install">Install</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add-apt-repository ppa:git-core/ppa</span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h3 id="Check-the-Git-version">Check the Git version</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><h3 id="Configure-git">Configure git</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><blockquote><p>Note: <code>--global</code> will set the name and email for every repository on this computer.<br>You can remove <code>--global</code> to set the information just for this repository.</p></blockquote><h3 id="Create-a-git-folder">Create a git folder</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir myproject</span><br><span class="line">cd myproject</span><br></pre></td></tr></table></figure><h3 id="Initialize-git">Initialize git</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><blockquote><p>Note: Git creates a hidden folder called .git in the root directory of the repository to keep track of changes.</p></blockquote><h2 id="Add-new-files-to-git">Add new files to git</h2><ul><li>First, create a new file.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>Now git is aware of the file, but has not added it to our repository.</p><ul><li>Tracked: files have been added to your repository.</li><li>Untracked: files that are in your working directory, but not added to your repository.</li></ul><p><code>git status --short</code> can display the changes in a more compact way.</p><blockquote><p><code>??</code> Untracked files.<br><code>A</code> Files add to stage.<br><code>M</code> Modified files.<br><code>D</code> Deleted files.</p></blockquote><p>Use <code>git diff &lt;filename&gt;</code> to show the differences.</p><h2 id="Git-staging-environment">Git staging environment</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt;</span><br><span class="line">git status</span><br></pre></td></tr></table></figure><p>Use <code>git add -a</code> to add all files.</p><h2 id="Git-commit">Git commit</h2><p><code>git commit -m &quot;&lt;message&gt;&quot;</code></p><ul><li>Use <code>git commit -a -m &quot;&lt;message&gt;&quot;</code> to commit without stage(don’t recommend).</li><li>Use <code>git log</code> to view the historu of commits.</li></ul><h2 id="Git-help">Git help</h2><ul><li><code>git commit --help</code> – See all the available options for the specific command.<ul><li>Use <code>--help</code> to open the relevant Git manual page.</li></ul></li><li><code>git help --all</code> – See all possible commands.<ul><li><code>SHIFT + g</code> to the end of the list, <code>q</code> to exit.</li></ul></li></ul><h2 id="Git-branch">Git branch</h2><p>A branch is a new version of the main repository’s codebase.</p><p>To add some new features to the <code>firstfile.cpp</code>, create a new branch.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch newbranch</span><br></pre></td></tr></table></figure><p><code>git branch</code> can display all the branches.</p><p><code>git checkout newbranch</code> can move our current workspace from the main branch to the new branch.</p><blockquote><p><code>git checkout -b newbranch</code> will create a new branch and move to it if it doesn’t exist.</p></blockquote><p>Make some changes to a file and add a new file.</p><p><code>git status</code> – To check the status of the current branch.</p><p><code>git add --all</code> – Add files to the staging environment.</p><p>Now, <code>git checkout main</code> and <code>ls</code>, you’ll find that the file created just now is no longer exist.</p><h2 id="Emergency-branch">Emergency branch</h2><p>Imagine you are not yet done with the new branch, but we need to fix an error on main.</p><p>We can create a new branch called <code>bugFix</code> to deal with it without messing the two branches.</p><p>Make some changes, <code>git add</code> and <code>git commit</code>, now we should merge two branches.</p><h2 id="Git-merge">Git merge</h2><h3 id="Merge-branches">Merge branches</h3><p>Now <code>git checkout main</code> and <code>git merge bugFix</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge bugFix</span><br></pre></td></tr></table></figure><p>After merging, this branch is useless, so we want to delete it.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d bugFix</span><br></pre></td></tr></table></figure><h3 id="Merge-conflicts">Merge conflicts</h3><p>Now we return to our newbranch to finish our work, make some changes to the <code>firstfile.cpp</code>.</p><p>Then <code>git checkout main</code> and <code>git merge newbranch</code> to apply new changes.</p><p>We failed, then use <code>git status</code> to check the status.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Unmerged paths:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)</span><br><span class="line">        both modified:   firstfile.cpp</span><br></pre></td></tr></table></figure><p>Open the <code>firstfile.cpp</code> you’ll find there’s something new.</p><p>Adjust the file to what you want, then git add and git commit -m “merged changes”.</p><p>Delete the <code>newbranch</code>, then finish this part of work.</p><h1>Git and Github</h1><h2 id="Get-started-2">Get started</h2><p>Go to Github to sign up for an account and creat a new repository.</p><blockquote><p>Remember to use the same e-mail adress you used in the git config.</p></blockquote><h3 id="Push-local-repository-to-GitHub">Push local repository to GitHub</h3><p>Copy the link of the repository paste the following command.</p><p>Search for how to configure ssh.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:lzlcs/learngit.git</span><br></pre></td></tr></table></figure><p>Now, push out main branch to the origin url, and set it as the default remote branch.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin main</span><br></pre></td></tr></table></figure><blockquote><p><code>-u</code> is the same as <code>--set-upstream</code>.</p></blockquote><h2 id="Edit-files-in-Github">Edit files in Github</h2><p>It’s simple, follow the instructions.</p><h2 id="Git-pull-from-github">Git pull from github</h2><p>Use <code>pull</code> to get the most recent changes to your local copy.<br><code>pull</code> is a combination of 2 different commands: <code>fetch</code> and <code>merge</code>.</p><h3 id="Git-fetch">Git fetch</h3><p><code>fetch</code> gets all the change history of a tracked branch.<br>Now check our <code>status</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">On branch main</span><br><span class="line">Your branch is behind &#x27;origin/main&#x27; by 1 commit, and can be fast-forwarded.</span><br><span class="line">  (use &quot;git pull&quot; to update your local branch)</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><p>We are behind the <code>origin/main</code> by 1 <code>commit</code>, let’s double check by viewing the <code>log</code>.<br>Also use <code>git diff</code> to show the differences between our local <code>main</code> and <code>origin/main</code>.</p><p>So we can safely <code>merge</code>.</p><h3 id="Git-merge-2">Git merge</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git merge origin/main</span><br><span class="line">git status</span><br></pre></td></tr></table></figure><p>Everything is done.</p><h3 id="Git-pull">Git pull</h3><p>Make another change to the <code>README.md</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin</span><br></pre></td></tr></table></figure><h2 id="Push-to-Github">Push to Github</h2><p>Try making some changes to our local git and pushing them to Github.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;xxxx&quot;</span><br><span class="line">git push origin</span><br><span class="line">git status</span><br></pre></td></tr></table></figure><p>Go to Github to confirm that the repository has a new commmit.</p><h2 id="Github-branch">Github branch</h2><p>Create a branch <code>beta</code> on Github and make some changes.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git pull origin</span><br><span class="line">git status</span><br><span class="line">git branch -a</span><br></pre></td></tr></table></figure><blockquote><p>Use <code>git branch -a</code> to show all local and remote branches.<br>Use <code>git branch -r</code> to show remote branches only.</p></blockquote><p><code>git checkout beta</code> and <code>git pull</code> to check if it is all up to date.</p><p>Now you can see the changes you made recently on branch <code>beta</code>.</p><h2 id="Push-a-branch-to-Github">Push a branch to Github</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b branch2</span><br></pre></td></tr></table></figure><p>Make some changes.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git add </span><br><span class="line">git commit -m &quot;...&quot;</span><br><span class="line">git push origin branch2</span><br></pre></td></tr></table></figure><p>In Github, we can see the changes and merge them into the branch <code>master</code> if we approve it.</p><h2 id="Github-flow">Github flow</h2><ol><li>Create a new branch</li><li>Make changes and add commits</li><li>Open a pull request</li><li>Review</li><li>Deploy</li><li>Merge</li></ol><h3 id="Create-a-new-branch">Create a new branch</h3><p>If you want to try something new, you create a new branch.<br>Branching gives you an environment where you can make changes without affecting the main branch.</p><p>When you make a new branch, you will always want to make it from the main branch.</p><blockquote><p>Using descriptive names for new branches, so everyone can understand what is happening.</p></blockquote><h3 id="Make-changes-and-add-commits">Make changes and add commits</h3><p>When you reach a small milestone, add the changes into your branch by commit.</p><blockquote><p>Commit message are very important.</p></blockquote><h3 id="Open-a-pull-request">Open a pull request</h3><p>A Pull Request notifies people you have changes ready for them to consider or review.</p><h3 id="Review">Review</h3><p>When a Pull Request is made, it can be reviewed by whoever has the proper access to the branch.</p><h3 id="Deploy">Deploy</h3><p>GitHub allows you to deploy from a branch for final testing in production before merging with the master branch.</p><h3 id="Merge">Merge</h3><p>After exhaustive testing, you can merge the code into the master branch!</p><h1>Git contribute</h1><h2 id="Github-fork">Github fork</h2><h3 id="Fork-a-repository">Fork a repository</h3><p>Click the <code>fork</code>.</p><h2 id="Git-clone">Git clone</h2><h3 id="Clone-a-fork-from-Github">Clone a fork from Github</h3><p><strong>Move back to the origin repository.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone ....</span><br><span class="line">cd ....</span><br><span class="line">git status</span><br><span class="line">git log</span><br><span class="line">git remote -v </span><br></pre></td></tr></table></figure><p>Raname: <code>git remote rename origin upstream</code>.</p><p>Then fetch the URL of our own fork: <code>git remote add origin ...</code></p><ul><li>origin: we can read and write.</li><li>upstream wo can read only.</li></ul><h2 id="Github-send-pull-request">Github send pull request</h2><p>Make some changes.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;&quot;</span><br><span class="line">git push origin</span><br></pre></td></tr></table></figure><p>Now go to Github and pull request.</p><h2 id="Git-ignore">Git ignore</h2><p>When sharing your code with others, there are often files or parts of your project, you do not want to share.</p><h3 id="Create-gitignore">Create .gitignore</h3><p><code>touch .gitignore</code></p><blockquote><p>It is also possible to have additional .gitignore files in subdirectories.<br>These only apply to files or folders within that directory.</p></blockquote><h2 id="Git-security">Git security</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;...@...com&quot;</span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>Add ssh to Github.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">git remote set-url remote-name git@github.com:username/repository.git</span><br></pre></td></tr></table></figure><h1>Git undo</h1><h2 id="Git-revert">Git revert</h2><p>When we want to take a previous commit and add it as a new commit, keeping the log intact.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline</span><br><span class="line">git revert HEAD --no-edit</span><br></pre></td></tr></table></figure><p>Use <code>--no-edit</code> to skip the commit message editor (getting the default revert message).</p><h2 id="Git-reset">Git reset</h2><ul><li>Use <code>git log --pretty=oneline</code> to show the commit history.</li><li>Use <code>git reset --hard HEAD^</code> to be the last version.<ul><li><code>HEAD</code> is the current version, <code>HEAD^</code> is the previous version.</li><li><code>HEAD~n</code> is the previous n version</li></ul></li><li>Use <code>git reflog</code> to show your commands, you can find the version number to estoppel.</li></ul><h2 id="Git-amend">Git amend</h2><p>commit --amend is used to modify the most recent commit.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;Adding plines to reddme&quot;</span><br><span class="line">git commit --amend -m &quot;Added lines to README.md&quot;</span><br></pre></td></tr></table></figure><blockquote><p>You should avoid making changes that rewrite history to remote repositories,<br>especially if others are working with them.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UseFul Websites</title>
      <link href="/2023/01/01/UseFullWebsites/"/>
      <url>/2023/01/01/UseFullWebsites/</url>
      
        <content type="html"><![CDATA[<h1>Cheat Sheet</h1><p><a href="https://atts.w3cschool.cn/attachments/image/20191225/1577243564858376.png">Git Cheat Sheet</a> <br><a href="https://vim.rtorr.com/lang/zh_cn">Vim Cheat Sheet</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/25/hello-world/"/>
      <url>/2022/10/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
